Module(
    body=[
        Expr(
            value=Constant(value='\nImport Hygiene Lint\n^^^^^^^^^^^^^^^^^^^\n\nEnsures that the import statements follow the relevant rules.\n')),
        Import(
            names=[
                alias(name='ast')]),
        ImportFrom(
            module='typing',
            names=[
                alias(name='List'),
                alias(name='Sequence')],
            level=0),
        ImportFrom(
            module='ethereum_spec_tools.forks',
            names=[
                alias(name='Hardfork')],
            level=0),
        ImportFrom(
            module='ethereum_spec_tools.lint',
            names=[
                alias(name='Diagnostic'),
                alias(name='Lint'),
                alias(name='walk_sources')],
            level=0),
        ClassDef(
            name='ImportHygiene',
            bases=[
                Name(id='Lint', ctx=Load())],
            keywords=[],
            body=[
                Expr(
                    value=Constant(value='\n    Ensures that the import statements follow the relevant rules.\n\n    The rules when inside a hard fork file:\n\n     - Deny absolute imports from within the active fork.\n     - Deny absolute imports from future forks.\n     - Deny absolute imports from active-minus-two and earlier hard forks.\n     - Allow relative imports from the active hard fork.\n     - Allow absolute imports from the active-minus-one hard fork.\n     - Allow absolute imports of non-fork specific things.\n    ')),
                FunctionDef(
                    name='lint',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self'),
                            arg(
                                arg='forks',
                                annotation=Subscript(
                                    value=Name(id='List', ctx=Load()),
                                    slice=Name(id='Hardfork', ctx=Load()),
                                    ctx=Load())),
                            arg(
                                arg='position',
                                annotation=Name(id='int', ctx=Load()))],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Expr(
                            value=Constant(value='\n        Walks the sources for each hardfork and emits Diagnostic messages.\n        ')),
                        Assign(
                            targets=[
                                Name(id='all_sources', ctx=Store())],
                            value=Call(
                                func=Name(id='dict', ctx=Load()),
                                args=[
                                    Call(
                                        func=Name(id='walk_sources', ctx=Load()),
                                        args=[
                                            Subscript(
                                                value=Name(id='forks', ctx=Load()),
                                                slice=Name(id='position', ctx=Load()),
                                                ctx=Load())],
                                        keywords=[])],
                                keywords=[])),
                        AnnAssign(
                            target=Name(id='diagnostics', ctx=Store()),
                            annotation=Subscript(
                                value=Name(id='List', ctx=Load()),
                                slice=Name(id='Diagnostic', ctx=Load()),
                                ctx=Load()),
                            value=List(elts=[], ctx=Load()),
                            simple=1),
                        For(
                            target=Tuple(
                                elts=[
                                    Name(id='name', ctx=Store()),
                                    Name(id='source', ctx=Store())],
                                ctx=Store()),
                            iter=Call(
                                func=Attribute(
                                    value=Name(id='all_sources', ctx=Load()),
                                    attr='items',
                                    ctx=Load()),
                                args=[],
                                keywords=[]),
                            body=[
                                AugAssign(
                                    target=Name(id='diagnostics', ctx=Store()),
                                    op=Add(),
                                    value=Call(
                                        func=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='check_import',
                                            ctx=Load()),
                                        args=[
                                            Name(id='forks', ctx=Load()),
                                            Name(id='position', ctx=Load()),
                                            Name(id='name', ctx=Load()),
                                            Name(id='source', ctx=Load())],
                                        keywords=[]))],
                            orelse=[]),
                        Return(
                            value=Name(id='diagnostics', ctx=Load()))],
                    decorator_list=[],
                    returns=Subscript(
                        value=Name(id='Sequence', ctx=Load()),
                        slice=Name(id='Diagnostic', ctx=Load()),
                        ctx=Load())),
                FunctionDef(
                    name='check_import',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self'),
                            arg(
                                arg='forks',
                                annotation=Subscript(
                                    value=Name(id='List', ctx=Load()),
                                    slice=Name(id='Hardfork', ctx=Load()),
                                    ctx=Load())),
                            arg(
                                arg='position',
                                annotation=Name(id='int', ctx=Load())),
                            arg(
                                arg='name',
                                annotation=Name(id='str', ctx=Load())),
                            arg(
                                arg='source',
                                annotation=Name(id='str', ctx=Load()))],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Expr(
                            value=Constant(value='\n        Checks a Python source and emits diagnostic\n        messages if there are any invalid imports.\n        ')),
                        AnnAssign(
                            target=Name(id='diagnostics', ctx=Store()),
                            annotation=Subscript(
                                value=Name(id='List', ctx=Load()),
                                slice=Name(id='Diagnostic', ctx=Load()),
                                ctx=Load()),
                            value=List(elts=[], ctx=Load()),
                            simple=1),
                        Assign(
                            targets=[
                                Name(id='active_fork', ctx=Store())],
                            value=Attribute(
                                value=Subscript(
                                    value=Name(id='forks', ctx=Load()),
                                    slice=Name(id='position', ctx=Load()),
                                    ctx=Load()),
                                attr='name',
                                ctx=Load())),
                        Assign(
                            targets=[
                                Name(id='future_forks', ctx=Store())],
                            value=Call(
                                func=Name(id='tuple', ctx=Load()),
                                args=[
                                    GeneratorExp(
                                        elt=Attribute(
                                            value=Name(id='fork', ctx=Load()),
                                            attr='name',
                                            ctx=Load()),
                                        generators=[
                                            comprehension(
                                                target=Name(id='fork', ctx=Store()),
                                                iter=Subscript(
                                                    value=Name(id='forks', ctx=Load()),
                                                    slice=Slice(
                                                        lower=BinOp(
                                                            left=Name(id='position', ctx=Load()),
                                                            op=Add(),
                                                            right=Constant(value=1))),
                                                    ctx=Load()),
                                                ifs=[],
                                                is_async=0)])],
                                keywords=[])),
                        Assign(
                            targets=[
                                Name(id='ancient_forks', ctx=Store())],
                            value=IfExp(
                                test=Compare(
                                    left=Name(id='position', ctx=Load()),
                                    ops=[
                                        Gt()],
                                    comparators=[
                                        Constant(value=1)]),
                                body=Call(
                                    func=Name(id='tuple', ctx=Load()),
                                    args=[
                                        GeneratorExp(
                                            elt=Attribute(
                                                value=Name(id='fork', ctx=Load()),
                                                attr='name',
                                                ctx=Load()),
                                            generators=[
                                                comprehension(
                                                    target=Name(id='fork', ctx=Store()),
                                                    iter=Subscript(
                                                        value=Name(id='forks', ctx=Load()),
                                                        slice=Slice(
                                                            upper=BinOp(
                                                                left=Name(id='position', ctx=Load()),
                                                                op=Sub(),
                                                                right=Constant(value=1))),
                                                        ctx=Load()),
                                                    ifs=[],
                                                    is_async=0)])],
                                    keywords=[]),
                                orelse=Call(
                                    func=Name(id='tuple', ctx=Load()),
                                    args=[],
                                    keywords=[]))),
                        Assign(
                            targets=[
                                Name(id='current_imports', ctx=Store())],
                            value=Call(
                                func=Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='_parse',
                                    ctx=Load()),
                                args=[
                                    Name(id='source', ctx=Load()),
                                    Call(
                                        func=Name(id='_Visitor', ctx=Load()),
                                        args=[],
                                        keywords=[]),
                                    Constant(value='item_imports')],
                                keywords=[])),
                        For(
                            target=Name(id='item', ctx=Store()),
                            iter=Name(id='current_imports', ctx=Load()),
                            body=[
                                If(
                                    test=Compare(
                                        left=Name(id='item', ctx=Load()),
                                        ops=[
                                            Is()],
                                        comparators=[
                                            Constant(value=None)]),
                                    body=[
                                        Continue()],
                                    orelse=[
                                        If(
                                            test=Call(
                                                func=Attribute(
                                                    value=Name(id='item', ctx=Load()),
                                                    attr='startswith',
                                                    ctx=Load()),
                                                args=[
                                                    Name(id='active_fork', ctx=Load())],
                                                keywords=[]),
                                            body=[
                                                Assign(
                                                    targets=[
                                                        Name(id='diagnostic', ctx=Store())],
                                                    value=Call(
                                                        func=Name(id='Diagnostic', ctx=Load()),
                                                        args=[],
                                                        keywords=[
                                                            keyword(
                                                                arg='message',
                                                                value=JoinedStr(
                                                                    values=[
                                                                        Constant(value='The import `'),
                                                                        FormattedValue(
                                                                            value=Name(id='item', ctx=Load()),
                                                                            conversion=-1),
                                                                        Constant(value='` in `'),
                                                                        FormattedValue(
                                                                            value=Name(id='name', ctx=Load()),
                                                                            conversion=-1),
                                                                        Constant(value='` is from the current fork. Please use a relative import.')]))])),
                                                Expr(
                                                    value=Call(
                                                        func=Attribute(
                                                            value=Name(id='diagnostics', ctx=Load()),
                                                            attr='append',
                                                            ctx=Load()),
                                                        args=[
                                                            Name(id='diagnostic', ctx=Load())],
                                                        keywords=[]))],
                                            orelse=[
                                                If(
                                                    test=Call(
                                                        func=Attribute(
                                                            value=Name(id='item', ctx=Load()),
                                                            attr='startswith',
                                                            ctx=Load()),
                                                        args=[
                                                            Name(id='future_forks', ctx=Load())],
                                                        keywords=[]),
                                                    body=[
                                                        Assign(
                                                            targets=[
                                                                Name(id='diagnostic', ctx=Store())],
                                                            value=Call(
                                                                func=Name(id='Diagnostic', ctx=Load()),
                                                                args=[],
                                                                keywords=[
                                                                    keyword(
                                                                        arg='message',
                                                                        value=JoinedStr(
                                                                            values=[
                                                                                Constant(value='The import `'),
                                                                                FormattedValue(
                                                                                    value=Name(id='item', ctx=Load()),
                                                                                    conversion=-1),
                                                                                Constant(value='` in `'),
                                                                                FormattedValue(
                                                                                    value=Name(id='name', ctx=Load()),
                                                                                    conversion=-1),
                                                                                Constant(value='` is from a future fork. This is not allowed.')]))])),
                                                        Expr(
                                                            value=Call(
                                                                func=Attribute(
                                                                    value=Name(id='diagnostics', ctx=Load()),
                                                                    attr='append',
                                                                    ctx=Load()),
                                                                args=[
                                                                    Name(id='diagnostic', ctx=Load())],
                                                                keywords=[]))],
                                                    orelse=[
                                                        If(
                                                            test=Call(
                                                                func=Attribute(
                                                                    value=Name(id='item', ctx=Load()),
                                                                    attr='startswith',
                                                                    ctx=Load()),
                                                                args=[
                                                                    Name(id='ancient_forks', ctx=Load())],
                                                                keywords=[]),
                                                            body=[
                                                                Assign(
                                                                    targets=[
                                                                        Name(id='diagnostic', ctx=Store())],
                                                                    value=Call(
                                                                        func=Name(id='Diagnostic', ctx=Load()),
                                                                        args=[],
                                                                        keywords=[
                                                                            keyword(
                                                                                arg='message',
                                                                                value=JoinedStr(
                                                                                    values=[
                                                                                        Constant(value='The import `'),
                                                                                        FormattedValue(
                                                                                            value=Name(id='item', ctx=Load()),
                                                                                            conversion=-1),
                                                                                        Constant(value='` in `'),
                                                                                        FormattedValue(
                                                                                            value=Name(id='name', ctx=Load()),
                                                                                            conversion=-1),
                                                                                        Constant(value='` is from an older fork. Only imports from the previous fork are allowed.')]))])),
                                                                Expr(
                                                                    value=Call(
                                                                        func=Attribute(
                                                                            value=Name(id='diagnostics', ctx=Load()),
                                                                            attr='append',
                                                                            ctx=Load()),
                                                                        args=[
                                                                            Name(id='diagnostic', ctx=Load())],
                                                                        keywords=[]))],
                                                            orelse=[])])])])],
                            orelse=[]),
                        Return(
                            value=Name(id='diagnostics', ctx=Load()))],
                    decorator_list=[],
                    returns=Subscript(
                        value=Name(id='List', ctx=Load()),
                        slice=Name(id='Diagnostic', ctx=Load()),
                        ctx=Load()))],
            decorator_list=[]),
        ClassDef(
            name='_Visitor',
            bases=[
                Attribute(
                    value=Name(id='ast', ctx=Load()),
                    attr='NodeVisitor',
                    ctx=Load())],
            keywords=[],
            body=[
                Expr(
                    value=Constant(value='\n    Visits nodes in a syntax tree and collects functions, classes, and\n    assignments.\n    ')),
                AnnAssign(
                    target=Name(id='item_imports', ctx=Store()),
                    annotation=Subscript(
                        value=Name(id='List', ctx=Load()),
                        slice=Name(id='str', ctx=Load()),
                        ctx=Load()),
                    simple=1),
                FunctionDef(
                    name='__init__',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='item_imports',
                                    ctx=Store())],
                            value=List(elts=[], ctx=Load()))],
                    decorator_list=[],
                    returns=Constant(value=None)),
                FunctionDef(
                    name='visit_Import',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self'),
                            arg(
                                arg='mod',
                                annotation=Attribute(
                                    value=Name(id='ast', ctx=Load()),
                                    attr='Import',
                                    ctx=Load()))],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Expr(
                            value=Constant(value='\n        Visit an Import.\n        ')),
                        Expr(
                            value=Call(
                                func=Attribute(
                                    value=Attribute(
                                        value=Name(id='self', ctx=Load()),
                                        attr='item_imports',
                                        ctx=Load()),
                                    attr='append',
                                    ctx=Load()),
                                args=[
                                    Attribute(
                                        value=Subscript(
                                            value=Attribute(
                                                value=Name(id='mod', ctx=Load()),
                                                attr='names',
                                                ctx=Load()),
                                            slice=Constant(value=0),
                                            ctx=Load()),
                                        attr='name',
                                        ctx=Load())],
                                keywords=[]))],
                    decorator_list=[],
                    returns=Constant(value=None)),
                FunctionDef(
                    name='visit_ImportFrom',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self'),
                            arg(
                                arg='mod',
                                annotation=Attribute(
                                    value=Name(id='ast', ctx=Load()),
                                    attr='ImportFrom',
                                    ctx=Load()))],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Expr(
                            value=Constant(value='\n        Visit an ImportFrom.\n        ')),
                        Expr(
                            value=Call(
                                func=Attribute(
                                    value=Attribute(
                                        value=Name(id='self', ctx=Load()),
                                        attr='item_imports',
                                        ctx=Load()),
                                    attr='append',
                                    ctx=Load()),
                                args=[
                                    Call(
                                        func=Name(id='str', ctx=Load()),
                                        args=[
                                            Attribute(
                                                value=Name(id='mod', ctx=Load()),
                                                attr='module',
                                                ctx=Load())],
                                        keywords=[])],
                                keywords=[]))],
                    decorator_list=[],
                    returns=Constant(value=None))],
            decorator_list=[])],
    type_ignores=[])
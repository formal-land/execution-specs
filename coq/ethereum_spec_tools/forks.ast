Module(
    body=[
        Expr(
            value=Constant(value='\nEthereum Forks\n^^^^^^^^^^^^^^\n\nDetects Python packages that specify Ethereum hardforks.\n')),
        Import(
            names=[
                alias(name='importlib')]),
        Import(
            names=[
                alias(name='importlib.abc')]),
        Import(
            names=[
                alias(name='importlib.util')]),
        Import(
            names=[
                alias(name='pkgutil')]),
        ImportFrom(
            module='enum',
            names=[
                alias(name='Enum'),
                alias(name='auto')],
            level=0),
        ImportFrom(
            module='pathlib',
            names=[
                alias(name='PurePath')],
            level=0),
        ImportFrom(
            module='pkgutil',
            names=[
                alias(name='ModuleInfo')],
            level=0),
        ImportFrom(
            module='types',
            names=[
                alias(name='ModuleType')],
            level=0),
        ImportFrom(
            module='typing',
            names=[
                alias(name='TYPE_CHECKING'),
                alias(name='Any'),
                alias(name='Dict'),
                alias(name='Iterator'),
                alias(name='List'),
                alias(name='Optional'),
                alias(name='Type'),
                alias(name='TypeVar')],
            level=0),
        ImportFrom(
            module='ethereum_types.numeric',
            names=[
                alias(name='U256'),
                alias(name='Uint')],
            level=0),
        If(
            test=Name(id='TYPE_CHECKING', ctx=Load()),
            body=[
                ImportFrom(
                    module='ethereum.fork_criteria',
                    names=[
                        alias(name='ForkCriteria')],
                    level=0)],
            orelse=[]),
        ClassDef(
            name='ConsensusType',
            bases=[
                Name(id='Enum', ctx=Load())],
            keywords=[],
            body=[
                Expr(
                    value=Constant(value='\n    How a fork chooses its canonical chain.\n    ')),
                Assign(
                    targets=[
                        Name(id='PROOF_OF_WORK', ctx=Store())],
                    value=Call(
                        func=Name(id='auto', ctx=Load()),
                        args=[],
                        keywords=[])),
                Assign(
                    targets=[
                        Name(id='PROOF_OF_STAKE', ctx=Store())],
                    value=Call(
                        func=Name(id='auto', ctx=Load()),
                        args=[],
                        keywords=[])),
                FunctionDef(
                    name='is_pow',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Expr(
                            value=Constant(value='\n        Returns True if self == PROOF_OF_WORK.\n        ')),
                        Return(
                            value=Compare(
                                left=Name(id='self', ctx=Load()),
                                ops=[
                                    Eq()],
                                comparators=[
                                    Attribute(
                                        value=Name(id='ConsensusType', ctx=Load()),
                                        attr='PROOF_OF_WORK',
                                        ctx=Load())]))],
                    decorator_list=[],
                    returns=Name(id='bool', ctx=Load())),
                FunctionDef(
                    name='is_pos',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Expr(
                            value=Constant(value='\n        Returns True if self == PROOF_OF_STAKE.\n        ')),
                        Return(
                            value=Compare(
                                left=Name(id='self', ctx=Load()),
                                ops=[
                                    Eq()],
                                comparators=[
                                    Attribute(
                                        value=Name(id='ConsensusType', ctx=Load()),
                                        attr='PROOF_OF_STAKE',
                                        ctx=Load())]))],
                    decorator_list=[],
                    returns=Name(id='bool', ctx=Load()))],
            decorator_list=[]),
        Assign(
            targets=[
                Name(id='H', ctx=Store())],
            value=Call(
                func=Name(id='TypeVar', ctx=Load()),
                args=[
                    Constant(value='H')],
                keywords=[
                    keyword(
                        arg='bound',
                        value=Constant(value='Hardfork'))])),
        ClassDef(
            name='Hardfork',
            bases=[],
            keywords=[],
            body=[
                Expr(
                    value=Constant(value='\n    Metadata associated with an Ethereum hardfork.\n    ')),
                AnnAssign(
                    target=Name(id='mod', ctx=Store()),
                    annotation=Name(id='ModuleType', ctx=Load()),
                    simple=1),
                FunctionDef(
                    name='discover',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(
                                arg='cls',
                                annotation=Subscript(
                                    value=Name(id='Type', ctx=Load()),
                                    slice=Name(id='H', ctx=Load()),
                                    ctx=Load())),
                            arg(
                                arg='base',
                                annotation=Subscript(
                                    value=Name(id='Optional', ctx=Load()),
                                    slice=Name(id='PurePath', ctx=Load()),
                                    ctx=Load()))],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[
                            Constant(value=None)]),
                    body=[
                        Expr(
                            value=Constant(value='\n        Find packages which contain Ethereum hardfork specifications.\n        ')),
                        If(
                            test=Compare(
                                left=Name(id='base', ctx=Load()),
                                ops=[
                                    Is()],
                                comparators=[
                                    Constant(value=None)]),
                            body=[
                                Assign(
                                    targets=[
                                        Name(id='ethereum', ctx=Store())],
                                    value=Call(
                                        func=Attribute(
                                            value=Name(id='importlib', ctx=Load()),
                                            attr='import_module',
                                            ctx=Load()),
                                        args=[
                                            Constant(value='ethereum')],
                                        keywords=[]))],
                            orelse=[
                                Assign(
                                    targets=[
                                        Name(id='spec', ctx=Store())],
                                    value=Call(
                                        func=Attribute(
                                            value=Attribute(
                                                value=Name(id='importlib', ctx=Load()),
                                                attr='util',
                                                ctx=Load()),
                                            attr='spec_from_file_location',
                                            ctx=Load()),
                                        args=[
                                            Constant(value='ethereum'),
                                            BinOp(
                                                left=Name(id='base', ctx=Load()),
                                                op=Div(),
                                                right=Constant(value='__init__.py'))],
                                        keywords=[
                                            keyword(
                                                arg='submodule_search_locations',
                                                value=List(elts=[], ctx=Load()))])),
                                If(
                                    test=Compare(
                                        left=Name(id='spec', ctx=Load()),
                                        ops=[
                                            Is()],
                                        comparators=[
                                            Constant(value=None)]),
                                    body=[
                                        Raise(
                                            exc=Call(
                                                func=Name(id='ValueError', ctx=Load()),
                                                args=[
                                                    Constant(value='unable to find module from file')],
                                                keywords=[]))],
                                    orelse=[]),
                                Assign(
                                    targets=[
                                        Name(id='ethereum', ctx=Store())],
                                    value=Call(
                                        func=Attribute(
                                            value=Attribute(
                                                value=Name(id='importlib', ctx=Load()),
                                                attr='util',
                                                ctx=Load()),
                                            attr='module_from_spec',
                                            ctx=Load()),
                                        args=[
                                            Name(id='spec', ctx=Load())],
                                        keywords=[])),
                                If(
                                    test=BoolOp(
                                        op=And(),
                                        values=[
                                            Attribute(
                                                value=Name(id='spec', ctx=Load()),
                                                attr='loader',
                                                ctx=Load()),
                                            Call(
                                                func=Name(id='hasattr', ctx=Load()),
                                                args=[
                                                    Attribute(
                                                        value=Name(id='spec', ctx=Load()),
                                                        attr='loader',
                                                        ctx=Load()),
                                                    Constant(value='exec_module')],
                                                keywords=[])]),
                                    body=[
                                        Expr(
                                            value=Call(
                                                func=Attribute(
                                                    value=Attribute(
                                                        value=Name(id='spec', ctx=Load()),
                                                        attr='loader',
                                                        ctx=Load()),
                                                    attr='exec_module',
                                                    ctx=Load()),
                                                args=[
                                                    Name(id='ethereum', ctx=Load())],
                                                keywords=[]))],
                                    orelse=[])]),
                        Assign(
                            targets=[
                                Name(id='path', ctx=Store())],
                            value=Call(
                                func=Name(id='getattr', ctx=Load()),
                                args=[
                                    Name(id='ethereum', ctx=Load()),
                                    Constant(value='__path__'),
                                    Constant(value=None)],
                                keywords=[])),
                        If(
                            test=Compare(
                                left=Name(id='path', ctx=Load()),
                                ops=[
                                    Is()],
                                comparators=[
                                    Constant(value=None)]),
                            body=[
                                Raise(
                                    exc=Call(
                                        func=Name(id='ValueError', ctx=Load()),
                                        args=[
                                            Constant(value='module `ethereum` has no path information')],
                                        keywords=[]))],
                            orelse=[]),
                        Assign(
                            targets=[
                                Name(id='modules', ctx=Store())],
                            value=Call(
                                func=Attribute(
                                    value=Name(id='pkgutil', ctx=Load()),
                                    attr='iter_modules',
                                    ctx=Load()),
                                args=[
                                    Name(id='path', ctx=Load()),
                                    BinOp(
                                        left=Attribute(
                                            value=Name(id='ethereum', ctx=Load()),
                                            attr='__name__',
                                            ctx=Load()),
                                        op=Add(),
                                        right=Constant(value='.'))],
                                keywords=[])),
                        Assign(
                            targets=[
                                Name(id='modules', ctx=Store())],
                            value=GeneratorExp(
                                elt=Name(id='module', ctx=Load()),
                                generators=[
                                    comprehension(
                                        target=Name(id='module', ctx=Store()),
                                        iter=Name(id='modules', ctx=Load()),
                                        ifs=[
                                            Attribute(
                                                value=Name(id='module', ctx=Load()),
                                                attr='ispkg',
                                                ctx=Load())],
                                        is_async=0)])),
                        AnnAssign(
                            target=Name(id='forks', ctx=Store()),
                            annotation=Subscript(
                                value=Name(id='List', ctx=Load()),
                                slice=Name(id='H', ctx=Load()),
                                ctx=Load()),
                            value=List(elts=[], ctx=Load()),
                            simple=1),
                        For(
                            target=Name(id='pkg', ctx=Store()),
                            iter=Name(id='modules', ctx=Load()),
                            body=[
                                If(
                                    test=Call(
                                        func=Name(id='isinstance', ctx=Load()),
                                        args=[
                                            Attribute(
                                                value=Name(id='pkg', ctx=Load()),
                                                attr='module_finder',
                                                ctx=Load()),
                                            Attribute(
                                                value=Attribute(
                                                    value=Name(id='importlib', ctx=Load()),
                                                    attr='abc',
                                                    ctx=Load()),
                                                attr='MetaPathFinder',
                                                ctx=Load())],
                                        keywords=[]),
                                    body=[
                                        Assign(
                                            targets=[
                                                Name(id='found', ctx=Store())],
                                            value=Call(
                                                func=Attribute(
                                                    value=Attribute(
                                                        value=Name(id='pkg', ctx=Load()),
                                                        attr='module_finder',
                                                        ctx=Load()),
                                                    attr='find_spec',
                                                    ctx=Load()),
                                                args=[
                                                    Attribute(
                                                        value=Name(id='pkg', ctx=Load()),
                                                        attr='name',
                                                        ctx=Load()),
                                                    Constant(value=None)],
                                                keywords=[]))],
                                    orelse=[
                                        Assign(
                                            targets=[
                                                Name(id='found', ctx=Store())],
                                            value=Call(
                                                func=Attribute(
                                                    value=Attribute(
                                                        value=Name(id='pkg', ctx=Load()),
                                                        attr='module_finder',
                                                        ctx=Load()),
                                                    attr='find_spec',
                                                    ctx=Load()),
                                                args=[
                                                    Attribute(
                                                        value=Name(id='pkg', ctx=Load()),
                                                        attr='name',
                                                        ctx=Load())],
                                                keywords=[]))]),
                                If(
                                    test=UnaryOp(
                                        op=Not(),
                                        operand=Name(id='found', ctx=Load())),
                                    body=[
                                        Raise(
                                            exc=Call(
                                                func=Name(id='Exception', ctx=Load()),
                                                args=[
                                                    JoinedStr(
                                                        values=[
                                                            Constant(value='unable to find module spec for '),
                                                            FormattedValue(
                                                                value=Attribute(
                                                                    value=Name(id='pkg', ctx=Load()),
                                                                    attr='name',
                                                                    ctx=Load()),
                                                                conversion=-1)])],
                                                keywords=[]))],
                                    orelse=[]),
                                Assign(
                                    targets=[
                                        Name(id='mod', ctx=Store())],
                                    value=Call(
                                        func=Attribute(
                                            value=Attribute(
                                                value=Name(id='importlib', ctx=Load()),
                                                attr='util',
                                                ctx=Load()),
                                            attr='module_from_spec',
                                            ctx=Load()),
                                        args=[
                                            Name(id='found', ctx=Load())],
                                        keywords=[])),
                                If(
                                    test=Attribute(
                                        value=Name(id='found', ctx=Load()),
                                        attr='loader',
                                        ctx=Load()),
                                    body=[
                                        Expr(
                                            value=Call(
                                                func=Attribute(
                                                    value=Attribute(
                                                        value=Name(id='found', ctx=Load()),
                                                        attr='loader',
                                                        ctx=Load()),
                                                    attr='exec_module',
                                                    ctx=Load()),
                                                args=[
                                                    Name(id='mod', ctx=Load())],
                                                keywords=[]))],
                                    orelse=[
                                        Raise(
                                            exc=Call(
                                                func=Name(id='Exception', ctx=Load()),
                                                args=[
                                                    JoinedStr(
                                                        values=[
                                                            Constant(value='No loader found for module '),
                                                            FormattedValue(
                                                                value=Attribute(
                                                                    value=Name(id='pkg', ctx=Load()),
                                                                    attr='name',
                                                                    ctx=Load()),
                                                                conversion=-1)])],
                                                keywords=[]))]),
                                If(
                                    test=Call(
                                        func=Name(id='hasattr', ctx=Load()),
                                        args=[
                                            Name(id='mod', ctx=Load()),
                                            Constant(value='FORK_CRITERIA')],
                                        keywords=[]),
                                    body=[
                                        Expr(
                                            value=Call(
                                                func=Attribute(
                                                    value=Name(id='forks', ctx=Load()),
                                                    attr='append',
                                                    ctx=Load()),
                                                args=[
                                                    Call(
                                                        func=Name(id='cls', ctx=Load()),
                                                        args=[
                                                            Name(id='mod', ctx=Load())],
                                                        keywords=[])],
                                                keywords=[]))],
                                    orelse=[])],
                            orelse=[]),
                        Expr(
                            value=Call(
                                func=Attribute(
                                    value=Name(id='forks', ctx=Load()),
                                    attr='sort',
                                    ctx=Load()),
                                args=[],
                                keywords=[
                                    keyword(
                                        arg='key',
                                        value=Lambda(
                                            args=arguments(
                                                posonlyargs=[],
                                                args=[
                                                    arg(arg='fork')],
                                                kwonlyargs=[],
                                                kw_defaults=[],
                                                defaults=[]),
                                            body=Attribute(
                                                value=Name(id='fork', ctx=Load()),
                                                attr='criteria',
                                                ctx=Load())))])),
                        Return(
                            value=Name(id='forks', ctx=Load()))],
                    decorator_list=[
                        Name(id='classmethod', ctx=Load())],
                    returns=Subscript(
                        value=Name(id='List', ctx=Load()),
                        slice=Name(id='H', ctx=Load()),
                        ctx=Load())),
                FunctionDef(
                    name='load',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(
                                arg='cls',
                                annotation=Subscript(
                                    value=Name(id='Type', ctx=Load()),
                                    slice=Name(id='H', ctx=Load()),
                                    ctx=Load())),
                            arg(
                                arg='config_dict',
                                annotation=Subscript(
                                    value=Name(id='Dict', ctx=Load()),
                                    slice=Tuple(
                                        elts=[
                                            Constant(value='ForkCriteria'),
                                            Name(id='str', ctx=Load())],
                                        ctx=Load()),
                                    ctx=Load()))],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Expr(
                            value=Constant(value='\n        Load the forks from a config dict specifying fork blocks and\n        timestamps.\n        ')),
                        Assign(
                            targets=[
                                Name(id='config', ctx=Store())],
                            value=Call(
                                func=Name(id='sorted', ctx=Load()),
                                args=[
                                    Call(
                                        func=Attribute(
                                            value=Name(id='config_dict', ctx=Load()),
                                            attr='items',
                                            ctx=Load()),
                                        args=[],
                                        keywords=[])],
                                keywords=[
                                    keyword(
                                        arg='key',
                                        value=Lambda(
                                            args=arguments(
                                                posonlyargs=[],
                                                args=[
                                                    arg(arg='x')],
                                                kwonlyargs=[],
                                                kw_defaults=[],
                                                defaults=[]),
                                            body=Subscript(
                                                value=Name(id='x', ctx=Load()),
                                                slice=Constant(value=0),
                                                ctx=Load())))])),
                        Assign(
                            targets=[
                                Name(id='forks', ctx=Store())],
                            value=List(elts=[], ctx=Load())),
                        For(
                            target=Tuple(
                                elts=[
                                    Name(id='criteria', ctx=Store()),
                                    Name(id='name', ctx=Store())],
                                ctx=Store()),
                            iter=Name(id='config', ctx=Load()),
                            body=[
                                Assign(
                                    targets=[
                                        Name(id='mod', ctx=Store())],
                                    value=Call(
                                        func=Attribute(
                                            value=Name(id='importlib', ctx=Load()),
                                            attr='import_module',
                                            ctx=Load()),
                                        args=[
                                            BinOp(
                                                left=Constant(value='ethereum.'),
                                                op=Add(),
                                                right=Name(id='name', ctx=Load()))],
                                        keywords=[])),
                                Assign(
                                    targets=[
                                        Attribute(
                                            value=Name(id='mod', ctx=Load()),
                                            attr='FORK_CRITERIA',
                                            ctx=Store())],
                                    value=Name(id='criteria', ctx=Load())),
                                Expr(
                                    value=Call(
                                        func=Attribute(
                                            value=Name(id='forks', ctx=Load()),
                                            attr='append',
                                            ctx=Load()),
                                        args=[
                                            Call(
                                                func=Name(id='cls', ctx=Load()),
                                                args=[
                                                    Name(id='mod', ctx=Load())],
                                                keywords=[])],
                                        keywords=[]))],
                            orelse=[]),
                        Return(
                            value=Name(id='forks', ctx=Load()))],
                    decorator_list=[
                        Name(id='classmethod', ctx=Load())],
                    returns=Subscript(
                        value=Name(id='List', ctx=Load()),
                        slice=Name(id='H', ctx=Load()),
                        ctx=Load())),
                FunctionDef(
                    name='load_from_json',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(
                                arg='cls',
                                annotation=Subscript(
                                    value=Name(id='Type', ctx=Load()),
                                    slice=Name(id='H', ctx=Load()),
                                    ctx=Load())),
                            arg(
                                arg='json',
                                annotation=Name(id='Any', ctx=Load()))],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Expr(
                            value=Constant(value='\n        Load fork config from the json format used by Geth.\n\n        Does not support some forks that only exist on Mainnet. Use\n        `discover()` for Mainnet.\n        ')),
                        ImportFrom(
                            module='ethereum.fork_criteria',
                            names=[
                                alias(name='ByBlockNumber'),
                                alias(name='ByTimestamp')],
                            level=0),
                        Assign(
                            targets=[
                                Name(id='c', ctx=Store())],
                            value=Subscript(
                                value=Name(id='json', ctx=Load()),
                                slice=Constant(value='config'),
                                ctx=Load())),
                        Assign(
                            targets=[
                                Name(id='config', ctx=Store())],
                            value=Dict(
                                keys=[
                                    Call(
                                        func=Name(id='ByBlockNumber', ctx=Load()),
                                        args=[
                                            Constant(value=0)],
                                        keywords=[]),
                                    Call(
                                        func=Name(id='ByBlockNumber', ctx=Load()),
                                        args=[
                                            Subscript(
                                                value=Name(id='c', ctx=Load()),
                                                slice=Constant(value='homesteadBlock'),
                                                ctx=Load())],
                                        keywords=[]),
                                    Call(
                                        func=Name(id='ByBlockNumber', ctx=Load()),
                                        args=[
                                            Subscript(
                                                value=Name(id='c', ctx=Load()),
                                                slice=Constant(value='eip150Block'),
                                                ctx=Load())],
                                        keywords=[]),
                                    Call(
                                        func=Name(id='ByBlockNumber', ctx=Load()),
                                        args=[
                                            Subscript(
                                                value=Name(id='c', ctx=Load()),
                                                slice=Constant(value='eip155Block'),
                                                ctx=Load())],
                                        keywords=[]),
                                    Call(
                                        func=Name(id='ByBlockNumber', ctx=Load()),
                                        args=[
                                            Subscript(
                                                value=Name(id='c', ctx=Load()),
                                                slice=Constant(value='byzantiumBlock'),
                                                ctx=Load())],
                                        keywords=[]),
                                    Call(
                                        func=Name(id='ByBlockNumber', ctx=Load()),
                                        args=[
                                            Subscript(
                                                value=Name(id='c', ctx=Load()),
                                                slice=Constant(value='constantinopleBlock'),
                                                ctx=Load())],
                                        keywords=[]),
                                    Call(
                                        func=Name(id='ByBlockNumber', ctx=Load()),
                                        args=[
                                            Subscript(
                                                value=Name(id='c', ctx=Load()),
                                                slice=Constant(value='istanbulBlock'),
                                                ctx=Load())],
                                        keywords=[]),
                                    Call(
                                        func=Name(id='ByBlockNumber', ctx=Load()),
                                        args=[
                                            Subscript(
                                                value=Name(id='c', ctx=Load()),
                                                slice=Constant(value='berlinBlock'),
                                                ctx=Load())],
                                        keywords=[]),
                                    Call(
                                        func=Name(id='ByBlockNumber', ctx=Load()),
                                        args=[
                                            Subscript(
                                                value=Name(id='c', ctx=Load()),
                                                slice=Constant(value='londonBlock'),
                                                ctx=Load())],
                                        keywords=[]),
                                    Call(
                                        func=Name(id='ByBlockNumber', ctx=Load()),
                                        args=[
                                            Subscript(
                                                value=Name(id='c', ctx=Load()),
                                                slice=Constant(value='mergeForkBlock'),
                                                ctx=Load())],
                                        keywords=[]),
                                    Call(
                                        func=Name(id='ByTimestamp', ctx=Load()),
                                        args=[
                                            Subscript(
                                                value=Name(id='c', ctx=Load()),
                                                slice=Constant(value='shanghaiTime'),
                                                ctx=Load())],
                                        keywords=[])],
                                values=[
                                    Constant(value='frontier'),
                                    Constant(value='homestead'),
                                    Constant(value='tangerine_whistle'),
                                    Constant(value='spurious_dragon'),
                                    Constant(value='byzantium'),
                                    Constant(value='constantinople'),
                                    Constant(value='istanbul'),
                                    Constant(value='berlin'),
                                    Constant(value='london'),
                                    Constant(value='paris'),
                                    Constant(value='shanghai')])),
                        If(
                            test=Compare(
                                left=Constant(value='daoForkBlock'),
                                ops=[
                                    In()],
                                comparators=[
                                    Name(id='c', ctx=Load())]),
                            body=[
                                Raise(
                                    exc=Call(
                                        func=Name(id='Exception', ctx=Load()),
                                        args=[
                                            Constant(value='Hardfork.load_from_json() does not support Mainnet')],
                                        keywords=[]))],
                            orelse=[]),
                        Return(
                            value=Call(
                                func=Attribute(
                                    value=Name(id='cls', ctx=Load()),
                                    attr='load',
                                    ctx=Load()),
                                args=[
                                    Name(id='config', ctx=Load())],
                                keywords=[]))],
                    decorator_list=[
                        Name(id='classmethod', ctx=Load())],
                    returns=Subscript(
                        value=Name(id='List', ctx=Load()),
                        slice=Name(id='H', ctx=Load()),
                        ctx=Load())),
                FunctionDef(
                    name='__init__',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self'),
                            arg(
                                arg='mod',
                                annotation=Name(id='ModuleType', ctx=Load()))],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='mod',
                                    ctx=Store())],
                            value=Name(id='mod', ctx=Load()))],
                    decorator_list=[],
                    returns=Constant(value=None)),
                FunctionDef(
                    name='consensus',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Expr(
                            value=Constant(value='\n        How this fork chooses its canonical chain.\n        ')),
                        If(
                            test=Call(
                                func=Name(id='hasattr', ctx=Load()),
                                args=[
                                    Call(
                                        func=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='module',
                                            ctx=Load()),
                                        args=[
                                            Constant(value='fork')],
                                        keywords=[]),
                                    Constant(value='validate_proof_of_work')],
                                keywords=[]),
                            body=[
                                Return(
                                    value=Attribute(
                                        value=Name(id='ConsensusType', ctx=Load()),
                                        attr='PROOF_OF_WORK',
                                        ctx=Load()))],
                            orelse=[
                                Return(
                                    value=Attribute(
                                        value=Name(id='ConsensusType', ctx=Load()),
                                        attr='PROOF_OF_STAKE',
                                        ctx=Load()))])],
                    decorator_list=[
                        Name(id='property', ctx=Load())],
                    returns=Name(id='ConsensusType', ctx=Load())),
                FunctionDef(
                    name='criteria',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Expr(
                            value=Constant(value='\n        Criteria to trigger this hardfork.\n        ')),
                        ImportFrom(
                            module='ethereum.fork_criteria',
                            names=[
                                alias(name='ForkCriteria')],
                            level=0),
                        Assign(
                            targets=[
                                Name(id='criteria', ctx=Store())],
                            value=Attribute(
                                value=Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='mod',
                                    ctx=Load()),
                                attr='FORK_CRITERIA',
                                ctx=Load())),
                        Assert(
                            test=Call(
                                func=Name(id='isinstance', ctx=Load()),
                                args=[
                                    Name(id='criteria', ctx=Load()),
                                    Name(id='ForkCriteria', ctx=Load())],
                                keywords=[])),
                        Return(
                            value=Name(id='criteria', ctx=Load()))],
                    decorator_list=[
                        Name(id='property', ctx=Load())],
                    returns=Constant(value='ForkCriteria')),
                FunctionDef(
                    name='block',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Expr(
                            value=Constant(value='\n        Block number of the first block in this hard fork.\n        ')),
                        ImportFrom(
                            module='ethereum.fork_criteria',
                            names=[
                                alias(name='ByBlockNumber')],
                            level=0),
                        If(
                            test=Call(
                                func=Name(id='isinstance', ctx=Load()),
                                args=[
                                    Attribute(
                                        value=Name(id='self', ctx=Load()),
                                        attr='criteria',
                                        ctx=Load()),
                                    Name(id='ByBlockNumber', ctx=Load())],
                                keywords=[]),
                            body=[
                                Return(
                                    value=Attribute(
                                        value=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='criteria',
                                            ctx=Load()),
                                        attr='block_number',
                                        ctx=Load()))],
                            orelse=[
                                Raise(
                                    exc=Name(id='AttributeError', ctx=Load()))])],
                    decorator_list=[
                        Name(id='property', ctx=Load())],
                    returns=Name(id='Uint', ctx=Load())),
                FunctionDef(
                    name='timestamp',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Expr(
                            value=Constant(value='\n        Block number of the first block in this hard fork.\n        ')),
                        ImportFrom(
                            module='ethereum.fork_criteria',
                            names=[
                                alias(name='ByTimestamp')],
                            level=0),
                        If(
                            test=Call(
                                func=Name(id='isinstance', ctx=Load()),
                                args=[
                                    Attribute(
                                        value=Name(id='self', ctx=Load()),
                                        attr='criteria',
                                        ctx=Load()),
                                    Name(id='ByTimestamp', ctx=Load())],
                                keywords=[]),
                            body=[
                                Return(
                                    value=Attribute(
                                        value=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='criteria',
                                            ctx=Load()),
                                        attr='timestamp',
                                        ctx=Load()))],
                            orelse=[
                                Raise(
                                    exc=Name(id='AttributeError', ctx=Load()))])],
                    decorator_list=[
                        Name(id='property', ctx=Load())],
                    returns=Name(id='U256', ctx=Load())),
                FunctionDef(
                    name='has_activated',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self'),
                            arg(
                                arg='block_number',
                                annotation=Name(id='Uint', ctx=Load())),
                            arg(
                                arg='timestamp',
                                annotation=Name(id='U256', ctx=Load()))],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Expr(
                            value=Constant(value='\n        Check whether this fork has activated.\n        ')),
                        Return(
                            value=Call(
                                func=Attribute(
                                    value=Attribute(
                                        value=Name(id='self', ctx=Load()),
                                        attr='criteria',
                                        ctx=Load()),
                                    attr='check',
                                    ctx=Load()),
                                args=[
                                    Name(id='block_number', ctx=Load()),
                                    Name(id='timestamp', ctx=Load())],
                                keywords=[]))],
                    decorator_list=[],
                    returns=Name(id='bool', ctx=Load())),
                FunctionDef(
                    name='path',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Expr(
                            value=Constant(value='\n        Path to the module containing this hard fork.\n        ')),
                        Assign(
                            targets=[
                                Name(id='got', ctx=Store())],
                            value=Call(
                                func=Name(id='getattr', ctx=Load()),
                                args=[
                                    Attribute(
                                        value=Name(id='self', ctx=Load()),
                                        attr='mod',
                                        ctx=Load()),
                                    Constant(value='__path__'),
                                    Constant(value=None)],
                                keywords=[])),
                        If(
                            test=BoolOp(
                                op=Or(),
                                values=[
                                    Compare(
                                        left=Name(id='got', ctx=Load()),
                                        ops=[
                                            Is()],
                                        comparators=[
                                            Constant(value=None)]),
                                    Call(
                                        func=Name(id='isinstance', ctx=Load()),
                                        args=[
                                            Name(id='got', ctx=Load()),
                                            Name(id='str', ctx=Load())],
                                        keywords=[])]),
                            body=[
                                Return(
                                    value=Name(id='got', ctx=Load()))],
                            orelse=[]),
                        Try(
                            body=[
                                Assert(
                                    test=Call(
                                        func=Name(id='isinstance', ctx=Load()),
                                        args=[
                                            Subscript(
                                                value=Name(id='got', ctx=Load()),
                                                slice=Constant(value=0),
                                                ctx=Load()),
                                            Name(id='str', ctx=Load())],
                                        keywords=[])),
                                Return(
                                    value=Subscript(
                                        value=Name(id='got', ctx=Load()),
                                        slice=Constant(value=0),
                                        ctx=Load()))],
                            handlers=[
                                ExceptHandler(
                                    type=Name(id='IndexError', ctx=Load()),
                                    body=[
                                        Return(
                                            value=Constant(value=None))])],
                            orelse=[],
                            finalbody=[])],
                    decorator_list=[
                        Name(id='property', ctx=Load())],
                    returns=Subscript(
                        value=Name(id='Optional', ctx=Load()),
                        slice=Name(id='str', ctx=Load()),
                        ctx=Load())),
                FunctionDef(
                    name='short_name',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Expr(
                            value=Constant(value='\n        Short name (without the `ethereum.` prefix) of the hard fork.\n        ')),
                        Return(
                            value=Subscript(
                                value=Call(
                                    func=Attribute(
                                        value=Attribute(
                                            value=Attribute(
                                                value=Name(id='self', ctx=Load()),
                                                attr='mod',
                                                ctx=Load()),
                                            attr='__name__',
                                            ctx=Load()),
                                        attr='split',
                                        ctx=Load()),
                                    args=[
                                        Constant(value='.')],
                                    keywords=[]),
                                slice=UnaryOp(
                                    op=USub(),
                                    operand=Constant(value=1)),
                                ctx=Load()))],
                    decorator_list=[
                        Name(id='property', ctx=Load())],
                    returns=Name(id='str', ctx=Load())),
                FunctionDef(
                    name='name',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Expr(
                            value=Constant(value='\n        Name of the hard fork.\n        ')),
                        Return(
                            value=Attribute(
                                value=Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='mod',
                                    ctx=Load()),
                                attr='__name__',
                                ctx=Load()))],
                    decorator_list=[
                        Name(id='property', ctx=Load())],
                    returns=Name(id='str', ctx=Load())),
                FunctionDef(
                    name='title_case_name',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Expr(
                            value=Constant(value='\n        Name of the hard fork.\n        ')),
                        Return(
                            value=Call(
                                func=Attribute(
                                    value=Call(
                                        func=Attribute(
                                            value=Attribute(
                                                value=Name(id='self', ctx=Load()),
                                                attr='short_name',
                                                ctx=Load()),
                                            attr='replace',
                                            ctx=Load()),
                                        args=[
                                            Constant(value='_'),
                                            Constant(value=' ')],
                                        keywords=[]),
                                    attr='title',
                                    ctx=Load()),
                                args=[],
                                keywords=[]))],
                    decorator_list=[
                        Name(id='property', ctx=Load())],
                    returns=Name(id='str', ctx=Load())),
                FunctionDef(
                    name='__repr__',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Expr(
                            value=Constant(value='\n        Return repr(self).\n        ')),
                        Return(
                            value=BinOp(
                                left=BinOp(
                                    left=BinOp(
                                        left=BinOp(
                                            left=BinOp(
                                                left=Attribute(
                                                    value=Attribute(
                                                        value=Name(id='self', ctx=Load()),
                                                        attr='__class__',
                                                        ctx=Load()),
                                                    attr='__name__',
                                                    ctx=Load()),
                                                op=Add(),
                                                right=Constant(value='(')),
                                            op=Add(),
                                            right=JoinedStr(
                                                values=[
                                                    Constant(value='name='),
                                                    FormattedValue(
                                                        value=Attribute(
                                                            value=Name(id='self', ctx=Load()),
                                                            attr='name',
                                                            ctx=Load()),
                                                        conversion=114),
                                                    Constant(value=', ')])),
                                        op=Add(),
                                        right=JoinedStr(
                                            values=[
                                                Constant(value='criteria='),
                                                FormattedValue(
                                                    value=Attribute(
                                                        value=Name(id='self', ctx=Load()),
                                                        attr='criteria',
                                                        ctx=Load()),
                                                    conversion=-1),
                                                Constant(value=', ')])),
                                    op=Add(),
                                    right=Constant(value='...')),
                                op=Add(),
                                right=Constant(value=')')))],
                    decorator_list=[],
                    returns=Name(id='str', ctx=Load())),
                FunctionDef(
                    name='import_module',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Expr(
                            value=Constant(value='\n        Return the module containing this specification.\n        ')),
                        Return(
                            value=Attribute(
                                value=Name(id='self', ctx=Load()),
                                attr='mod',
                                ctx=Load()))],
                    decorator_list=[],
                    returns=Name(id='ModuleType', ctx=Load())),
                FunctionDef(
                    name='module',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self'),
                            arg(
                                arg='name',
                                annotation=Name(id='str', ctx=Load()))],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Expr(
                            value=Constant(value='\n        Import if necessary, and return the given module belonging to this hard\n        fork.\n        ')),
                        Return(
                            value=Call(
                                func=Attribute(
                                    value=Name(id='importlib', ctx=Load()),
                                    attr='import_module',
                                    ctx=Load()),
                                args=[
                                    BinOp(
                                        left=BinOp(
                                            left=Attribute(
                                                value=Attribute(
                                                    value=Name(id='self', ctx=Load()),
                                                    attr='mod',
                                                    ctx=Load()),
                                                attr='__name__',
                                                ctx=Load()),
                                            op=Add(),
                                            right=Constant(value='.')),
                                        op=Add(),
                                        right=Name(id='name', ctx=Load()))],
                                keywords=[]))],
                    decorator_list=[],
                    returns=Name(id='Any', ctx=Load())),
                FunctionDef(
                    name='iter_modules',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Expr(
                            value=Constant(value='\n        Iterate through the (sub-)modules describing this hardfork.\n        ')),
                        If(
                            test=Compare(
                                left=Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='path',
                                    ctx=Load()),
                                ops=[
                                    Is()],
                                comparators=[
                                    Constant(value=None)]),
                            body=[
                                Raise(
                                    exc=Call(
                                        func=Name(id='ValueError', ctx=Load()),
                                        args=[
                                            JoinedStr(
                                                values=[
                                                    Constant(value='cannot walk '),
                                                    FormattedValue(
                                                        value=Attribute(
                                                            value=Name(id='self', ctx=Load()),
                                                            attr='name',
                                                            ctx=Load()),
                                                        conversion=-1),
                                                    Constant(value=', path is None')])],
                                        keywords=[]))],
                            orelse=[]),
                        Return(
                            value=Call(
                                func=Attribute(
                                    value=Name(id='pkgutil', ctx=Load()),
                                    attr='iter_modules',
                                    ctx=Load()),
                                args=[
                                    Attribute(
                                        value=Name(id='self', ctx=Load()),
                                        attr='path',
                                        ctx=Load()),
                                    BinOp(
                                        left=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='name',
                                            ctx=Load()),
                                        op=Add(),
                                        right=Constant(value='.'))],
                                keywords=[]))],
                    decorator_list=[],
                    returns=Subscript(
                        value=Name(id='Iterator', ctx=Load()),
                        slice=Name(id='ModuleInfo', ctx=Load()),
                        ctx=Load())),
                FunctionDef(
                    name='walk_packages',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Expr(
                            value=Constant(value='\n        Iterate recursively through the (sub-)modules describing this hardfork.\n        ')),
                        If(
                            test=Compare(
                                left=Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='path',
                                    ctx=Load()),
                                ops=[
                                    Is()],
                                comparators=[
                                    Constant(value=None)]),
                            body=[
                                Raise(
                                    exc=Call(
                                        func=Name(id='ValueError', ctx=Load()),
                                        args=[
                                            JoinedStr(
                                                values=[
                                                    Constant(value='cannot walk '),
                                                    FormattedValue(
                                                        value=Attribute(
                                                            value=Name(id='self', ctx=Load()),
                                                            attr='name',
                                                            ctx=Load()),
                                                        conversion=-1),
                                                    Constant(value=', path is None')])],
                                        keywords=[]))],
                            orelse=[]),
                        Return(
                            value=Call(
                                func=Attribute(
                                    value=Name(id='pkgutil', ctx=Load()),
                                    attr='walk_packages',
                                    ctx=Load()),
                                args=[
                                    List(
                                        elts=[
                                            Attribute(
                                                value=Name(id='self', ctx=Load()),
                                                attr='path',
                                                ctx=Load())],
                                        ctx=Load()),
                                    BinOp(
                                        left=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='name',
                                            ctx=Load()),
                                        op=Add(),
                                        right=Constant(value='.'))],
                                keywords=[]))],
                    decorator_list=[],
                    returns=Subscript(
                        value=Name(id='Iterator', ctx=Load()),
                        slice=Name(id='ModuleInfo', ctx=Load()),
                        ctx=Load()))],
            decorator_list=[])],
    type_ignores=[])
Module(
    body=[
        Expr(
            value=Constant(value='\nPlugins for docc specific to the Ethereum execution specification.\n')),
        Import(
            names=[
                alias(name='dataclasses')]),
        Import(
            names=[
                alias(name='logging')]),
        ImportFrom(
            module='collections',
            names=[
                alias(name='defaultdict')],
            level=0),
        ImportFrom(
            module='itertools',
            names=[
                alias(name='tee'),
                alias(name='zip_longest')],
            level=0),
        ImportFrom(
            module='pathlib',
            names=[
                alias(name='PurePath')],
            level=0),
        ImportFrom(
            module='typing',
            names=[
                alias(name='Dict'),
                alias(name='Final'),
                alias(name='FrozenSet'),
                alias(name='Generic'),
                alias(name='Iterable'),
                alias(name='Iterator'),
                alias(name='List'),
                alias(name='Optional'),
                alias(name='Sequence'),
                alias(name='Set'),
                alias(name='Tuple'),
                alias(name='Type'),
                alias(name='TypeVar'),
                alias(name='Union')],
            level=0),
        ImportFrom(
            module='docc.context',
            names=[
                alias(name='Context')],
            level=0),
        ImportFrom(
            module='docc.discover',
            names=[
                alias(name='Discover'),
                alias(name='T')],
            level=0),
        ImportFrom(
            module='docc.document',
            names=[
                alias(name='BlankNode'),
                alias(name='Document'),
                alias(name='ListNode'),
                alias(name='Node'),
                alias(name='Visit'),
                alias(name='Visitor')],
            level=0),
        ImportFrom(
            module='docc.plugins',
            names=[
                alias(name='html'),
                alias(name='mistletoe'),
                alias(name='python'),
                alias(name='verbatim')],
            level=0),
        ImportFrom(
            module='docc.plugins.listing',
            names=[
                alias(name='Listable')],
            level=0),
        ImportFrom(
            module='docc.plugins.python',
            names=[
                alias(name='PythonBuilder')],
            level=0),
        ImportFrom(
            module='docc.plugins.references',
            names=[
                alias(name='Definition'),
                alias(name='Reference')],
            level=0),
        ImportFrom(
            module='docc.settings',
            names=[
                alias(name='PluginSettings')],
            level=0),
        ImportFrom(
            module='docc.source',
            names=[
                alias(name='Source')],
            level=0),
        ImportFrom(
            module='docc.transform',
            names=[
                alias(name='Transform')],
            level=0),
        ImportFrom(
            module='fladrif.apply',
            names=[
                alias(name='Apply')],
            level=0),
        ImportFrom(
            module='fladrif.treediff',
            names=[
                alias(name='Adapter'),
                alias(name='Operation'),
                alias(name='TreeMatcher')],
            level=0),
        ImportFrom(
            module='mistletoe',
            names=[
                alias(name='block_token', asname='blocks')],
            level=0),
        ImportFrom(
            module='mistletoe',
            names=[
                alias(name='span_token', asname='spans')],
            level=0),
        ImportFrom(
            module='typing_extensions',
            names=[
                alias(name='assert_never')],
            level=0),
        ImportFrom(
            module='forks',
            names=[
                alias(name='Hardfork')],
            level=1),
        Assign(
            targets=[
                Name(id='G', ctx=Store())],
            value=Call(
                func=Name(id='TypeVar', ctx=Load()),
                args=[
                    Constant(value='G')],
                keywords=[])),
        FunctionDef(
            name='pairwise',
            args=arguments(
                posonlyargs=[],
                args=[
                    arg(
                        arg='iterable',
                        annotation=Subscript(
                            value=Name(id='Iterable', ctx=Load()),
                            slice=Name(id='G', ctx=Load()),
                            ctx=Load()))],
                kwonlyargs=[],
                kw_defaults=[],
                defaults=[]),
            body=[
                Expr(
                    value=Constant(value='\n    ABCDEFG --> AB BC CD DE EF FG\n    ')),
                Assign(
                    targets=[
                        Tuple(
                            elts=[
                                Name(id='a', ctx=Store()),
                                Name(id='b', ctx=Store())],
                            ctx=Store())],
                    value=Call(
                        func=Name(id='tee', ctx=Load()),
                        args=[
                            Name(id='iterable', ctx=Load())],
                        keywords=[])),
                Expr(
                    value=Call(
                        func=Name(id='next', ctx=Load()),
                        args=[
                            Name(id='b', ctx=Load()),
                            Constant(value=None)],
                        keywords=[])),
                Return(
                    value=Call(
                        func=Name(id='zip', ctx=Load()),
                        args=[
                            Name(id='a', ctx=Load()),
                            Name(id='b', ctx=Load())],
                        keywords=[]))],
            decorator_list=[],
            returns=Subscript(
                value=Name(id='Iterable', ctx=Load()),
                slice=Subscript(
                    value=Name(id='Tuple', ctx=Load()),
                    slice=Tuple(
                        elts=[
                            Name(id='G', ctx=Load()),
                            Name(id='G', ctx=Load())],
                        ctx=Load()),
                    ctx=Load()),
                ctx=Load())),
        ClassDef(
            name='EthereumDiscover',
            bases=[
                Name(id='Discover', ctx=Load())],
            keywords=[],
            body=[
                Expr(
                    value=Constant(value='\n    Creates sources that represent the diff between two other sources, one per\n    fork.\n    ')),
                AnnAssign(
                    target=Name(id='forks', ctx=Store()),
                    annotation=Subscript(
                        value=Name(id='List', ctx=Load()),
                        slice=Name(id='Hardfork', ctx=Load()),
                        ctx=Load()),
                    simple=1),
                AnnAssign(
                    target=Name(id='settings', ctx=Store()),
                    annotation=Name(id='PluginSettings', ctx=Load()),
                    simple=1),
                FunctionDef(
                    name='__init__',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self'),
                            arg(
                                arg='config',
                                annotation=Name(id='PluginSettings', ctx=Load()))],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='settings',
                                    ctx=Store())],
                            value=Name(id='config', ctx=Load())),
                        Assign(
                            targets=[
                                Name(id='base', ctx=Store())],
                            value=Call(
                                func=Attribute(
                                    value=Name(id='config', ctx=Load()),
                                    attr='resolve_path',
                                    ctx=Load()),
                                args=[
                                    BinOp(
                                        left=Call(
                                            func=Name(id='PurePath', ctx=Load()),
                                            args=[
                                                Constant(value='src')],
                                            keywords=[]),
                                        op=Div(),
                                        right=Constant(value='ethereum'))],
                                keywords=[])),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='forks',
                                    ctx=Store())],
                            value=Call(
                                func=Attribute(
                                    value=Name(id='Hardfork', ctx=Load()),
                                    attr='discover',
                                    ctx=Load()),
                                args=[],
                                keywords=[
                                    keyword(
                                        arg='base',
                                        value=Name(id='base', ctx=Load()))]))],
                    decorator_list=[],
                    returns=Constant(value=None)),
                FunctionDef(
                    name='discover',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self'),
                            arg(
                                arg='known',
                                annotation=Subscript(
                                    value=Name(id='FrozenSet', ctx=Load()),
                                    slice=Name(id='T', ctx=Load()),
                                    ctx=Load()))],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Expr(
                            value=Constant(value='\n        Find sources.\n        ')),
                        Assign(
                            targets=[
                                Name(id='forks', ctx=Store())],
                            value=DictComp(
                                key=Attribute(
                                    value=Name(id='f', ctx=Load()),
                                    attr='path',
                                    ctx=Load()),
                                value=Name(id='f', ctx=Load()),
                                generators=[
                                    comprehension(
                                        target=Name(id='f', ctx=Store()),
                                        iter=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='forks',
                                            ctx=Load()),
                                        ifs=[
                                            Compare(
                                                left=Attribute(
                                                    value=Name(id='f', ctx=Load()),
                                                    attr='path',
                                                    ctx=Load()),
                                                ops=[
                                                    IsNot()],
                                                comparators=[
                                                    Constant(value=None)])],
                                        is_async=0)])),
                        AnnAssign(
                            target=Name(id='by_fork', ctx=Store()),
                            annotation=Subscript(
                                value=Name(id='Dict', ctx=Load()),
                                slice=Tuple(
                                    elts=[
                                        Name(id='Hardfork', ctx=Load()),
                                        Subscript(
                                            value=Name(id='Dict', ctx=Load()),
                                            slice=Tuple(
                                                elts=[
                                                    Name(id='PurePath', ctx=Load()),
                                                    Name(id='Source', ctx=Load())],
                                                ctx=Load()),
                                            ctx=Load())],
                                    ctx=Load()),
                                ctx=Load()),
                            value=Call(
                                func=Name(id='defaultdict', ctx=Load()),
                                args=[
                                    Name(id='dict', ctx=Load())],
                                keywords=[]),
                            simple=1),
                        For(
                            target=Name(id='source', ctx=Store()),
                            iter=Name(id='known', ctx=Load()),
                            body=[
                                If(
                                    test=UnaryOp(
                                        op=Not(),
                                        operand=Attribute(
                                            value=Name(id='source', ctx=Load()),
                                            attr='relative_path',
                                            ctx=Load())),
                                    body=[
                                        Continue()],
                                    orelse=[]),
                                Assign(
                                    targets=[
                                        Name(id='absolute_path', ctx=Store())],
                                    value=Call(
                                        func=Attribute(
                                            value=Attribute(
                                                value=Name(id='self', ctx=Load()),
                                                attr='settings',
                                                ctx=Load()),
                                            attr='resolve_path',
                                            ctx=Load()),
                                        args=[
                                            Attribute(
                                                value=Name(id='source', ctx=Load()),
                                                attr='relative_path',
                                                ctx=Load())],
                                        keywords=[])),
                                For(
                                    target=Tuple(
                                        elts=[
                                            Name(id='fork_path', ctx=Store()),
                                            Name(id='fork_fork', ctx=Store())],
                                        ctx=Store()),
                                    iter=Call(
                                        func=Attribute(
                                            value=Name(id='forks', ctx=Load()),
                                            attr='items',
                                            ctx=Load()),
                                        args=[],
                                        keywords=[]),
                                    body=[
                                        Try(
                                            body=[
                                                Assign(
                                                    targets=[
                                                        Name(id='fork_relative_path', ctx=Store())],
                                                    value=Call(
                                                        func=Attribute(
                                                            value=Name(id='absolute_path', ctx=Load()),
                                                            attr='relative_to',
                                                            ctx=Load()),
                                                        args=[
                                                            Name(id='fork_path', ctx=Load())],
                                                        keywords=[])),
                                                Assign(
                                                    targets=[
                                                        Name(id='fork', ctx=Store())],
                                                    value=Name(id='fork_fork', ctx=Load())),
                                                Break()],
                                            handlers=[
                                                ExceptHandler(
                                                    type=Name(id='ValueError', ctx=Load()),
                                                    body=[
                                                        Expr(
                                                            value=Call(
                                                                func=Attribute(
                                                                    value=Name(id='logging', ctx=Load()),
                                                                    attr='debug',
                                                                    ctx=Load()),
                                                                args=[
                                                                    Constant(value='source `%s` is not part of fork `%s`'),
                                                                    Attribute(
                                                                        value=Name(id='source', ctx=Load()),
                                                                        attr='relative_path',
                                                                        ctx=Load()),
                                                                    Attribute(
                                                                        value=Name(id='fork_fork', ctx=Load()),
                                                                        attr='short_name',
                                                                        ctx=Load())],
                                                                keywords=[
                                                                    keyword(
                                                                        arg='exc_info',
                                                                        value=Constant(value=True))]))])],
                                            orelse=[],
                                            finalbody=[])],
                                    orelse=[
                                        Continue()]),
                                If(
                                    test=Compare(
                                        left=Name(id='fork_relative_path', ctx=Load()),
                                        ops=[
                                            In()],
                                        comparators=[
                                            Subscript(
                                                value=Name(id='by_fork', ctx=Load()),
                                                slice=Name(id='fork', ctx=Load()),
                                                ctx=Load())]),
                                    body=[
                                        Raise(
                                            exc=Call(
                                                func=Name(id='Exception', ctx=Load()),
                                                args=[
                                                    JoinedStr(
                                                        values=[
                                                            Constant(value='two sources claim same path `'),
                                                            FormattedValue(
                                                                value=Name(id='fork_relative_path', ctx=Load()),
                                                                conversion=-1),
                                                            Constant(value='`')])],
                                                keywords=[]))],
                                    orelse=[]),
                                Assign(
                                    targets=[
                                        Subscript(
                                            value=Subscript(
                                                value=Name(id='by_fork', ctx=Load()),
                                                slice=Name(id='fork', ctx=Load()),
                                                ctx=Load()),
                                            slice=Name(id='fork_relative_path', ctx=Load()),
                                            ctx=Store())],
                                    value=Name(id='source', ctx=Load()))],
                            orelse=[]),
                        Assign(
                            targets=[
                                Name(id='diff_count', ctx=Store())],
                            value=Constant(value=0)),
                        For(
                            target=Tuple(
                                elts=[
                                    Name(id='before', ctx=Store()),
                                    Name(id='after', ctx=Store())],
                                ctx=Store()),
                            iter=Call(
                                func=Name(id='pairwise', ctx=Load()),
                                args=[
                                    Attribute(
                                        value=Name(id='self', ctx=Load()),
                                        attr='forks',
                                        ctx=Load())],
                                keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Name(id='paths', ctx=Store())],
                                    value=BinOp(
                                        left=Call(
                                            func=Name(id='set', ctx=Load()),
                                            args=[
                                                Call(
                                                    func=Attribute(
                                                        value=Subscript(
                                                            value=Name(id='by_fork', ctx=Load()),
                                                            slice=Name(id='before', ctx=Load()),
                                                            ctx=Load()),
                                                        attr='keys',
                                                        ctx=Load()),
                                                    args=[],
                                                    keywords=[])],
                                            keywords=[]),
                                        op=BitOr(),
                                        right=Call(
                                            func=Name(id='set', ctx=Load()),
                                            args=[
                                                Call(
                                                    func=Attribute(
                                                        value=Subscript(
                                                            value=Name(id='by_fork', ctx=Load()),
                                                            slice=Name(id='after', ctx=Load()),
                                                            ctx=Load()),
                                                        attr='keys',
                                                        ctx=Load()),
                                                    args=[],
                                                    keywords=[])],
                                            keywords=[]))),
                                For(
                                    target=Name(id='path', ctx=Store()),
                                    iter=Name(id='paths', ctx=Load()),
                                    body=[
                                        AugAssign(
                                            target=Name(id='diff_count', ctx=Store()),
                                            op=Add(),
                                            value=Constant(value=1)),
                                        Assign(
                                            targets=[
                                                Name(id='before_source', ctx=Store())],
                                            value=Call(
                                                func=Attribute(
                                                    value=Subscript(
                                                        value=Name(id='by_fork', ctx=Load()),
                                                        slice=Name(id='before', ctx=Load()),
                                                        ctx=Load()),
                                                    attr='get',
                                                    ctx=Load()),
                                                args=[
                                                    Name(id='path', ctx=Load()),
                                                    Constant(value=None)],
                                                keywords=[])),
                                        Assign(
                                            targets=[
                                                Name(id='after_source', ctx=Store())],
                                            value=Call(
                                                func=Attribute(
                                                    value=Subscript(
                                                        value=Name(id='by_fork', ctx=Load()),
                                                        slice=Name(id='after', ctx=Load()),
                                                        ctx=Load()),
                                                    attr='get',
                                                    ctx=Load()),
                                                args=[
                                                    Name(id='path', ctx=Load()),
                                                    Constant(value=None)],
                                                keywords=[])),
                                        Assert(
                                            test=BoolOp(
                                                op=Or(),
                                                values=[
                                                    Name(id='before_source', ctx=Load()),
                                                    Name(id='after_source', ctx=Load())])),
                                        Assign(
                                            targets=[
                                                Name(id='output_path', ctx=Store())],
                                            value=BinOp(
                                                left=BinOp(
                                                    left=BinOp(
                                                        left=Call(
                                                            func=Name(id='PurePath', ctx=Load()),
                                                            args=[
                                                                Constant(value='diffs')],
                                                            keywords=[]),
                                                        op=Div(),
                                                        right=Attribute(
                                                            value=Name(id='before', ctx=Load()),
                                                            attr='short_name',
                                                            ctx=Load())),
                                                    op=Div(),
                                                    right=Attribute(
                                                        value=Name(id='after', ctx=Load()),
                                                        attr='short_name',
                                                        ctx=Load())),
                                                op=Div(),
                                                right=Name(id='path', ctx=Load()))),
                                        Expr(
                                            value=Yield(
                                                value=Call(
                                                    func=Name(id='DiffSource', ctx=Load()),
                                                    args=[
                                                        Attribute(
                                                            value=Name(id='before', ctx=Load()),
                                                            attr='name',
                                                            ctx=Load()),
                                                        Name(id='before_source', ctx=Load()),
                                                        Attribute(
                                                            value=Name(id='after', ctx=Load()),
                                                            attr='name',
                                                            ctx=Load()),
                                                        Name(id='after_source', ctx=Load()),
                                                        Name(id='output_path', ctx=Load())],
                                                    keywords=[])))],
                                    orelse=[])],
                            orelse=[]),
                        If(
                            test=Compare(
                                left=Constant(value=0),
                                ops=[
                                    Eq()],
                                comparators=[
                                    Name(id='diff_count', ctx=Load())]),
                            body=[
                                Raise(
                                    exc=Call(
                                        func=Name(id='Exception', ctx=Load()),
                                        args=[
                                            Constant(value='no diff pairs found')],
                                        keywords=[]))],
                            orelse=[]),
                        Expr(
                            value=Call(
                                func=Attribute(
                                    value=Name(id='logging', ctx=Load()),
                                    attr='info',
                                    ctx=Load()),
                                args=[
                                    Constant(value='Discovered %s pair(s) of sources to diff'),
                                    Name(id='diff_count', ctx=Load())],
                                keywords=[]))],
                    decorator_list=[],
                    returns=Subscript(
                        value=Name(id='Iterator', ctx=Load()),
                        slice=Name(id='Source', ctx=Load()),
                        ctx=Load()))],
            decorator_list=[]),
        Assign(
            targets=[
                Name(id='S', ctx=Store())],
            value=Call(
                func=Name(id='TypeVar', ctx=Load()),
                args=[
                    Constant(value='S')],
                keywords=[
                    keyword(
                        arg='bound',
                        value=Name(id='Source', ctx=Load()))])),
        ClassDef(
            name='DiffSource',
            bases=[
                Subscript(
                    value=Name(id='Generic', ctx=Load()),
                    slice=Name(id='S', ctx=Load()),
                    ctx=Load()),
                Name(id='Source', ctx=Load()),
                Name(id='Listable', ctx=Load())],
            keywords=[],
            body=[
                Expr(
                    value=Constant(value='\n    A source that represents the difference between two other sources.\n    ')),
                AnnAssign(
                    target=Name(id='before_name', ctx=Store()),
                    annotation=Name(id='str', ctx=Load()),
                    simple=1),
                AnnAssign(
                    target=Name(id='before', ctx=Store()),
                    annotation=Subscript(
                        value=Name(id='Optional', ctx=Load()),
                        slice=Name(id='S', ctx=Load()),
                        ctx=Load()),
                    simple=1),
                AnnAssign(
                    target=Name(id='after_name', ctx=Store()),
                    annotation=Name(id='str', ctx=Load()),
                    simple=1),
                AnnAssign(
                    target=Name(id='after', ctx=Store()),
                    annotation=Subscript(
                        value=Name(id='Optional', ctx=Load()),
                        slice=Name(id='S', ctx=Load()),
                        ctx=Load()),
                    simple=1),
                AnnAssign(
                    target=Name(id='_output_path', ctx=Store()),
                    annotation=Name(id='PurePath', ctx=Load()),
                    simple=1),
                FunctionDef(
                    name='__init__',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self'),
                            arg(
                                arg='before_name',
                                annotation=Name(id='str', ctx=Load())),
                            arg(
                                arg='before',
                                annotation=Subscript(
                                    value=Name(id='Optional', ctx=Load()),
                                    slice=Name(id='S', ctx=Load()),
                                    ctx=Load())),
                            arg(
                                arg='after_name',
                                annotation=Name(id='str', ctx=Load())),
                            arg(
                                arg='after',
                                annotation=Subscript(
                                    value=Name(id='Optional', ctx=Load()),
                                    slice=Name(id='S', ctx=Load()),
                                    ctx=Load())),
                            arg(
                                arg='output_path',
                                annotation=Name(id='PurePath', ctx=Load()))],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='before_name',
                                    ctx=Store())],
                            value=Name(id='before_name', ctx=Load())),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='before',
                                    ctx=Store())],
                            value=Name(id='before', ctx=Load())),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='after_name',
                                    ctx=Store())],
                            value=Name(id='after_name', ctx=Load())),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='after',
                                    ctx=Store())],
                            value=Name(id='after', ctx=Load())),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='_output_path',
                                    ctx=Store())],
                            value=Name(id='output_path', ctx=Load()))],
                    decorator_list=[],
                    returns=Constant(value=None)),
                FunctionDef(
                    name='show_in_listing',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Expr(
                            value=Constant(value='\n        True if this source should appear in directory listings.\n        ')),
                        Return(
                            value=Constant(value=True))],
                    decorator_list=[
                        Name(id='property', ctx=Load())],
                    returns=Name(id='bool', ctx=Load())),
                FunctionDef(
                    name='relative_path',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Expr(
                            value=Constant(value='\n        Path to the Source (if one exists) relative to the project root.\n        ')),
                        Return(
                            value=Constant(value=None))],
                    decorator_list=[
                        Name(id='property', ctx=Load())],
                    returns=Subscript(
                        value=Name(id='Optional', ctx=Load()),
                        slice=Name(id='PurePath', ctx=Load()),
                        ctx=Load())),
                FunctionDef(
                    name='output_path',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Expr(
                            value=Constant(value='\n        Where to write the output from this Source relative to the output path.\n        ')),
                        Return(
                            value=Attribute(
                                value=Name(id='self', ctx=Load()),
                                attr='_output_path',
                                ctx=Load()))],
                    decorator_list=[
                        Name(id='property', ctx=Load())],
                    returns=Name(id='PurePath', ctx=Load()))],
            decorator_list=[]),
        ClassDef(
            name='AfterNode',
            bases=[
                Name(id='Node', ctx=Load())],
            keywords=[],
            body=[
                Expr(
                    value=Constant(value='\n    Represents content that was added in a diff.\n    ')),
                AnnAssign(
                    target=Name(id='child', ctx=Store()),
                    annotation=Name(id='Node', ctx=Load()),
                    simple=1),
                FunctionDef(
                    name='__init__',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self'),
                            arg(
                                arg='child',
                                annotation=Name(id='Node', ctx=Load()))],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='child',
                                    ctx=Store())],
                            value=Name(id='child', ctx=Load()))],
                    decorator_list=[],
                    returns=Constant(value=None)),
                FunctionDef(
                    name='children',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Expr(
                            value=Constant(value='\n        Child nodes belonging to this node.\n        ')),
                        Return(
                            value=Tuple(
                                elts=[
                                    Attribute(
                                        value=Name(id='self', ctx=Load()),
                                        attr='child',
                                        ctx=Load())],
                                ctx=Load()))],
                    decorator_list=[
                        Name(id='property', ctx=Load())],
                    returns=Subscript(
                        value=Name(id='Tuple', ctx=Load()),
                        slice=Name(id='Node', ctx=Load()),
                        ctx=Load())),
                FunctionDef(
                    name='replace_child',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self'),
                            arg(
                                arg='old',
                                annotation=Name(id='Node', ctx=Load())),
                            arg(
                                arg='new',
                                annotation=Name(id='Node', ctx=Load()))],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Expr(
                            value=Constant(value='\n        Replace the old node with the given new node.\n        ')),
                        If(
                            test=Compare(
                                left=Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='child',
                                    ctx=Load()),
                                ops=[
                                    Eq()],
                                comparators=[
                                    Name(id='old', ctx=Load())]),
                            body=[
                                Assign(
                                    targets=[
                                        Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='child',
                                            ctx=Store())],
                                    value=Name(id='new', ctx=Load()))],
                            orelse=[])],
                    decorator_list=[],
                    returns=Constant(value=None)),
                FunctionDef(
                    name='__repr__',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Expr(
                            value=Constant(value='\n        String representation of this node.\n        ')),
                        Return(
                            value=Constant(value='<after>'))],
                    decorator_list=[],
                    returns=Name(id='str', ctx=Load()))],
            decorator_list=[]),
        ClassDef(
            name='BeforeNode',
            bases=[
                Name(id='Node', ctx=Load())],
            keywords=[],
            body=[
                Expr(
                    value=Constant(value='\n    Represents content that was removed in a diff.\n    ')),
                AnnAssign(
                    target=Name(id='child', ctx=Store()),
                    annotation=Name(id='Node', ctx=Load()),
                    simple=1),
                FunctionDef(
                    name='__init__',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self'),
                            arg(
                                arg='child',
                                annotation=Name(id='Node', ctx=Load()))],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='child',
                                    ctx=Store())],
                            value=Name(id='child', ctx=Load()))],
                    decorator_list=[],
                    returns=Constant(value=None)),
                FunctionDef(
                    name='children',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Expr(
                            value=Constant(value='\n        Child nodes belonging to this node.\n        ')),
                        Return(
                            value=Tuple(
                                elts=[
                                    Attribute(
                                        value=Name(id='self', ctx=Load()),
                                        attr='child',
                                        ctx=Load())],
                                ctx=Load()))],
                    decorator_list=[
                        Name(id='property', ctx=Load())],
                    returns=Subscript(
                        value=Name(id='Tuple', ctx=Load()),
                        slice=Name(id='Node', ctx=Load()),
                        ctx=Load())),
                FunctionDef(
                    name='replace_child',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self'),
                            arg(
                                arg='old',
                                annotation=Name(id='Node', ctx=Load())),
                            arg(
                                arg='new',
                                annotation=Name(id='Node', ctx=Load()))],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Expr(
                            value=Constant(value='\n        Replace the old node with the given new node.\n        ')),
                        If(
                            test=Compare(
                                left=Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='child',
                                    ctx=Load()),
                                ops=[
                                    Eq()],
                                comparators=[
                                    Name(id='old', ctx=Load())]),
                            body=[
                                Assign(
                                    targets=[
                                        Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='child',
                                            ctx=Store())],
                                    value=Name(id='new', ctx=Load()))],
                            orelse=[])],
                    decorator_list=[],
                    returns=Constant(value=None)),
                FunctionDef(
                    name='__repr__',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Expr(
                            value=Constant(value='\n        String representation of this node.\n        ')),
                        Return(
                            value=Constant(value='<before>'))],
                    decorator_list=[],
                    returns=Name(id='str', ctx=Load()))],
            decorator_list=[]),
        ClassDef(
            name='DiffNode',
            bases=[
                Name(id='Node', ctx=Load())],
            keywords=[],
            body=[
                Expr(
                    value=Constant(value='\n    Marks a difference (or patch) with a deletion and an insertion.\n    ')),
                AnnAssign(
                    target=Name(id='before_name', ctx=Store()),
                    annotation=Name(id='str', ctx=Load()),
                    simple=1),
                AnnAssign(
                    target=Name(id='before', ctx=Store()),
                    annotation=Name(id='Node', ctx=Load()),
                    simple=1),
                AnnAssign(
                    target=Name(id='after_name', ctx=Store()),
                    annotation=Name(id='str', ctx=Load()),
                    simple=1),
                AnnAssign(
                    target=Name(id='after', ctx=Store()),
                    annotation=Name(id='Node', ctx=Load()),
                    simple=1),
                FunctionDef(
                    name='__init__',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self'),
                            arg(
                                arg='before_name',
                                annotation=Name(id='str', ctx=Load())),
                            arg(
                                arg='before',
                                annotation=Name(id='Node', ctx=Load())),
                            arg(
                                arg='after_name',
                                annotation=Name(id='str', ctx=Load())),
                            arg(
                                arg='after',
                                annotation=Name(id='Node', ctx=Load()))],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='before_name',
                                    ctx=Store())],
                            value=Name(id='before_name', ctx=Load())),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='before',
                                    ctx=Store())],
                            value=Name(id='before', ctx=Load())),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='after_name',
                                    ctx=Store())],
                            value=Name(id='after_name', ctx=Load())),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='after',
                                    ctx=Store())],
                            value=Name(id='after', ctx=Load()))],
                    decorator_list=[],
                    returns=Constant(value=None)),
                FunctionDef(
                    name='children',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Expr(
                            value=Constant(value='\n        Child nodes belonging to this node.\n        ')),
                        Return(
                            value=Tuple(
                                elts=[
                                    Attribute(
                                        value=Name(id='self', ctx=Load()),
                                        attr='before',
                                        ctx=Load()),
                                    Attribute(
                                        value=Name(id='self', ctx=Load()),
                                        attr='after',
                                        ctx=Load())],
                                ctx=Load()))],
                    decorator_list=[
                        Name(id='property', ctx=Load())],
                    returns=Subscript(
                        value=Name(id='Tuple', ctx=Load()),
                        slice=Tuple(
                            elts=[
                                Name(id='Node', ctx=Load()),
                                Name(id='Node', ctx=Load())],
                            ctx=Load()),
                        ctx=Load())),
                FunctionDef(
                    name='replace_child',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self'),
                            arg(
                                arg='old',
                                annotation=Name(id='Node', ctx=Load())),
                            arg(
                                arg='new',
                                annotation=Name(id='Node', ctx=Load()))],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Expr(
                            value=Constant(value='\n        Replace the old node with the given new node.\n        ')),
                        If(
                            test=Compare(
                                left=Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='before',
                                    ctx=Load()),
                                ops=[
                                    Eq()],
                                comparators=[
                                    Name(id='old', ctx=Load())]),
                            body=[
                                Assign(
                                    targets=[
                                        Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='before',
                                            ctx=Store())],
                                    value=Name(id='new', ctx=Load()))],
                            orelse=[]),
                        If(
                            test=Compare(
                                left=Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='after',
                                    ctx=Load()),
                                ops=[
                                    Eq()],
                                comparators=[
                                    Name(id='old', ctx=Load())]),
                            body=[
                                Assign(
                                    targets=[
                                        Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='after',
                                            ctx=Store())],
                                    value=Name(id='new', ctx=Load()))],
                            orelse=[])],
                    decorator_list=[],
                    returns=Constant(value=None)),
                FunctionDef(
                    name='__repr__',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Expr(
                            value=Constant(value='\n        String representation of this object.\n        ')),
                        Return(
                            value=JoinedStr(
                                values=[
                                    FormattedValue(
                                        value=Attribute(
                                            value=Attribute(
                                                value=Name(id='self', ctx=Load()),
                                                attr='__class__',
                                                ctx=Load()),
                                            attr='__name__',
                                            ctx=Load()),
                                        conversion=-1),
                                    Constant(value='(..., before_name='),
                                    FormattedValue(
                                        value=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='before_name',
                                            ctx=Load()),
                                        conversion=114),
                                    Constant(value=', after_name='),
                                    FormattedValue(
                                        value=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='after_name',
                                            ctx=Load()),
                                        conversion=114),
                                    Constant(value=')')]))],
                    decorator_list=[],
                    returns=Name(id='str', ctx=Load()))],
            decorator_list=[]),
        ClassDef(
            name='EthereumBuilder',
            bases=[
                Name(id='PythonBuilder', ctx=Load())],
            keywords=[],
            body=[
                Expr(
                    value=Constant(value='\n    A `PythonBuilder` that additionally builds `Document`s from `DiffSource`s.\n    ')),
                FunctionDef(
                    name='build',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self'),
                            arg(
                                arg='unprocessed',
                                annotation=Subscript(
                                    value=Name(id='Set', ctx=Load()),
                                    slice=Name(id='Source', ctx=Load()),
                                    ctx=Load())),
                            arg(
                                arg='processed',
                                annotation=Subscript(
                                    value=Name(id='Dict', ctx=Load()),
                                    slice=Tuple(
                                        elts=[
                                            Name(id='Source', ctx=Load()),
                                            Name(id='Document', ctx=Load())],
                                        ctx=Load()),
                                    ctx=Load()))],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Expr(
                            value=Constant(value='\n        Consume unprocessed Sources and insert their Documents into processed.\n        ')),
                        Expr(
                            value=Call(
                                func=Attribute(
                                    value=Call(
                                        func=Name(id='super', ctx=Load()),
                                        args=[],
                                        keywords=[]),
                                    attr='build',
                                    ctx=Load()),
                                args=[
                                    Name(id='unprocessed', ctx=Load()),
                                    Name(id='processed', ctx=Load())],
                                keywords=[])),
                        Assign(
                            targets=[
                                Name(id='source_set', ctx=Store())],
                            value=Call(
                                func=Name(id='set', ctx=Load()),
                                args=[
                                    GeneratorExp(
                                        elt=Name(id='s', ctx=Load()),
                                        generators=[
                                            comprehension(
                                                target=Name(id='s', ctx=Store()),
                                                iter=Name(id='unprocessed', ctx=Load()),
                                                ifs=[
                                                    Call(
                                                        func=Name(id='isinstance', ctx=Load()),
                                                        args=[
                                                            Name(id='s', ctx=Load()),
                                                            Name(id='DiffSource', ctx=Load())],
                                                        keywords=[])],
                                                is_async=0)])],
                                keywords=[])),
                        AugAssign(
                            target=Name(id='unprocessed', ctx=Store()),
                            op=Sub(),
                            value=Name(id='source_set', ctx=Load())),
                        Assign(
                            targets=[
                                Name(id='before_unprocessed', ctx=Store())],
                            value=SetComp(
                                elt=Attribute(
                                    value=Name(id='s', ctx=Load()),
                                    attr='before',
                                    ctx=Load()),
                                generators=[
                                    comprehension(
                                        target=Name(id='s', ctx=Store()),
                                        iter=Name(id='source_set', ctx=Load()),
                                        ifs=[
                                            Attribute(
                                                value=Name(id='s', ctx=Load()),
                                                attr='before',
                                                ctx=Load())],
                                        is_async=0)])),
                        Assign(
                            targets=[
                                Name(id='after_unprocessed', ctx=Store())],
                            value=SetComp(
                                elt=Attribute(
                                    value=Name(id='s', ctx=Load()),
                                    attr='after',
                                    ctx=Load()),
                                generators=[
                                    comprehension(
                                        target=Name(id='s', ctx=Store()),
                                        iter=Name(id='source_set', ctx=Load()),
                                        ifs=[
                                            Attribute(
                                                value=Name(id='s', ctx=Load()),
                                                attr='after',
                                                ctx=Load())],
                                        is_async=0)])),
                        AnnAssign(
                            target=Name(id='before_processed', ctx=Store()),
                            annotation=Subscript(
                                value=Name(id='Dict', ctx=Load()),
                                slice=Tuple(
                                    elts=[
                                        Name(id='Source', ctx=Load()),
                                        Name(id='Document', ctx=Load())],
                                    ctx=Load()),
                                ctx=Load()),
                            value=Call(
                                func=Name(id='dict', ctx=Load()),
                                args=[],
                                keywords=[]),
                            simple=1),
                        AnnAssign(
                            target=Name(id='after_processed', ctx=Store()),
                            annotation=Subscript(
                                value=Name(id='Dict', ctx=Load()),
                                slice=Tuple(
                                    elts=[
                                        Name(id='Source', ctx=Load()),
                                        Name(id='Document', ctx=Load())],
                                    ctx=Load()),
                                ctx=Load()),
                            value=Call(
                                func=Name(id='dict', ctx=Load()),
                                args=[],
                                keywords=[]),
                            simple=1),
                        Expr(
                            value=Call(
                                func=Attribute(
                                    value=Call(
                                        func=Name(id='super', ctx=Load()),
                                        args=[],
                                        keywords=[]),
                                    attr='build',
                                    ctx=Load()),
                                args=[
                                    Name(id='before_unprocessed', ctx=Load()),
                                    Name(id='before_processed', ctx=Load())],
                                keywords=[])),
                        Expr(
                            value=Call(
                                func=Attribute(
                                    value=Call(
                                        func=Name(id='super', ctx=Load()),
                                        args=[],
                                        keywords=[]),
                                    attr='build',
                                    ctx=Load()),
                                args=[
                                    Name(id='after_unprocessed', ctx=Load()),
                                    Name(id='after_processed', ctx=Load())],
                                keywords=[])),
                        For(
                            target=Name(id='diff_source', ctx=Store()),
                            iter=Name(id='source_set', ctx=Load()),
                            body=[
                                AnnAssign(
                                    target=Name(id='before', ctx=Store()),
                                    annotation=Name(id='Node', ctx=Load()),
                                    value=Call(
                                        func=Name(id='BlankNode', ctx=Load()),
                                        args=[],
                                        keywords=[]),
                                    simple=1),
                                If(
                                    test=Attribute(
                                        value=Name(id='diff_source', ctx=Load()),
                                        attr='before',
                                        ctx=Load()),
                                    body=[
                                        Assign(
                                            targets=[
                                                Name(id='before_document', ctx=Store())],
                                            value=Subscript(
                                                value=Name(id='before_processed', ctx=Load()),
                                                slice=Attribute(
                                                    value=Name(id='diff_source', ctx=Load()),
                                                    attr='before',
                                                    ctx=Load()),
                                                ctx=Load())),
                                        Delete(
                                            targets=[
                                                Subscript(
                                                    value=Name(id='before_processed', ctx=Load()),
                                                    slice=Attribute(
                                                        value=Name(id='diff_source', ctx=Load()),
                                                        attr='before',
                                                        ctx=Load()),
                                                    ctx=Del())]),
                                        Assign(
                                            targets=[
                                                Name(id='before', ctx=Store())],
                                            value=Call(
                                                func=Name(id='BeforeNode', ctx=Load()),
                                                args=[
                                                    Attribute(
                                                        value=Name(id='before_document', ctx=Load()),
                                                        attr='root',
                                                        ctx=Load())],
                                                keywords=[]))],
                                    orelse=[]),
                                AnnAssign(
                                    target=Name(id='after', ctx=Store()),
                                    annotation=Name(id='Node', ctx=Load()),
                                    value=Call(
                                        func=Name(id='BlankNode', ctx=Load()),
                                        args=[],
                                        keywords=[]),
                                    simple=1),
                                If(
                                    test=Attribute(
                                        value=Name(id='diff_source', ctx=Load()),
                                        attr='after',
                                        ctx=Load()),
                                    body=[
                                        Assign(
                                            targets=[
                                                Name(id='after_document', ctx=Store())],
                                            value=Subscript(
                                                value=Name(id='after_processed', ctx=Load()),
                                                slice=Attribute(
                                                    value=Name(id='diff_source', ctx=Load()),
                                                    attr='after',
                                                    ctx=Load()),
                                                ctx=Load())),
                                        Delete(
                                            targets=[
                                                Subscript(
                                                    value=Name(id='after_processed', ctx=Load()),
                                                    slice=Attribute(
                                                        value=Name(id='diff_source', ctx=Load()),
                                                        attr='after',
                                                        ctx=Load()),
                                                    ctx=Del())]),
                                        Assign(
                                            targets=[
                                                Name(id='after', ctx=Store())],
                                            value=Call(
                                                func=Name(id='AfterNode', ctx=Load()),
                                                args=[
                                                    Attribute(
                                                        value=Name(id='after_document', ctx=Load()),
                                                        attr='root',
                                                        ctx=Load())],
                                                keywords=[]))],
                                    orelse=[]),
                                Assign(
                                    targets=[
                                        Name(id='root', ctx=Store())],
                                    value=Call(
                                        func=Name(id='DiffNode', ctx=Load()),
                                        args=[
                                            Attribute(
                                                value=Name(id='diff_source', ctx=Load()),
                                                attr='before_name',
                                                ctx=Load()),
                                            Name(id='before', ctx=Load()),
                                            Attribute(
                                                value=Name(id='diff_source', ctx=Load()),
                                                attr='after_name',
                                                ctx=Load()),
                                            Name(id='after', ctx=Load())],
                                        keywords=[])),
                                Assign(
                                    targets=[
                                        Name(id='document', ctx=Store())],
                                    value=Call(
                                        func=Name(id='Document', ctx=Load()),
                                        args=[
                                            Name(id='root', ctx=Load())],
                                        keywords=[])),
                                Assign(
                                    targets=[
                                        Subscript(
                                            value=Name(id='processed', ctx=Load()),
                                            slice=Name(id='diff_source', ctx=Load()),
                                            ctx=Store())],
                                    value=Name(id='document', ctx=Load()))],
                            orelse=[])],
                    decorator_list=[],
                    returns=Constant(value=None))],
            decorator_list=[]),
        ClassDef(
            name='FixIndexTransform',
            bases=[
                Name(id='Transform', ctx=Load())],
            keywords=[],
            body=[
                Expr(
                    value=Constant(value='\n    Replaces `Definition` and `Reference` identifiers within `DiffNode` with\n    identifiers specific to the diff.\n\n    Without fixing these identifiers, every Python class would be defined\n    multiples times (the actual definition and then again in each diff),\n    cluttering up tables of contents.\n    ')),
                FunctionDef(
                    name='__init__',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self'),
                            arg(
                                arg='settings',
                                annotation=Name(id='PluginSettings', ctx=Load()))],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Pass()],
                    decorator_list=[],
                    returns=Constant(value=None)),
                FunctionDef(
                    name='transform',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self'),
                            arg(
                                arg='context',
                                annotation=Name(id='Context', ctx=Load()))],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Expr(
                            value=Constant(value='\n        Apply the transformation to the given document.\n        ')),
                        Expr(
                            value=Call(
                                func=Attribute(
                                    value=Attribute(
                                        value=Subscript(
                                            value=Name(id='context', ctx=Load()),
                                            slice=Name(id='Document', ctx=Load()),
                                            ctx=Load()),
                                        attr='root',
                                        ctx=Load()),
                                    attr='visit',
                                    ctx=Load()),
                                args=[
                                    Call(
                                        func=Name(id='_FixIndexVisitor', ctx=Load()),
                                        args=[],
                                        keywords=[])],
                                keywords=[]))],
                    decorator_list=[],
                    returns=Constant(value=None))],
            decorator_list=[]),
        ClassDef(
            name='_FixIndexVisitor',
            bases=[
                Name(id='Visitor', ctx=Load())],
            keywords=[],
            body=[
                AnnAssign(
                    target=Name(id='diffs', ctx=Store()),
                    annotation=Subscript(
                        value=Name(id='Final', ctx=Load()),
                        slice=Subscript(
                            value=Name(id='List', ctx=Load()),
                            slice=Name(id='DiffNode', ctx=Load()),
                            ctx=Load()),
                        ctx=Load()),
                    simple=1),
                FunctionDef(
                    name='__init__',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='diffs',
                                    ctx=Store())],
                            value=List(elts=[], ctx=Load()))],
                    decorator_list=[],
                    returns=Constant(value=None)),
                FunctionDef(
                    name='enter',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self'),
                            arg(
                                arg='node',
                                annotation=Name(id='Node', ctx=Load()))],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        If(
                            test=Call(
                                func=Name(id='isinstance', ctx=Load()),
                                args=[
                                    Name(id='node', ctx=Load()),
                                    Name(id='DiffNode', ctx=Load())],
                                keywords=[]),
                            body=[
                                Expr(
                                    value=Call(
                                        func=Attribute(
                                            value=Attribute(
                                                value=Name(id='self', ctx=Load()),
                                                attr='diffs',
                                                ctx=Load()),
                                            attr='append',
                                            ctx=Load()),
                                        args=[
                                            Name(id='node', ctx=Load())],
                                        keywords=[])),
                                Return(
                                    value=Attribute(
                                        value=Name(id='Visit', ctx=Load()),
                                        attr='TraverseChildren',
                                        ctx=Load()))],
                            orelse=[]),
                        If(
                            test=UnaryOp(
                                op=Not(),
                                operand=Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='diffs',
                                    ctx=Load())),
                            body=[
                                Return(
                                    value=Attribute(
                                        value=Name(id='Visit', ctx=Load()),
                                        attr='TraverseChildren',
                                        ctx=Load()))],
                            orelse=[]),
                        Assign(
                            targets=[
                                Name(id='diff', ctx=Store())],
                            value=Subscript(
                                value=Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='diffs',
                                    ctx=Load()),
                                slice=UnaryOp(
                                    op=USub(),
                                    operand=Constant(value=1)),
                                ctx=Load())),
                        Assign(
                            targets=[
                                Name(id='before', ctx=Store())],
                            value=Attribute(
                                value=Name(id='diff', ctx=Load()),
                                attr='before_name',
                                ctx=Load())),
                        Assign(
                            targets=[
                                Name(id='after', ctx=Store())],
                            value=Attribute(
                                value=Name(id='diff', ctx=Load()),
                                attr='after_name',
                                ctx=Load())),
                        Assign(
                            targets=[
                                Name(id='before_prefix', ctx=Store())],
                            value=JoinedStr(
                                values=[
                                    FormattedValue(
                                        value=Name(id='before', ctx=Load()),
                                        conversion=-1),
                                    Constant(value='.')])),
                        Assign(
                            targets=[
                                Name(id='after_prefix', ctx=Store())],
                            value=JoinedStr(
                                values=[
                                    FormattedValue(
                                        value=Name(id='after', ctx=Load()),
                                        conversion=-1),
                                    Constant(value='.')])),
                        If(
                            test=Call(
                                func=Name(id='isinstance', ctx=Load()),
                                args=[
                                    Name(id='node', ctx=Load()),
                                    Tuple(
                                        elts=[
                                            Name(id='Reference', ctx=Load()),
                                            Name(id='Definition', ctx=Load())],
                                        ctx=Load())],
                                keywords=[]),
                            body=[
                                AnnAssign(
                                    target=Name(id='identifier', ctx=Store()),
                                    annotation=Subscript(
                                        value=Name(id='Optional', ctx=Load()),
                                        slice=Name(id='str', ctx=Load()),
                                        ctx=Load()),
                                    value=Constant(value=None),
                                    simple=1),
                                If(
                                    test=Call(
                                        func=Attribute(
                                            value=Attribute(
                                                value=Name(id='node', ctx=Load()),
                                                attr='identifier',
                                                ctx=Load()),
                                            attr='startswith',
                                            ctx=Load()),
                                        args=[
                                            Name(id='before_prefix', ctx=Load())],
                                        keywords=[]),
                                    body=[
                                        Assign(
                                            targets=[
                                                Name(id='identifier', ctx=Store())],
                                            value=Call(
                                                func=Attribute(
                                                    value=Attribute(
                                                        value=Name(id='node', ctx=Load()),
                                                        attr='identifier',
                                                        ctx=Load()),
                                                    attr='removeprefix',
                                                    ctx=Load()),
                                                args=[
                                                    Name(id='before_prefix', ctx=Load())],
                                                keywords=[]))],
                                    orelse=[
                                        If(
                                            test=Call(
                                                func=Attribute(
                                                    value=Attribute(
                                                        value=Name(id='node', ctx=Load()),
                                                        attr='identifier',
                                                        ctx=Load()),
                                                    attr='startswith',
                                                    ctx=Load()),
                                                args=[
                                                    Name(id='after_prefix', ctx=Load())],
                                                keywords=[]),
                                            body=[
                                                Assign(
                                                    targets=[
                                                        Name(id='identifier', ctx=Store())],
                                                    value=Call(
                                                        func=Attribute(
                                                            value=Attribute(
                                                                value=Name(id='node', ctx=Load()),
                                                                attr='identifier',
                                                                ctx=Load()),
                                                            attr='removeprefix',
                                                            ctx=Load()),
                                                        args=[
                                                            Name(id='after_prefix', ctx=Load())],
                                                        keywords=[]))],
                                            orelse=[])]),
                                If(
                                    test=Compare(
                                        left=Name(id='identifier', ctx=Load()),
                                        ops=[
                                            IsNot()],
                                        comparators=[
                                            Constant(value=None)]),
                                    body=[
                                        Assign(
                                            targets=[
                                                Attribute(
                                                    value=Name(id='node', ctx=Load()),
                                                    attr='identifier',
                                                    ctx=Store())],
                                            value=JoinedStr(
                                                values=[
                                                    Constant(value='diff('),
                                                    FormattedValue(
                                                        value=Name(id='before', ctx=Load()),
                                                        conversion=-1),
                                                    Constant(value=','),
                                                    FormattedValue(
                                                        value=Name(id='after', ctx=Load()),
                                                        conversion=-1),
                                                    Constant(value=').'),
                                                    FormattedValue(
                                                        value=Name(id='identifier', ctx=Load()),
                                                        conversion=-1)]))],
                                    orelse=[])],
                            orelse=[
                                If(
                                    test=BoolOp(
                                        op=And(),
                                        values=[
                                            Call(
                                                func=Name(id='isinstance', ctx=Load()),
                                                args=[
                                                    Name(id='node', ctx=Load()),
                                                    Attribute(
                                                        value=Name(id='python', ctx=Load()),
                                                        attr='Name',
                                                        ctx=Load())],
                                                keywords=[]),
                                            Attribute(
                                                value=Name(id='node', ctx=Load()),
                                                attr='full_name',
                                                ctx=Load())]),
                                    body=[
                                        If(
                                            test=Attribute(
                                                value=Name(id='node', ctx=Load()),
                                                attr='full_name',
                                                ctx=Load()),
                                            body=[
                                                AnnAssign(
                                                    target=Name(id='full_name', ctx=Store()),
                                                    annotation=Subscript(
                                                        value=Name(id='Optional', ctx=Load()),
                                                        slice=Name(id='str', ctx=Load()),
                                                        ctx=Load()),
                                                    value=Constant(value=None),
                                                    simple=1),
                                                If(
                                                    test=Call(
                                                        func=Attribute(
                                                            value=Attribute(
                                                                value=Name(id='node', ctx=Load()),
                                                                attr='full_name',
                                                                ctx=Load()),
                                                            attr='startswith',
                                                            ctx=Load()),
                                                        args=[
                                                            Name(id='before_prefix', ctx=Load())],
                                                        keywords=[]),
                                                    body=[
                                                        Assign(
                                                            targets=[
                                                                Name(id='full_name', ctx=Store())],
                                                            value=Call(
                                                                func=Attribute(
                                                                    value=Attribute(
                                                                        value=Name(id='node', ctx=Load()),
                                                                        attr='full_name',
                                                                        ctx=Load()),
                                                                    attr='removeprefix',
                                                                    ctx=Load()),
                                                                args=[
                                                                    Name(id='before_prefix', ctx=Load())],
                                                                keywords=[]))],
                                                    orelse=[
                                                        If(
                                                            test=Call(
                                                                func=Attribute(
                                                                    value=Attribute(
                                                                        value=Name(id='node', ctx=Load()),
                                                                        attr='full_name',
                                                                        ctx=Load()),
                                                                    attr='startswith',
                                                                    ctx=Load()),
                                                                args=[
                                                                    Name(id='after_prefix', ctx=Load())],
                                                                keywords=[]),
                                                            body=[
                                                                Assign(
                                                                    targets=[
                                                                        Name(id='full_name', ctx=Store())],
                                                                    value=Call(
                                                                        func=Attribute(
                                                                            value=Attribute(
                                                                                value=Name(id='node', ctx=Load()),
                                                                                attr='full_name',
                                                                                ctx=Load()),
                                                                            attr='removeprefix',
                                                                            ctx=Load()),
                                                                        args=[
                                                                            Name(id='after_prefix', ctx=Load())],
                                                                        keywords=[]))],
                                                            orelse=[])]),
                                                If(
                                                    test=Compare(
                                                        left=Name(id='full_name', ctx=Load()),
                                                        ops=[
                                                            IsNot()],
                                                        comparators=[
                                                            Constant(value=None)]),
                                                    body=[
                                                        Assign(
                                                            targets=[
                                                                Attribute(
                                                                    value=Name(id='node', ctx=Load()),
                                                                    attr='full_name',
                                                                    ctx=Store())],
                                                            value=JoinedStr(
                                                                values=[
                                                                    Constant(value='diff('),
                                                                    FormattedValue(
                                                                        value=Name(id='before', ctx=Load()),
                                                                        conversion=-1),
                                                                    Constant(value=','),
                                                                    FormattedValue(
                                                                        value=Name(id='after', ctx=Load()),
                                                                        conversion=-1),
                                                                    Constant(value=').'),
                                                                    FormattedValue(
                                                                        value=Name(id='full_name', ctx=Load()),
                                                                        conversion=-1)]))],
                                                    orelse=[])],
                                            orelse=[])],
                                    orelse=[])]),
                        Return(
                            value=Attribute(
                                value=Name(id='Visit', ctx=Load()),
                                attr='TraverseChildren',
                                ctx=Load()))],
                    decorator_list=[],
                    returns=Name(id='Visit', ctx=Load())),
                FunctionDef(
                    name='exit',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self'),
                            arg(
                                arg='node',
                                annotation=Name(id='Node', ctx=Load()))],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        If(
                            test=Call(
                                func=Name(id='isinstance', ctx=Load()),
                                args=[
                                    Name(id='node', ctx=Load()),
                                    Name(id='DiffNode', ctx=Load())],
                                keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Name(id='popped', ctx=Store())],
                                    value=Call(
                                        func=Attribute(
                                            value=Attribute(
                                                value=Name(id='self', ctx=Load()),
                                                attr='diffs',
                                                ctx=Load()),
                                            attr='pop',
                                            ctx=Load()),
                                        args=[],
                                        keywords=[])),
                                Assert(
                                    test=Compare(
                                        left=Name(id='popped', ctx=Load()),
                                        ops=[
                                            Eq()],
                                        comparators=[
                                            Name(id='node', ctx=Load())]))],
                            orelse=[])],
                    decorator_list=[],
                    returns=Constant(value=None))],
            decorator_list=[]),
        ClassDef(
            name='_DoccAdapter',
            bases=[
                Subscript(
                    value=Name(id='Adapter', ctx=Load()),
                    slice=Name(id='Node', ctx=Load()),
                    ctx=Load())],
            keywords=[],
            body=[
                FunctionDef(
                    name='children',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self'),
                            arg(
                                arg='node',
                                annotation=Name(id='Node', ctx=Load()))],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Return(
                            value=Call(
                                func=Name(id='list', ctx=Load()),
                                args=[
                                    Attribute(
                                        value=Name(id='node', ctx=Load()),
                                        attr='children',
                                        ctx=Load())],
                                keywords=[]))],
                    decorator_list=[],
                    returns=Subscript(
                        value=Name(id='Sequence', ctx=Load()),
                        slice=Name(id='Node', ctx=Load()),
                        ctx=Load())),
                FunctionDef(
                    name='_markdown_equals',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self'),
                            arg(
                                arg='lhs_node',
                                annotation=Attribute(
                                    value=Name(id='mistletoe', ctx=Load()),
                                    attr='MarkdownNode',
                                    ctx=Load())),
                            arg(
                                arg='rhs_node',
                                annotation=Attribute(
                                    value=Name(id='mistletoe', ctx=Load()),
                                    attr='MarkdownNode',
                                    ctx=Load()))],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Assign(
                            targets=[
                                Name(id='lhs', ctx=Store())],
                            value=Attribute(
                                value=Name(id='lhs_node', ctx=Load()),
                                attr='token',
                                ctx=Load())),
                        Assign(
                            targets=[
                                Name(id='rhs', ctx=Store())],
                            value=Attribute(
                                value=Name(id='rhs_node', ctx=Load()),
                                attr='token',
                                ctx=Load())),
                        If(
                            test=BoolOp(
                                op=Or(),
                                values=[
                                    UnaryOp(
                                        op=Not(),
                                        operand=Call(
                                            func=Name(id='isinstance', ctx=Load()),
                                            args=[
                                                Name(id='rhs', ctx=Load()),
                                                Call(
                                                    func=Name(id='type', ctx=Load()),
                                                    args=[
                                                        Name(id='lhs', ctx=Load())],
                                                    keywords=[])],
                                            keywords=[])),
                                    UnaryOp(
                                        op=Not(),
                                        operand=Call(
                                            func=Name(id='isinstance', ctx=Load()),
                                            args=[
                                                Name(id='lhs', ctx=Load()),
                                                Call(
                                                    func=Name(id='type', ctx=Load()),
                                                    args=[
                                                        Name(id='rhs', ctx=Load())],
                                                    keywords=[])],
                                            keywords=[]))]),
                            body=[
                                Return(
                                    value=Constant(value=False))],
                            orelse=[]),
                        Match(
                            subject=Call(
                                func=Name(id='type', ctx=Load()),
                                args=[
                                    Name(id='lhs', ctx=Load())],
                                keywords=[]),
                            cases=[
                                match_case(
                                    pattern=MatchOr(
                                        patterns=[
                                            MatchValue(
                                                value=Attribute(
                                                    value=Name(id='spans', ctx=Load()),
                                                    attr='Strong',
                                                    ctx=Load())),
                                            MatchValue(
                                                value=Attribute(
                                                    value=Name(id='spans', ctx=Load()),
                                                    attr='Emphasis',
                                                    ctx=Load())),
                                            MatchValue(
                                                value=Attribute(
                                                    value=Name(id='spans', ctx=Load()),
                                                    attr='InlineCode',
                                                    ctx=Load())),
                                            MatchValue(
                                                value=Attribute(
                                                    value=Name(id='spans', ctx=Load()),
                                                    attr='Strikethrough',
                                                    ctx=Load())),
                                            MatchValue(
                                                value=Attribute(
                                                    value=Name(id='spans', ctx=Load()),
                                                    attr='EscapeSequence',
                                                    ctx=Load())),
                                            MatchValue(
                                                value=Attribute(
                                                    value=Name(id='blocks', ctx=Load()),
                                                    attr='Quote',
                                                    ctx=Load())),
                                            MatchValue(
                                                value=Attribute(
                                                    value=Name(id='blocks', ctx=Load()),
                                                    attr='Paragraph',
                                                    ctx=Load())),
                                            MatchValue(
                                                value=Attribute(
                                                    value=Name(id='blocks', ctx=Load()),
                                                    attr='ThematicBreak',
                                                    ctx=Load())),
                                            MatchValue(
                                                value=Attribute(
                                                    value=Name(id='blocks', ctx=Load()),
                                                    attr='HTMLBlock',
                                                    ctx=Load())),
                                            MatchValue(
                                                value=Attribute(
                                                    value=Name(id='spans', ctx=Load()),
                                                    attr='AutoLink',
                                                    ctx=Load()))]),
                                    body=[
                                        Return(
                                            value=Constant(value=True))]),
                                match_case(
                                    pattern=MatchOr(
                                        patterns=[
                                            MatchValue(
                                                value=Attribute(
                                                    value=Name(id='spans', ctx=Load()),
                                                    attr='RawText',
                                                    ctx=Load())),
                                            MatchValue(
                                                value=Attribute(
                                                    value=Name(id='spans', ctx=Load()),
                                                    attr='HTMLSpan',
                                                    ctx=Load()))]),
                                    body=[
                                        Return(
                                            value=Compare(
                                                left=Attribute(
                                                    value=Name(id='lhs', ctx=Load()),
                                                    attr='content',
                                                    ctx=Load()),
                                                ops=[
                                                    Eq()],
                                                comparators=[
                                                    Attribute(
                                                        value=Name(id='rhs', ctx=Load()),
                                                        attr='content',
                                                        ctx=Load())]))]),
                                match_case(
                                    pattern=MatchValue(
                                        value=Attribute(
                                            value=Name(id='spans', ctx=Load()),
                                            attr='Image',
                                            ctx=Load())),
                                    body=[
                                        Return(
                                            value=BoolOp(
                                                op=And(),
                                                values=[
                                                    Compare(
                                                        left=Attribute(
                                                            value=Name(id='lhs', ctx=Load()),
                                                            attr='src',
                                                            ctx=Load()),
                                                        ops=[
                                                            Eq()],
                                                        comparators=[
                                                            Attribute(
                                                                value=Name(id='rhs', ctx=Load()),
                                                                attr='src',
                                                                ctx=Load())]),
                                                    Compare(
                                                        left=Attribute(
                                                            value=Name(id='lhs', ctx=Load()),
                                                            attr='title',
                                                            ctx=Load()),
                                                        ops=[
                                                            Eq()],
                                                        comparators=[
                                                            Attribute(
                                                                value=Name(id='rhs', ctx=Load()),
                                                                attr='title',
                                                                ctx=Load())]),
                                                    Compare(
                                                        left=Attribute(
                                                            value=Name(id='lhs', ctx=Load()),
                                                            attr='label',
                                                            ctx=Load()),
                                                        ops=[
                                                            Eq()],
                                                        comparators=[
                                                            Attribute(
                                                                value=Name(id='rhs', ctx=Load()),
                                                                attr='label',
                                                                ctx=Load())])]))]),
                                match_case(
                                    pattern=MatchValue(
                                        value=Attribute(
                                            value=Name(id='spans', ctx=Load()),
                                            attr='Link',
                                            ctx=Load())),
                                    body=[
                                        Return(
                                            value=BoolOp(
                                                op=And(),
                                                values=[
                                                    Compare(
                                                        left=Attribute(
                                                            value=Name(id='lhs', ctx=Load()),
                                                            attr='target',
                                                            ctx=Load()),
                                                        ops=[
                                                            Eq()],
                                                        comparators=[
                                                            Attribute(
                                                                value=Name(id='rhs', ctx=Load()),
                                                                attr='target',
                                                                ctx=Load())]),
                                                    Compare(
                                                        left=Attribute(
                                                            value=Name(id='lhs', ctx=Load()),
                                                            attr='title',
                                                            ctx=Load()),
                                                        ops=[
                                                            Eq()],
                                                        comparators=[
                                                            Attribute(
                                                                value=Name(id='rhs', ctx=Load()),
                                                                attr='title',
                                                                ctx=Load())]),
                                                    Compare(
                                                        left=Attribute(
                                                            value=Name(id='lhs', ctx=Load()),
                                                            attr='label',
                                                            ctx=Load()),
                                                        ops=[
                                                            Eq()],
                                                        comparators=[
                                                            Attribute(
                                                                value=Name(id='rhs', ctx=Load()),
                                                                attr='label',
                                                                ctx=Load())])]))]),
                                match_case(
                                    pattern=MatchOr(
                                        patterns=[
                                            MatchValue(
                                                value=Attribute(
                                                    value=Name(id='blocks', ctx=Load()),
                                                    attr='Heading',
                                                    ctx=Load())),
                                            MatchValue(
                                                value=Attribute(
                                                    value=Name(id='blocks', ctx=Load()),
                                                    attr='SetextHeading',
                                                    ctx=Load()))]),
                                    body=[
                                        Return(
                                            value=Compare(
                                                left=Attribute(
                                                    value=Name(id='lhs', ctx=Load()),
                                                    attr='level',
                                                    ctx=Load()),
                                                ops=[
                                                    Eq()],
                                                comparators=[
                                                    Attribute(
                                                        value=Name(id='rhs', ctx=Load()),
                                                        attr='level',
                                                        ctx=Load())]))]),
                                match_case(
                                    pattern=MatchValue(
                                        value=Attribute(
                                            value=Name(id='blocks', ctx=Load()),
                                            attr='CodeFence',
                                            ctx=Load())),
                                    body=[
                                        Return(
                                            value=BoolOp(
                                                op=And(),
                                                values=[
                                                    Compare(
                                                        left=Attribute(
                                                            value=Name(id='lhs', ctx=Load()),
                                                            attr='language',
                                                            ctx=Load()),
                                                        ops=[
                                                            Eq()],
                                                        comparators=[
                                                            Attribute(
                                                                value=Name(id='rhs', ctx=Load()),
                                                                attr='language',
                                                                ctx=Load())]),
                                                    Compare(
                                                        left=Attribute(
                                                            value=Name(id='lhs', ctx=Load()),
                                                            attr='info_string',
                                                            ctx=Load()),
                                                        ops=[
                                                            Eq()],
                                                        comparators=[
                                                            Attribute(
                                                                value=Name(id='rhs', ctx=Load()),
                                                                attr='info_string',
                                                                ctx=Load())])]))]),
                                match_case(
                                    pattern=MatchValue(
                                        value=Attribute(
                                            value=Name(id='blocks', ctx=Load()),
                                            attr='BlockCode',
                                            ctx=Load())),
                                    body=[
                                        Return(
                                            value=Compare(
                                                left=Attribute(
                                                    value=Name(id='lhs', ctx=Load()),
                                                    attr='language',
                                                    ctx=Load()),
                                                ops=[
                                                    Eq()],
                                                comparators=[
                                                    Attribute(
                                                        value=Name(id='rhs', ctx=Load()),
                                                        attr='language',
                                                        ctx=Load())]))]),
                                match_case(
                                    pattern=MatchValue(
                                        value=Attribute(
                                            value=Name(id='blocks', ctx=Load()),
                                            attr='List',
                                            ctx=Load())),
                                    body=[
                                        Return(
                                            value=BoolOp(
                                                op=And(),
                                                values=[
                                                    Compare(
                                                        left=Attribute(
                                                            value=Name(id='lhs', ctx=Load()),
                                                            attr='loose',
                                                            ctx=Load()),
                                                        ops=[
                                                            Eq()],
                                                        comparators=[
                                                            Attribute(
                                                                value=Name(id='rhs', ctx=Load()),
                                                                attr='loose',
                                                                ctx=Load())]),
                                                    Compare(
                                                        left=Attribute(
                                                            value=Name(id='lhs', ctx=Load()),
                                                            attr='start',
                                                            ctx=Load()),
                                                        ops=[
                                                            Eq()],
                                                        comparators=[
                                                            Attribute(
                                                                value=Name(id='rhs', ctx=Load()),
                                                                attr='start',
                                                                ctx=Load())])]))]),
                                match_case(
                                    pattern=MatchValue(
                                        value=Attribute(
                                            value=Name(id='blocks', ctx=Load()),
                                            attr='ListItem',
                                            ctx=Load())),
                                    body=[
                                        Return(
                                            value=BoolOp(
                                                op=And(),
                                                values=[
                                                    Compare(
                                                        left=Attribute(
                                                            value=Name(id='lhs', ctx=Load()),
                                                            attr='loose',
                                                            ctx=Load()),
                                                        ops=[
                                                            Eq()],
                                                        comparators=[
                                                            Attribute(
                                                                value=Name(id='rhs', ctx=Load()),
                                                                attr='loose',
                                                                ctx=Load())]),
                                                    Compare(
                                                        left=Attribute(
                                                            value=Name(id='lhs', ctx=Load()),
                                                            attr='leader',
                                                            ctx=Load()),
                                                        ops=[
                                                            Eq()],
                                                        comparators=[
                                                            Attribute(
                                                                value=Name(id='rhs', ctx=Load()),
                                                                attr='leader',
                                                                ctx=Load())]),
                                                    Compare(
                                                        left=Attribute(
                                                            value=Name(id='lhs', ctx=Load()),
                                                            attr='prepend',
                                                            ctx=Load()),
                                                        ops=[
                                                            Eq()],
                                                        comparators=[
                                                            Attribute(
                                                                value=Name(id='rhs', ctx=Load()),
                                                                attr='prepend',
                                                                ctx=Load())])]))]),
                                match_case(
                                    pattern=MatchValue(
                                        value=Attribute(
                                            value=Name(id='blocks', ctx=Load()),
                                            attr='Table',
                                            ctx=Load())),
                                    body=[
                                        Return(
                                            value=Compare(
                                                left=Attribute(
                                                    value=Name(id='lhs', ctx=Load()),
                                                    attr='column_align',
                                                    ctx=Load()),
                                                ops=[
                                                    Eq()],
                                                comparators=[
                                                    Attribute(
                                                        value=Name(id='rhs', ctx=Load()),
                                                        attr='column_align',
                                                        ctx=Load())]))]),
                                match_case(
                                    pattern=MatchValue(
                                        value=Attribute(
                                            value=Name(id='blocks', ctx=Load()),
                                            attr='TableRow',
                                            ctx=Load())),
                                    body=[
                                        Return(
                                            value=Compare(
                                                left=Attribute(
                                                    value=Name(id='lhs', ctx=Load()),
                                                    attr='row_align',
                                                    ctx=Load()),
                                                ops=[
                                                    Eq()],
                                                comparators=[
                                                    Attribute(
                                                        value=Name(id='rhs', ctx=Load()),
                                                        attr='row_align',
                                                        ctx=Load())]))]),
                                match_case(
                                    pattern=MatchValue(
                                        value=Attribute(
                                            value=Name(id='blocks', ctx=Load()),
                                            attr='TableCell',
                                            ctx=Load())),
                                    body=[
                                        Return(
                                            value=Compare(
                                                left=Attribute(
                                                    value=Name(id='lhs', ctx=Load()),
                                                    attr='align',
                                                    ctx=Load()),
                                                ops=[
                                                    Eq()],
                                                comparators=[
                                                    Attribute(
                                                        value=Name(id='rhs', ctx=Load()),
                                                        attr='align',
                                                        ctx=Load())]))]),
                                match_case(
                                    pattern=MatchValue(
                                        value=Attribute(
                                            value=Name(id='spans', ctx=Load()),
                                            attr='LineBreak',
                                            ctx=Load())),
                                    body=[
                                        Return(
                                            value=Compare(
                                                left=Attribute(
                                                    value=Name(id='lhs', ctx=Load()),
                                                    attr='soft',
                                                    ctx=Load()),
                                                ops=[
                                                    Eq()],
                                                comparators=[
                                                    Attribute(
                                                        value=Name(id='rhs', ctx=Load()),
                                                        attr='soft',
                                                        ctx=Load())]))]),
                                match_case(
                                    pattern=MatchValue(
                                        value=Attribute(
                                            value=Name(id='blocks', ctx=Load()),
                                            attr='Document',
                                            ctx=Load())),
                                    body=[
                                        If(
                                            test=BoolOp(
                                                op=Or(),
                                                values=[
                                                    Attribute(
                                                        value=Name(id='lhs', ctx=Load()),
                                                        attr='footnotes',
                                                        ctx=Load()),
                                                    Attribute(
                                                        value=Name(id='rhs', ctx=Load()),
                                                        attr='footnotes',
                                                        ctx=Load())]),
                                            body=[
                                                Expr(
                                                    value=Call(
                                                        func=Attribute(
                                                            value=Name(id='logging', ctx=Load()),
                                                            attr='warning',
                                                            ctx=Load()),
                                                        args=[
                                                            Constant(value='markdown footnotes not implemented')],
                                                        keywords=[]))],
                                            orelse=[]),
                                        Return(
                                            value=Constant(value=True))]),
                                match_case(
                                    pattern=MatchAs(),
                                    body=[
                                        Raise(
                                            exc=Call(
                                                func=Name(id='NotImplementedError', ctx=Load()),
                                                args=[
                                                    JoinedStr(
                                                        values=[
                                                            Constant(value='markdown comparison for '),
                                                            FormattedValue(
                                                                value=Name(id='lhs', ctx=Load()),
                                                                conversion=-1),
                                                            Constant(value=' not implemented')])],
                                                keywords=[]))])])],
                    decorator_list=[],
                    returns=Name(id='bool', ctx=Load())),
                FunctionDef(
                    name='_markdown_hash',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self'),
                            arg(
                                arg='node',
                                annotation=Attribute(
                                    value=Name(id='mistletoe', ctx=Load()),
                                    attr='MarkdownNode',
                                    ctx=Load()))],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Assign(
                            targets=[
                                Name(id='token', ctx=Store())],
                            value=Attribute(
                                value=Name(id='node', ctx=Load()),
                                attr='token',
                                ctx=Load())),
                        AnnAssign(
                            target=Name(id='result', ctx=Store()),
                            annotation=Subscript(
                                value=Name(id='Tuple', ctx=Load()),
                                slice=Tuple(
                                    elts=[
                                        Name(id='object', ctx=Load()),
                                        Constant(value=Ellipsis)],
                                    ctx=Load()),
                                ctx=Load()),
                            simple=1),
                        Match(
                            subject=Call(
                                func=Name(id='type', ctx=Load()),
                                args=[
                                    Name(id='token', ctx=Load())],
                                keywords=[]),
                            cases=[
                                match_case(
                                    pattern=MatchOr(
                                        patterns=[
                                            MatchValue(
                                                value=Attribute(
                                                    value=Name(id='spans', ctx=Load()),
                                                    attr='Strong',
                                                    ctx=Load())),
                                            MatchValue(
                                                value=Attribute(
                                                    value=Name(id='spans', ctx=Load()),
                                                    attr='Emphasis',
                                                    ctx=Load())),
                                            MatchValue(
                                                value=Attribute(
                                                    value=Name(id='spans', ctx=Load()),
                                                    attr='InlineCode',
                                                    ctx=Load())),
                                            MatchValue(
                                                value=Attribute(
                                                    value=Name(id='spans', ctx=Load()),
                                                    attr='Strikethrough',
                                                    ctx=Load())),
                                            MatchValue(
                                                value=Attribute(
                                                    value=Name(id='spans', ctx=Load()),
                                                    attr='EscapeSequence',
                                                    ctx=Load())),
                                            MatchValue(
                                                value=Attribute(
                                                    value=Name(id='blocks', ctx=Load()),
                                                    attr='Quote',
                                                    ctx=Load())),
                                            MatchValue(
                                                value=Attribute(
                                                    value=Name(id='blocks', ctx=Load()),
                                                    attr='Paragraph',
                                                    ctx=Load())),
                                            MatchValue(
                                                value=Attribute(
                                                    value=Name(id='blocks', ctx=Load()),
                                                    attr='ThematicBreak',
                                                    ctx=Load())),
                                            MatchValue(
                                                value=Attribute(
                                                    value=Name(id='blocks', ctx=Load()),
                                                    attr='HTMLBlock',
                                                    ctx=Load())),
                                            MatchValue(
                                                value=Attribute(
                                                    value=Name(id='spans', ctx=Load()),
                                                    attr='AutoLink',
                                                    ctx=Load()))]),
                                    body=[
                                        Assign(
                                            targets=[
                                                Name(id='result', ctx=Store())],
                                            value=Tuple(elts=[], ctx=Load()))]),
                                match_case(
                                    pattern=MatchOr(
                                        patterns=[
                                            MatchValue(
                                                value=Attribute(
                                                    value=Name(id='spans', ctx=Load()),
                                                    attr='RawText',
                                                    ctx=Load())),
                                            MatchValue(
                                                value=Attribute(
                                                    value=Name(id='spans', ctx=Load()),
                                                    attr='HTMLSpan',
                                                    ctx=Load()))]),
                                    body=[
                                        Assign(
                                            targets=[
                                                Name(id='result', ctx=Store())],
                                            value=Tuple(
                                                elts=[
                                                    Attribute(
                                                        value=Name(id='token', ctx=Load()),
                                                        attr='content',
                                                        ctx=Load())],
                                                ctx=Load()))]),
                                match_case(
                                    pattern=MatchValue(
                                        value=Attribute(
                                            value=Name(id='spans', ctx=Load()),
                                            attr='Link',
                                            ctx=Load())),
                                    body=[
                                        Assign(
                                            targets=[
                                                Name(id='result', ctx=Store())],
                                            value=Tuple(
                                                elts=[
                                                    Attribute(
                                                        value=Name(id='token', ctx=Load()),
                                                        attr='target',
                                                        ctx=Load()),
                                                    Attribute(
                                                        value=Name(id='token', ctx=Load()),
                                                        attr='title',
                                                        ctx=Load()),
                                                    Attribute(
                                                        value=Name(id='token', ctx=Load()),
                                                        attr='label',
                                                        ctx=Load())],
                                                ctx=Load()))]),
                                match_case(
                                    pattern=MatchValue(
                                        value=Attribute(
                                            value=Name(id='spans', ctx=Load()),
                                            attr='Image',
                                            ctx=Load())),
                                    body=[
                                        Assign(
                                            targets=[
                                                Name(id='result', ctx=Store())],
                                            value=Tuple(
                                                elts=[
                                                    Attribute(
                                                        value=Name(id='token', ctx=Load()),
                                                        attr='src',
                                                        ctx=Load()),
                                                    Attribute(
                                                        value=Name(id='token', ctx=Load()),
                                                        attr='title',
                                                        ctx=Load()),
                                                    Attribute(
                                                        value=Name(id='token', ctx=Load()),
                                                        attr='label',
                                                        ctx=Load())],
                                                ctx=Load()))]),
                                match_case(
                                    pattern=MatchOr(
                                        patterns=[
                                            MatchValue(
                                                value=Attribute(
                                                    value=Name(id='blocks', ctx=Load()),
                                                    attr='Heading',
                                                    ctx=Load())),
                                            MatchValue(
                                                value=Attribute(
                                                    value=Name(id='blocks', ctx=Load()),
                                                    attr='SetextHeading',
                                                    ctx=Load()))]),
                                    body=[
                                        Assign(
                                            targets=[
                                                Name(id='result', ctx=Store())],
                                            value=Tuple(
                                                elts=[
                                                    Attribute(
                                                        value=Name(id='token', ctx=Load()),
                                                        attr='level',
                                                        ctx=Load())],
                                                ctx=Load()))]),
                                match_case(
                                    pattern=MatchValue(
                                        value=Attribute(
                                            value=Name(id='blocks', ctx=Load()),
                                            attr='CodeFence',
                                            ctx=Load())),
                                    body=[
                                        Assign(
                                            targets=[
                                                Name(id='result', ctx=Store())],
                                            value=Tuple(
                                                elts=[
                                                    Attribute(
                                                        value=Name(id='token', ctx=Load()),
                                                        attr='language',
                                                        ctx=Load()),
                                                    Attribute(
                                                        value=Name(id='token', ctx=Load()),
                                                        attr='info_string',
                                                        ctx=Load())],
                                                ctx=Load()))]),
                                match_case(
                                    pattern=MatchValue(
                                        value=Attribute(
                                            value=Name(id='blocks', ctx=Load()),
                                            attr='BlockCode',
                                            ctx=Load())),
                                    body=[
                                        Assign(
                                            targets=[
                                                Name(id='result', ctx=Store())],
                                            value=Tuple(
                                                elts=[
                                                    Attribute(
                                                        value=Name(id='token', ctx=Load()),
                                                        attr='language',
                                                        ctx=Load())],
                                                ctx=Load()))]),
                                match_case(
                                    pattern=MatchValue(
                                        value=Attribute(
                                            value=Name(id='blocks', ctx=Load()),
                                            attr='List',
                                            ctx=Load())),
                                    body=[
                                        Assign(
                                            targets=[
                                                Name(id='result', ctx=Store())],
                                            value=Tuple(
                                                elts=[
                                                    Attribute(
                                                        value=Name(id='token', ctx=Load()),
                                                        attr='loose',
                                                        ctx=Load()),
                                                    Attribute(
                                                        value=Name(id='token', ctx=Load()),
                                                        attr='start',
                                                        ctx=Load())],
                                                ctx=Load()))]),
                                match_case(
                                    pattern=MatchValue(
                                        value=Attribute(
                                            value=Name(id='blocks', ctx=Load()),
                                            attr='ListItem',
                                            ctx=Load())),
                                    body=[
                                        Assign(
                                            targets=[
                                                Name(id='result', ctx=Store())],
                                            value=Tuple(
                                                elts=[
                                                    Attribute(
                                                        value=Name(id='token', ctx=Load()),
                                                        attr='loose',
                                                        ctx=Load()),
                                                    Attribute(
                                                        value=Name(id='token', ctx=Load()),
                                                        attr='leader',
                                                        ctx=Load()),
                                                    Attribute(
                                                        value=Name(id='token', ctx=Load()),
                                                        attr='prepend',
                                                        ctx=Load())],
                                                ctx=Load()))]),
                                match_case(
                                    pattern=MatchValue(
                                        value=Attribute(
                                            value=Name(id='blocks', ctx=Load()),
                                            attr='Table',
                                            ctx=Load())),
                                    body=[
                                        Assign(
                                            targets=[
                                                Name(id='result', ctx=Store())],
                                            value=Tuple(
                                                elts=[
                                                    Attribute(
                                                        value=Name(id='token', ctx=Load()),
                                                        attr='column_align',
                                                        ctx=Load())],
                                                ctx=Load()))]),
                                match_case(
                                    pattern=MatchValue(
                                        value=Attribute(
                                            value=Name(id='blocks', ctx=Load()),
                                            attr='TableRow',
                                            ctx=Load())),
                                    body=[
                                        Assign(
                                            targets=[
                                                Name(id='result', ctx=Store())],
                                            value=Tuple(
                                                elts=[
                                                    Attribute(
                                                        value=Name(id='token', ctx=Load()),
                                                        attr='row_align',
                                                        ctx=Load())],
                                                ctx=Load()))]),
                                match_case(
                                    pattern=MatchValue(
                                        value=Attribute(
                                            value=Name(id='blocks', ctx=Load()),
                                            attr='TableCell',
                                            ctx=Load())),
                                    body=[
                                        Assign(
                                            targets=[
                                                Name(id='result', ctx=Store())],
                                            value=Tuple(
                                                elts=[
                                                    Attribute(
                                                        value=Name(id='token', ctx=Load()),
                                                        attr='align',
                                                        ctx=Load())],
                                                ctx=Load()))]),
                                match_case(
                                    pattern=MatchValue(
                                        value=Attribute(
                                            value=Name(id='spans', ctx=Load()),
                                            attr='LineBreak',
                                            ctx=Load())),
                                    body=[
                                        Assign(
                                            targets=[
                                                Name(id='result', ctx=Store())],
                                            value=Tuple(
                                                elts=[
                                                    Attribute(
                                                        value=Name(id='token', ctx=Load()),
                                                        attr='soft',
                                                        ctx=Load())],
                                                ctx=Load()))]),
                                match_case(
                                    pattern=MatchValue(
                                        value=Attribute(
                                            value=Name(id='blocks', ctx=Load()),
                                            attr='Document',
                                            ctx=Load())),
                                    body=[
                                        If(
                                            test=Attribute(
                                                value=Name(id='token', ctx=Load()),
                                                attr='footnotes',
                                                ctx=Load()),
                                            body=[
                                                Expr(
                                                    value=Call(
                                                        func=Attribute(
                                                            value=Name(id='logging', ctx=Load()),
                                                            attr='warning',
                                                            ctx=Load()),
                                                        args=[
                                                            Constant(value='markdown footnotes not implemented')],
                                                        keywords=[]))],
                                            orelse=[]),
                                        Assign(
                                            targets=[
                                                Name(id='result', ctx=Store())],
                                            value=Tuple(elts=[], ctx=Load()))]),
                                match_case(
                                    pattern=MatchAs(),
                                    body=[
                                        Raise(
                                            exc=Call(
                                                func=Name(id='NotImplementedError', ctx=Load()),
                                                args=[
                                                    JoinedStr(
                                                        values=[
                                                            Constant(value='markdown hash for '),
                                                            FormattedValue(
                                                                value=Name(id='token', ctx=Load()),
                                                                conversion=-1),
                                                            Constant(value=' not implemented')])],
                                                keywords=[]))])]),
                        Return(
                            value=Call(
                                func=Name(id='hash', ctx=Load()),
                                args=[
                                    Tuple(
                                        elts=[
                                            Call(
                                                func=Name(id='type', ctx=Load()),
                                                args=[
                                                    Name(id='token', ctx=Load())],
                                                keywords=[]),
                                            Name(id='result', ctx=Load())],
                                        ctx=Load())],
                                keywords=[]))],
                    decorator_list=[],
                    returns=Name(id='int', ctx=Load())),
                FunctionDef(
                    name='shallow_equals',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self'),
                            arg(
                                arg='lhs',
                                annotation=Name(id='Node', ctx=Load())),
                            arg(
                                arg='rhs',
                                annotation=Name(id='Node', ctx=Load()))],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        If(
                            test=Compare(
                                left=Name(id='lhs', ctx=Load()),
                                ops=[
                                    Is()],
                                comparators=[
                                    Name(id='rhs', ctx=Load())]),
                            body=[
                                Return(
                                    value=Constant(value=True))],
                            orelse=[]),
                        If(
                            test=UnaryOp(
                                op=Not(),
                                operand=Call(
                                    func=Name(id='isinstance', ctx=Load()),
                                    args=[
                                        Name(id='lhs', ctx=Load()),
                                        Call(
                                            func=Name(id='type', ctx=Load()),
                                            args=[
                                                Name(id='rhs', ctx=Load())],
                                            keywords=[])],
                                    keywords=[])),
                            body=[
                                Return(
                                    value=Constant(value=False))],
                            orelse=[]),
                        If(
                            test=UnaryOp(
                                op=Not(),
                                operand=Call(
                                    func=Name(id='isinstance', ctx=Load()),
                                    args=[
                                        Name(id='rhs', ctx=Load()),
                                        Call(
                                            func=Name(id='type', ctx=Load()),
                                            args=[
                                                Name(id='lhs', ctx=Load())],
                                            keywords=[])],
                                    keywords=[])),
                            body=[
                                Return(
                                    value=Constant(value=False))],
                            orelse=[]),
                        If(
                            test=Call(
                                func=Name(id='isinstance', ctx=Load()),
                                args=[
                                    Name(id='lhs', ctx=Load()),
                                    Attribute(
                                        value=Name(id='python', ctx=Load()),
                                        attr='PythonNode',
                                        ctx=Load())],
                                keywords=[]),
                            body=[
                                Assert(
                                    test=Call(
                                        func=Name(id='isinstance', ctx=Load()),
                                        args=[
                                            Name(id='rhs', ctx=Load()),
                                            Attribute(
                                                value=Name(id='python', ctx=Load()),
                                                attr='PythonNode',
                                                ctx=Load())],
                                        keywords=[])),
                                Return(
                                    value=Call(
                                        func=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='_python_equals',
                                            ctx=Load()),
                                        args=[
                                            Name(id='lhs', ctx=Load()),
                                            Name(id='rhs', ctx=Load())],
                                        keywords=[]))],
                            orelse=[
                                If(
                                    test=Call(
                                        func=Name(id='isinstance', ctx=Load()),
                                        args=[
                                            Name(id='lhs', ctx=Load()),
                                            Name(id='Definition', ctx=Load())],
                                        keywords=[]),
                                    body=[
                                        Assert(
                                            test=Call(
                                                func=Name(id='isinstance', ctx=Load()),
                                                args=[
                                                    Name(id='rhs', ctx=Load()),
                                                    Name(id='Definition', ctx=Load())],
                                                keywords=[])),
                                        Return(
                                            value=BoolOp(
                                                op=And(),
                                                values=[
                                                    Compare(
                                                        left=Attribute(
                                                            value=Name(id='lhs', ctx=Load()),
                                                            attr='identifier',
                                                            ctx=Load()),
                                                        ops=[
                                                            Eq()],
                                                        comparators=[
                                                            Attribute(
                                                                value=Name(id='rhs', ctx=Load()),
                                                                attr='identifier',
                                                                ctx=Load())]),
                                                    Compare(
                                                        left=Attribute(
                                                            value=Name(id='lhs', ctx=Load()),
                                                            attr='specifier',
                                                            ctx=Load()),
                                                        ops=[
                                                            Eq()],
                                                        comparators=[
                                                            Attribute(
                                                                value=Name(id='rhs', ctx=Load()),
                                                                attr='specifier',
                                                                ctx=Load())])]))],
                                    orelse=[
                                        If(
                                            test=Call(
                                                func=Name(id='isinstance', ctx=Load()),
                                                args=[
                                                    Name(id='lhs', ctx=Load()),
                                                    Name(id='Reference', ctx=Load())],
                                                keywords=[]),
                                            body=[
                                                Assert(
                                                    test=Call(
                                                        func=Name(id='isinstance', ctx=Load()),
                                                        args=[
                                                            Name(id='rhs', ctx=Load()),
                                                            Name(id='Reference', ctx=Load())],
                                                        keywords=[])),
                                                Return(
                                                    value=Compare(
                                                        left=Attribute(
                                                            value=Name(id='lhs', ctx=Load()),
                                                            attr='identifier',
                                                            ctx=Load()),
                                                        ops=[
                                                            Eq()],
                                                        comparators=[
                                                            Attribute(
                                                                value=Name(id='rhs', ctx=Load()),
                                                                attr='identifier',
                                                                ctx=Load())]))],
                                            orelse=[
                                                If(
                                                    test=Call(
                                                        func=Name(id='isinstance', ctx=Load()),
                                                        args=[
                                                            Name(id='lhs', ctx=Load()),
                                                            Name(id='BlankNode', ctx=Load())],
                                                        keywords=[]),
                                                    body=[
                                                        Assert(
                                                            test=Call(
                                                                func=Name(id='isinstance', ctx=Load()),
                                                                args=[
                                                                    Name(id='rhs', ctx=Load()),
                                                                    Name(id='BlankNode', ctx=Load())],
                                                                keywords=[])),
                                                        Return(
                                                            value=Constant(value=True))],
                                                    orelse=[
                                                        If(
                                                            test=Call(
                                                                func=Name(id='isinstance', ctx=Load()),
                                                                args=[
                                                                    Name(id='lhs', ctx=Load()),
                                                                    Attribute(
                                                                        value=Name(id='mistletoe', ctx=Load()),
                                                                        attr='MarkdownNode',
                                                                        ctx=Load())],
                                                                keywords=[]),
                                                            body=[
                                                                Assert(
                                                                    test=Call(
                                                                        func=Name(id='isinstance', ctx=Load()),
                                                                        args=[
                                                                            Name(id='rhs', ctx=Load()),
                                                                            Attribute(
                                                                                value=Name(id='mistletoe', ctx=Load()),
                                                                                attr='MarkdownNode',
                                                                                ctx=Load())],
                                                                        keywords=[])),
                                                                Return(
                                                                    value=Call(
                                                                        func=Attribute(
                                                                            value=Name(id='self', ctx=Load()),
                                                                            attr='_markdown_equals',
                                                                            ctx=Load()),
                                                                        args=[
                                                                            Name(id='lhs', ctx=Load()),
                                                                            Name(id='rhs', ctx=Load())],
                                                                        keywords=[]))],
                                                            orelse=[
                                                                If(
                                                                    test=Call(
                                                                        func=Name(id='isinstance', ctx=Load()),
                                                                        args=[
                                                                            Name(id='lhs', ctx=Load()),
                                                                            Attribute(
                                                                                value=Name(id='python', ctx=Load()),
                                                                                attr='Name',
                                                                                ctx=Load())],
                                                                        keywords=[]),
                                                                    body=[
                                                                        Assert(
                                                                            test=Call(
                                                                                func=Name(id='isinstance', ctx=Load()),
                                                                                args=[
                                                                                    Name(id='rhs', ctx=Load()),
                                                                                    Attribute(
                                                                                        value=Name(id='python', ctx=Load()),
                                                                                        attr='Name',
                                                                                        ctx=Load())],
                                                                                keywords=[])),
                                                                        Return(
                                                                            value=BoolOp(
                                                                                op=And(),
                                                                                values=[
                                                                                    Compare(
                                                                                        left=Attribute(
                                                                                            value=Name(id='lhs', ctx=Load()),
                                                                                            attr='name',
                                                                                            ctx=Load()),
                                                                                        ops=[
                                                                                            Eq()],
                                                                                        comparators=[
                                                                                            Attribute(
                                                                                                value=Name(id='rhs', ctx=Load()),
                                                                                                attr='name',
                                                                                                ctx=Load())]),
                                                                                    Compare(
                                                                                        left=Attribute(
                                                                                            value=Name(id='lhs', ctx=Load()),
                                                                                            attr='full_name',
                                                                                            ctx=Load()),
                                                                                        ops=[
                                                                                            Eq()],
                                                                                        comparators=[
                                                                                            Attribute(
                                                                                                value=Name(id='rhs', ctx=Load()),
                                                                                                attr='full_name',
                                                                                                ctx=Load())])]))],
                                                                    orelse=[
                                                                        If(
                                                                            test=Call(
                                                                                func=Name(id='isinstance', ctx=Load()),
                                                                                args=[
                                                                                    Name(id='lhs', ctx=Load()),
                                                                                    Name(id='ListNode', ctx=Load())],
                                                                                keywords=[]),
                                                                            body=[
                                                                                Assert(
                                                                                    test=Call(
                                                                                        func=Name(id='isinstance', ctx=Load()),
                                                                                        args=[
                                                                                            Name(id='rhs', ctx=Load()),
                                                                                            Name(id='ListNode', ctx=Load())],
                                                                                        keywords=[])),
                                                                                Return(
                                                                                    value=Constant(value=True))],
                                                                            orelse=[
                                                                                If(
                                                                                    test=Call(
                                                                                        func=Name(id='isinstance', ctx=Load()),
                                                                                        args=[
                                                                                            Name(id='lhs', ctx=Load()),
                                                                                            Attribute(
                                                                                                value=Name(id='verbatim', ctx=Load()),
                                                                                                attr='Transcribed',
                                                                                                ctx=Load())],
                                                                                        keywords=[]),
                                                                                    body=[
                                                                                        Assert(
                                                                                            test=Call(
                                                                                                func=Name(id='isinstance', ctx=Load()),
                                                                                                args=[
                                                                                                    Name(id='rhs', ctx=Load()),
                                                                                                    Attribute(
                                                                                                        value=Name(id='verbatim', ctx=Load()),
                                                                                                        attr='Transcribed',
                                                                                                        ctx=Load())],
                                                                                                keywords=[])),
                                                                                        Return(
                                                                                            value=Constant(value=True))],
                                                                                    orelse=[
                                                                                        If(
                                                                                            test=Call(
                                                                                                func=Name(id='isinstance', ctx=Load()),
                                                                                                args=[
                                                                                                    Name(id='lhs', ctx=Load()),
                                                                                                    Attribute(
                                                                                                        value=Name(id='verbatim', ctx=Load()),
                                                                                                        attr='Line',
                                                                                                        ctx=Load())],
                                                                                                keywords=[]),
                                                                                            body=[
                                                                                                Assert(
                                                                                                    test=Call(
                                                                                                        func=Name(id='isinstance', ctx=Load()),
                                                                                                        args=[
                                                                                                            Name(id='rhs', ctx=Load()),
                                                                                                            Attribute(
                                                                                                                value=Name(id='verbatim', ctx=Load()),
                                                                                                                attr='Line',
                                                                                                                ctx=Load())],
                                                                                                        keywords=[])),
                                                                                                Assign(
                                                                                                    targets=[
                                                                                                        Name(id='lefts', ctx=Store())],
                                                                                                    value=Call(
                                                                                                        func=Name(id='list', ctx=Load()),
                                                                                                        args=[
                                                                                                            Attribute(
                                                                                                                value=Name(id='lhs', ctx=Load()),
                                                                                                                attr='children',
                                                                                                                ctx=Load())],
                                                                                                        keywords=[])),
                                                                                                Assign(
                                                                                                    targets=[
                                                                                                        Name(id='rights', ctx=Store())],
                                                                                                    value=Call(
                                                                                                        func=Name(id='list', ctx=Load()),
                                                                                                        args=[
                                                                                                            Attribute(
                                                                                                                value=Name(id='rhs', ctx=Load()),
                                                                                                                attr='children',
                                                                                                                ctx=Load())],
                                                                                                        keywords=[])),
                                                                                                If(
                                                                                                    test=Compare(
                                                                                                        left=Call(
                                                                                                            func=Name(id='len', ctx=Load()),
                                                                                                            args=[
                                                                                                                Name(id='lefts', ctx=Load())],
                                                                                                            keywords=[]),
                                                                                                        ops=[
                                                                                                            NotEq()],
                                                                                                        comparators=[
                                                                                                            Call(
                                                                                                                func=Name(id='len', ctx=Load()),
                                                                                                                args=[
                                                                                                                    Name(id='rights', ctx=Load())],
                                                                                                                keywords=[])]),
                                                                                                    body=[
                                                                                                        Return(
                                                                                                            value=Constant(value=False))],
                                                                                                    orelse=[]),
                                                                                                Return(
                                                                                                    value=Call(
                                                                                                        func=Name(id='all', ctx=Load()),
                                                                                                        args=[
                                                                                                            GeneratorExp(
                                                                                                                elt=Call(
                                                                                                                    func=Attribute(
                                                                                                                        value=Name(id='self', ctx=Load()),
                                                                                                                        attr='deep_equals',
                                                                                                                        ctx=Load()),
                                                                                                                    args=[
                                                                                                                        Name(id='a', ctx=Load()),
                                                                                                                        Name(id='b', ctx=Load())],
                                                                                                                    keywords=[]),
                                                                                                                generators=[
                                                                                                                    comprehension(
                                                                                                                        target=Tuple(
                                                                                                                            elts=[
                                                                                                                                Name(id='a', ctx=Store()),
                                                                                                                                Name(id='b', ctx=Store())],
                                                                                                                            ctx=Store()),
                                                                                                                        iter=Call(
                                                                                                                            func=Name(id='zip', ctx=Load()),
                                                                                                                            args=[
                                                                                                                                Name(id='lefts', ctx=Load()),
                                                                                                                                Name(id='rights', ctx=Load())],
                                                                                                                            keywords=[]),
                                                                                                                        ifs=[],
                                                                                                                        is_async=0)])],
                                                                                                        keywords=[]))],
                                                                                            orelse=[
                                                                                                If(
                                                                                                    test=Call(
                                                                                                        func=Name(id='isinstance', ctx=Load()),
                                                                                                        args=[
                                                                                                            Name(id='lhs', ctx=Load()),
                                                                                                            Attribute(
                                                                                                                value=Name(id='verbatim', ctx=Load()),
                                                                                                                attr='Highlight',
                                                                                                                ctx=Load())],
                                                                                                        keywords=[]),
                                                                                                    body=[
                                                                                                        Assert(
                                                                                                            test=Call(
                                                                                                                func=Name(id='isinstance', ctx=Load()),
                                                                                                                args=[
                                                                                                                    Name(id='rhs', ctx=Load()),
                                                                                                                    Attribute(
                                                                                                                        value=Name(id='verbatim', ctx=Load()),
                                                                                                                        attr='Highlight',
                                                                                                                        ctx=Load())],
                                                                                                                keywords=[])),
                                                                                                        Return(
                                                                                                            value=Compare(
                                                                                                                left=Attribute(
                                                                                                                    value=Name(id='lhs', ctx=Load()),
                                                                                                                    attr='highlights',
                                                                                                                    ctx=Load()),
                                                                                                                ops=[
                                                                                                                    Eq()],
                                                                                                                comparators=[
                                                                                                                    Attribute(
                                                                                                                        value=Name(id='rhs', ctx=Load()),
                                                                                                                        attr='highlights',
                                                                                                                        ctx=Load())]))],
                                                                                                    orelse=[
                                                                                                        If(
                                                                                                            test=Call(
                                                                                                                func=Name(id='isinstance', ctx=Load()),
                                                                                                                args=[
                                                                                                                    Name(id='lhs', ctx=Load()),
                                                                                                                    Attribute(
                                                                                                                        value=Name(id='verbatim', ctx=Load()),
                                                                                                                        attr='Text',
                                                                                                                        ctx=Load())],
                                                                                                                keywords=[]),
                                                                                                            body=[
                                                                                                                Assert(
                                                                                                                    test=Call(
                                                                                                                        func=Name(id='isinstance', ctx=Load()),
                                                                                                                        args=[
                                                                                                                            Name(id='rhs', ctx=Load()),
                                                                                                                            Attribute(
                                                                                                                                value=Name(id='verbatim', ctx=Load()),
                                                                                                                                attr='Text',
                                                                                                                                ctx=Load())],
                                                                                                                        keywords=[])),
                                                                                                                Return(
                                                                                                                    value=Compare(
                                                                                                                        left=Attribute(
                                                                                                                            value=Name(id='lhs', ctx=Load()),
                                                                                                                            attr='text',
                                                                                                                            ctx=Load()),
                                                                                                                        ops=[
                                                                                                                            Eq()],
                                                                                                                        comparators=[
                                                                                                                            Attribute(
                                                                                                                                value=Name(id='rhs', ctx=Load()),
                                                                                                                                attr='text',
                                                                                                                                ctx=Load())]))],
                                                                                                            orelse=[])])])])])])])])])])]),
                        Raise(
                            exc=Call(
                                func=Name(id='NotImplementedError', ctx=Load()),
                                args=[
                                    JoinedStr(
                                        values=[
                                            Constant(value='shallow_equals('),
                                            FormattedValue(
                                                value=Call(
                                                    func=Name(id='type', ctx=Load()),
                                                    args=[
                                                        Name(id='lhs', ctx=Load())],
                                                    keywords=[]),
                                                conversion=-1),
                                            Constant(value=', '),
                                            FormattedValue(
                                                value=Call(
                                                    func=Name(id='type', ctx=Load()),
                                                    args=[
                                                        Name(id='rhs', ctx=Load())],
                                                    keywords=[]),
                                                conversion=-1),
                                            Constant(value=')')])],
                                keywords=[]))],
                    decorator_list=[],
                    returns=Name(id='bool', ctx=Load())),
                FunctionDef(
                    name='_python_hash',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self'),
                            arg(
                                arg='node',
                                annotation=Attribute(
                                    value=Name(id='python', ctx=Load()),
                                    attr='PythonNode',
                                    ctx=Load()))],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Assert(
                            test=Call(
                                func=Attribute(
                                    value=Name(id='dataclasses', ctx=Load()),
                                    attr='is_dataclass',
                                    ctx=Load()),
                                args=[
                                    Name(id='node', ctx=Load())],
                                keywords=[])),
                        Assign(
                            targets=[
                                Name(id='hash_value', ctx=Store())],
                            value=Constant(value=0)),
                        For(
                            target=Tuple(
                                elts=[
                                    Name(id='idx', ctx=Store()),
                                    Name(id='field', ctx=Store())],
                                ctx=Store()),
                            iter=Call(
                                func=Name(id='enumerate', ctx=Load()),
                                args=[
                                    Call(
                                        func=Attribute(
                                            value=Name(id='dataclasses', ctx=Load()),
                                            attr='fields',
                                            ctx=Load()),
                                        args=[
                                            Name(id='node', ctx=Load())],
                                        keywords=[])],
                                keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Name(id='value', ctx=Store())],
                                    value=Call(
                                        func=Name(id='getattr', ctx=Load()),
                                        args=[
                                            Name(id='node', ctx=Load()),
                                            Attribute(
                                                value=Name(id='field', ctx=Load()),
                                                attr='name',
                                                ctx=Load())],
                                        keywords=[])),
                                If(
                                    test=Compare(
                                        left=Attribute(
                                            value=Name(id='field', ctx=Load()),
                                            attr='type',
                                            ctx=Load()),
                                        ops=[
                                            Eq()],
                                        comparators=[
                                            Name(id='Node', ctx=Load())]),
                                    body=[
                                        Continue()],
                                    orelse=[
                                        If(
                                            test=Compare(
                                                left=Attribute(
                                                    value=Name(id='field', ctx=Load()),
                                                    attr='type',
                                                    ctx=Load()),
                                                ops=[
                                                    Eq()],
                                                comparators=[
                                                    Subscript(
                                                        value=Name(id='Sequence', ctx=Load()),
                                                        slice=Name(id='Node', ctx=Load()),
                                                        ctx=Load())]),
                                            body=[
                                                Raise(
                                                    exc=Call(
                                                        func=Name(id='ValueError', ctx=Load()),
                                                        args=[
                                                            Constant(value="python node fields can't be sequences")],
                                                        keywords=[]))],
                                            orelse=[])]),
                                AugAssign(
                                    target=Name(id='hash_value', ctx=Store()),
                                    op=BitXor(),
                                    value=Call(
                                        func=Name(id='hash', ctx=Load()),
                                        args=[
                                            Tuple(
                                                elts=[
                                                    Name(id='idx', ctx=Load()),
                                                    Name(id='value', ctx=Load())],
                                                ctx=Load())],
                                        keywords=[]))],
                            orelse=[]),
                        Return(
                            value=Name(id='hash_value', ctx=Load()))],
                    decorator_list=[],
                    returns=Name(id='int', ctx=Load())),
                FunctionDef(
                    name='_python_equals',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self'),
                            arg(
                                arg='lhs',
                                annotation=Attribute(
                                    value=Name(id='python', ctx=Load()),
                                    attr='PythonNode',
                                    ctx=Load())),
                            arg(
                                arg='rhs',
                                annotation=Attribute(
                                    value=Name(id='python', ctx=Load()),
                                    attr='PythonNode',
                                    ctx=Load()))],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Assert(
                            test=Call(
                                func=Attribute(
                                    value=Name(id='dataclasses', ctx=Load()),
                                    attr='is_dataclass',
                                    ctx=Load()),
                                args=[
                                    Name(id='lhs', ctx=Load())],
                                keywords=[])),
                        Assert(
                            test=Call(
                                func=Attribute(
                                    value=Name(id='dataclasses', ctx=Load()),
                                    attr='is_dataclass',
                                    ctx=Load()),
                                args=[
                                    Name(id='rhs', ctx=Load())],
                                keywords=[])),
                        Assert(
                            test=Compare(
                                left=Call(
                                    func=Name(id='type', ctx=Load()),
                                    args=[
                                        Name(id='lhs', ctx=Load())],
                                    keywords=[]),
                                ops=[
                                    Is()],
                                comparators=[
                                    Call(
                                        func=Name(id='type', ctx=Load()),
                                        args=[
                                            Name(id='rhs', ctx=Load())],
                                        keywords=[])])),
                        For(
                            target=Name(id='field', ctx=Store()),
                            iter=Call(
                                func=Attribute(
                                    value=Name(id='dataclasses', ctx=Load()),
                                    attr='fields',
                                    ctx=Load()),
                                args=[
                                    Name(id='lhs', ctx=Load())],
                                keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Name(id='lhs_value', ctx=Store())],
                                    value=Call(
                                        func=Name(id='getattr', ctx=Load()),
                                        args=[
                                            Name(id='lhs', ctx=Load()),
                                            Attribute(
                                                value=Name(id='field', ctx=Load()),
                                                attr='name',
                                                ctx=Load())],
                                        keywords=[])),
                                Assign(
                                    targets=[
                                        Name(id='rhs_value', ctx=Store())],
                                    value=Call(
                                        func=Name(id='getattr', ctx=Load()),
                                        args=[
                                            Name(id='rhs', ctx=Load()),
                                            Attribute(
                                                value=Name(id='field', ctx=Load()),
                                                attr='name',
                                                ctx=Load())],
                                        keywords=[])),
                                If(
                                    test=Compare(
                                        left=Attribute(
                                            value=Name(id='field', ctx=Load()),
                                            attr='type',
                                            ctx=Load()),
                                        ops=[
                                            Eq()],
                                        comparators=[
                                            Name(id='Node', ctx=Load())]),
                                    body=[
                                        Continue()],
                                    orelse=[
                                        If(
                                            test=Compare(
                                                left=Attribute(
                                                    value=Name(id='field', ctx=Load()),
                                                    attr='type',
                                                    ctx=Load()),
                                                ops=[
                                                    Eq()],
                                                comparators=[
                                                    Subscript(
                                                        value=Name(id='Sequence', ctx=Load()),
                                                        slice=Name(id='Node', ctx=Load()),
                                                        ctx=Load())]),
                                            body=[
                                                Raise(
                                                    exc=Call(
                                                        func=Name(id='ValueError', ctx=Load()),
                                                        args=[
                                                            Constant(value="python node fields can't be sequences")],
                                                        keywords=[]))],
                                            orelse=[])]),
                                If(
                                    test=Compare(
                                        left=Name(id='lhs_value', ctx=Load()),
                                        ops=[
                                            NotEq()],
                                        comparators=[
                                            Name(id='rhs_value', ctx=Load())]),
                                    body=[
                                        Return(
                                            value=Constant(value=False))],
                                    orelse=[])],
                            orelse=[]),
                        Return(
                            value=Constant(value=True))],
                    decorator_list=[],
                    returns=Name(id='bool', ctx=Load())),
                FunctionDef(
                    name='shallow_hash',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self'),
                            arg(
                                arg='node',
                                annotation=Name(id='Node', ctx=Load()))],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        If(
                            test=Call(
                                func=Name(id='isinstance', ctx=Load()),
                                args=[
                                    Name(id='node', ctx=Load()),
                                    Attribute(
                                        value=Name(id='python', ctx=Load()),
                                        attr='PythonNode',
                                        ctx=Load())],
                                keywords=[]),
                            body=[
                                Return(
                                    value=Call(
                                        func=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='_python_hash',
                                            ctx=Load()),
                                        args=[
                                            Name(id='node', ctx=Load())],
                                        keywords=[]))],
                            orelse=[
                                If(
                                    test=Call(
                                        func=Name(id='isinstance', ctx=Load()),
                                        args=[
                                            Name(id='node', ctx=Load()),
                                            Name(id='Definition', ctx=Load())],
                                        keywords=[]),
                                    body=[
                                        Return(
                                            value=Call(
                                                func=Name(id='hash', ctx=Load()),
                                                args=[
                                                    Tuple(
                                                        elts=[
                                                            Attribute(
                                                                value=Name(id='node', ctx=Load()),
                                                                attr='identifier',
                                                                ctx=Load()),
                                                            Constant(value=None),
                                                            Attribute(
                                                                value=Name(id='node', ctx=Load()),
                                                                attr='specifier',
                                                                ctx=Load())],
                                                        ctx=Load())],
                                                keywords=[]))],
                                    orelse=[
                                        If(
                                            test=Call(
                                                func=Name(id='isinstance', ctx=Load()),
                                                args=[
                                                    Name(id='node', ctx=Load()),
                                                    Name(id='Reference', ctx=Load())],
                                                keywords=[]),
                                            body=[
                                                Return(
                                                    value=Call(
                                                        func=Name(id='hash', ctx=Load()),
                                                        args=[
                                                            Tuple(
                                                                elts=[
                                                                    Attribute(
                                                                        value=Name(id='node', ctx=Load()),
                                                                        attr='identifier',
                                                                        ctx=Load()),
                                                                    Constant(value=None)],
                                                                ctx=Load())],
                                                        keywords=[]))],
                                            orelse=[
                                                If(
                                                    test=Call(
                                                        func=Name(id='isinstance', ctx=Load()),
                                                        args=[
                                                            Name(id='node', ctx=Load()),
                                                            Name(id='BlankNode', ctx=Load())],
                                                        keywords=[]),
                                                    body=[
                                                        Return(
                                                            value=Call(
                                                                func=Name(id='hash', ctx=Load()),
                                                                args=[
                                                                    Call(
                                                                        func=Name(id='type', ctx=Load()),
                                                                        args=[
                                                                            Name(id='BlankNode', ctx=Load())],
                                                                        keywords=[])],
                                                                keywords=[]))],
                                                    orelse=[
                                                        If(
                                                            test=Call(
                                                                func=Name(id='isinstance', ctx=Load()),
                                                                args=[
                                                                    Name(id='node', ctx=Load()),
                                                                    Attribute(
                                                                        value=Name(id='mistletoe', ctx=Load()),
                                                                        attr='MarkdownNode',
                                                                        ctx=Load())],
                                                                keywords=[]),
                                                            body=[
                                                                Return(
                                                                    value=Call(
                                                                        func=Attribute(
                                                                            value=Name(id='self', ctx=Load()),
                                                                            attr='_markdown_hash',
                                                                            ctx=Load()),
                                                                        args=[
                                                                            Name(id='node', ctx=Load())],
                                                                        keywords=[]))],
                                                            orelse=[
                                                                If(
                                                                    test=Call(
                                                                        func=Name(id='isinstance', ctx=Load()),
                                                                        args=[
                                                                            Name(id='node', ctx=Load()),
                                                                            Attribute(
                                                                                value=Name(id='python', ctx=Load()),
                                                                                attr='Name',
                                                                                ctx=Load())],
                                                                        keywords=[]),
                                                                    body=[
                                                                        Return(
                                                                            value=Call(
                                                                                func=Name(id='hash', ctx=Load()),
                                                                                args=[
                                                                                    Tuple(
                                                                                        elts=[
                                                                                            Attribute(
                                                                                                value=Name(id='node', ctx=Load()),
                                                                                                attr='name',
                                                                                                ctx=Load()),
                                                                                            Attribute(
                                                                                                value=Name(id='node', ctx=Load()),
                                                                                                attr='full_name',
                                                                                                ctx=Load())],
                                                                                        ctx=Load())],
                                                                                keywords=[]))],
                                                                    orelse=[
                                                                        If(
                                                                            test=Call(
                                                                                func=Name(id='isinstance', ctx=Load()),
                                                                                args=[
                                                                                    Name(id='node', ctx=Load()),
                                                                                    Name(id='ListNode', ctx=Load())],
                                                                                keywords=[]),
                                                                            body=[
                                                                                Return(
                                                                                    value=Call(
                                                                                        func=Name(id='hash', ctx=Load()),
                                                                                        args=[
                                                                                            Call(
                                                                                                func=Name(id='type', ctx=Load()),
                                                                                                args=[
                                                                                                    Name(id='ListNode', ctx=Load())],
                                                                                                keywords=[])],
                                                                                        keywords=[]))],
                                                                            orelse=[
                                                                                If(
                                                                                    test=Call(
                                                                                        func=Name(id='isinstance', ctx=Load()),
                                                                                        args=[
                                                                                            Name(id='node', ctx=Load()),
                                                                                            Attribute(
                                                                                                value=Name(id='verbatim', ctx=Load()),
                                                                                                attr='Transcribed',
                                                                                                ctx=Load())],
                                                                                        keywords=[]),
                                                                                    body=[
                                                                                        Return(
                                                                                            value=Call(
                                                                                                func=Name(id='hash', ctx=Load()),
                                                                                                args=[
                                                                                                    Call(
                                                                                                        func=Name(id='type', ctx=Load()),
                                                                                                        args=[
                                                                                                            Attribute(
                                                                                                                value=Name(id='verbatim', ctx=Load()),
                                                                                                                attr='Transcribed',
                                                                                                                ctx=Load())],
                                                                                                        keywords=[])],
                                                                                                keywords=[]))],
                                                                                    orelse=[
                                                                                        If(
                                                                                            test=Call(
                                                                                                func=Name(id='isinstance', ctx=Load()),
                                                                                                args=[
                                                                                                    Name(id='node', ctx=Load()),
                                                                                                    Attribute(
                                                                                                        value=Name(id='verbatim', ctx=Load()),
                                                                                                        attr='Line',
                                                                                                        ctx=Load())],
                                                                                                keywords=[]),
                                                                                            body=[
                                                                                                Return(
                                                                                                    value=Call(
                                                                                                        func=Name(id='hash', ctx=Load()),
                                                                                                        args=[
                                                                                                            Call(
                                                                                                                func=Name(id='type', ctx=Load()),
                                                                                                                args=[
                                                                                                                    Attribute(
                                                                                                                        value=Name(id='verbatim', ctx=Load()),
                                                                                                                        attr='Line',
                                                                                                                        ctx=Load())],
                                                                                                                keywords=[])],
                                                                                                        keywords=[]))],
                                                                                            orelse=[
                                                                                                If(
                                                                                                    test=Call(
                                                                                                        func=Name(id='isinstance', ctx=Load()),
                                                                                                        args=[
                                                                                                            Name(id='node', ctx=Load()),
                                                                                                            Attribute(
                                                                                                                value=Name(id='verbatim', ctx=Load()),
                                                                                                                attr='Highlight',
                                                                                                                ctx=Load())],
                                                                                                        keywords=[]),
                                                                                                    body=[
                                                                                                        Return(
                                                                                                            value=Call(
                                                                                                                func=Name(id='hash', ctx=Load()),
                                                                                                                args=[
                                                                                                                    Call(
                                                                                                                        func=Name(id='tuple', ctx=Load()),
                                                                                                                        args=[
                                                                                                                            Attribute(
                                                                                                                                value=Name(id='node', ctx=Load()),
                                                                                                                                attr='highlights',
                                                                                                                                ctx=Load())],
                                                                                                                        keywords=[])],
                                                                                                                keywords=[]))],
                                                                                                    orelse=[
                                                                                                        If(
                                                                                                            test=Call(
                                                                                                                func=Name(id='isinstance', ctx=Load()),
                                                                                                                args=[
                                                                                                                    Name(id='node', ctx=Load()),
                                                                                                                    Attribute(
                                                                                                                        value=Name(id='verbatim', ctx=Load()),
                                                                                                                        attr='Text',
                                                                                                                        ctx=Load())],
                                                                                                                keywords=[]),
                                                                                                            body=[
                                                                                                                Return(
                                                                                                                    value=Call(
                                                                                                                        func=Name(id='hash', ctx=Load()),
                                                                                                                        args=[
                                                                                                                            Attribute(
                                                                                                                                value=Name(id='node', ctx=Load()),
                                                                                                                                attr='text',
                                                                                                                                ctx=Load())],
                                                                                                                        keywords=[]))],
                                                                                                            orelse=[])])])])])])])])])])]),
                        Raise(
                            exc=Call(
                                func=Name(id='NotImplementedError', ctx=Load()),
                                args=[
                                    JoinedStr(
                                        values=[
                                            Constant(value='shallow_hash('),
                                            FormattedValue(
                                                value=Call(
                                                    func=Name(id='type', ctx=Load()),
                                                    args=[
                                                        Name(id='node', ctx=Load())],
                                                    keywords=[]),
                                                conversion=-1),
                                            Constant(value=')')])],
                                keywords=[]))],
                    decorator_list=[],
                    returns=Name(id='int', ctx=Load()))],
            decorator_list=[]),
        ClassDef(
            name='_HardenVisitor',
            bases=[
                Name(id='Visitor', ctx=Load())],
            keywords=[],
            body=[
                AnnAssign(
                    target=Name(id='_stack', ctx=Store()),
                    annotation=Subscript(
                        value=Name(id='Final', ctx=Load()),
                        slice=Subscript(
                            value=Name(id='List', ctx=Load()),
                            slice=Name(id='Node', ctx=Load()),
                            ctx=Load()),
                        ctx=Load()),
                    simple=1),
                FunctionDef(
                    name='__init__',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='_stack',
                                    ctx=Store())],
                            value=List(elts=[], ctx=Load()))],
                    decorator_list=[],
                    returns=Constant(value=None)),
                FunctionDef(
                    name='enter',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self'),
                            arg(
                                arg='node',
                                annotation=Name(id='Node', ctx=Load()))],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        If(
                            test=UnaryOp(
                                op=Not(),
                                operand=Call(
                                    func=Name(id='isinstance', ctx=Load()),
                                    args=[
                                        Name(id='node', ctx=Load()),
                                        Attribute(
                                            value=Name(id='_DoccApply', ctx=Load()),
                                            attr='FlexNode',
                                            ctx=Load())],
                                    keywords=[])),
                            body=[
                                Expr(
                                    value=Call(
                                        func=Attribute(
                                            value=Attribute(
                                                value=Name(id='self', ctx=Load()),
                                                attr='_stack',
                                                ctx=Load()),
                                            attr='append',
                                            ctx=Load()),
                                        args=[
                                            Name(id='node', ctx=Load())],
                                        keywords=[])),
                                Return(
                                    value=Attribute(
                                        value=Name(id='Visit', ctx=Load()),
                                        attr='TraverseChildren',
                                        ctx=Load()))],
                            orelse=[]),
                        Assign(
                            targets=[
                                Name(id='flex', ctx=Store())],
                            value=Name(id='node', ctx=Load())),
                        Assign(
                            targets=[
                                Name(id='wrapped', ctx=Store())],
                            value=Attribute(
                                value=Name(id='flex', ctx=Load()),
                                attr='node',
                                ctx=Load())),
                        AnnAssign(
                            target=Name(id='new_node', ctx=Store()),
                            annotation=Name(id='Node', ctx=Load()),
                            simple=1),
                        If(
                            test=Call(
                                func=Name(id='isinstance', ctx=Load()),
                                args=[
                                    Name(id='wrapped', ctx=Load()),
                                    Attribute(
                                        value=Name(id='python', ctx=Load()),
                                        attr='PythonNode',
                                        ctx=Load())],
                                keywords=[]),
                            body=[
                                AnnAssign(
                                    target=Name(id='wrapped_py', ctx=Store()),
                                    annotation=Attribute(
                                        value=Name(id='python', ctx=Load()),
                                        attr='PythonNode',
                                        ctx=Load()),
                                    value=Name(id='wrapped', ctx=Load()),
                                    simple=1),
                                Assert(
                                    test=Call(
                                        func=Attribute(
                                            value=Name(id='dataclasses', ctx=Load()),
                                            attr='is_dataclass',
                                            ctx=Load()),
                                        args=[
                                            Name(id='wrapped_py', ctx=Load())],
                                        keywords=[])),
                                Assign(
                                    targets=[
                                        Name(id='arguments', ctx=Store())],
                                    value=Dict(keys=[], values=[])),
                                Assign(
                                    targets=[
                                        Name(id='offset', ctx=Store())],
                                    value=Constant(value=0)),
                                For(
                                    target=Name(id='field', ctx=Store()),
                                    iter=Call(
                                        func=Attribute(
                                            value=Name(id='dataclasses', ctx=Load()),
                                            attr='fields',
                                            ctx=Load()),
                                        args=[
                                            Name(id='wrapped_py', ctx=Load())],
                                        keywords=[]),
                                    body=[
                                        If(
                                            test=Compare(
                                                left=Attribute(
                                                    value=Name(id='field', ctx=Load()),
                                                    attr='type',
                                                    ctx=Load()),
                                                ops=[
                                                    Eq()],
                                                comparators=[
                                                    Name(id='Node', ctx=Load())]),
                                            body=[
                                                Assign(
                                                    targets=[
                                                        Name(id='value', ctx=Store())],
                                                    value=Subscript(
                                                        value=Attribute(
                                                            value=Name(id='flex', ctx=Load()),
                                                            attr='children',
                                                            ctx=Load()),
                                                        slice=Name(id='offset', ctx=Load()),
                                                        ctx=Load())),
                                                AugAssign(
                                                    target=Name(id='offset', ctx=Store()),
                                                    op=Add(),
                                                    value=Constant(value=1))],
                                            orelse=[
                                                Assign(
                                                    targets=[
                                                        Name(id='value', ctx=Store())],
                                                    value=Call(
                                                        func=Name(id='getattr', ctx=Load()),
                                                        args=[
                                                            Name(id='wrapped', ctx=Load()),
                                                            Attribute(
                                                                value=Name(id='field', ctx=Load()),
                                                                attr='name',
                                                                ctx=Load())],
                                                        keywords=[]))]),
                                        Assign(
                                            targets=[
                                                Subscript(
                                                    value=Name(id='arguments', ctx=Load()),
                                                    slice=Attribute(
                                                        value=Name(id='field', ctx=Load()),
                                                        attr='name',
                                                        ctx=Load()),
                                                    ctx=Store())],
                                            value=Name(id='value', ctx=Load()))],
                                    orelse=[]),
                                Assert(
                                    test=Compare(
                                        left=Name(id='offset', ctx=Load()),
                                        ops=[
                                            Eq()],
                                        comparators=[
                                            Call(
                                                func=Name(id='len', ctx=Load()),
                                                args=[
                                                    Attribute(
                                                        value=Name(id='flex', ctx=Load()),
                                                        attr='children',
                                                        ctx=Load())],
                                                keywords=[])])),
                                Assign(
                                    targets=[
                                        Name(id='new_node', ctx=Store())],
                                    value=Call(
                                        func=Call(
                                            func=Name(id='type', ctx=Load()),
                                            args=[
                                                Name(id='wrapped', ctx=Load())],
                                            keywords=[]),
                                        args=[],
                                        keywords=[
                                            keyword(
                                                value=Name(id='arguments', ctx=Load()))]))],
                            orelse=[
                                If(
                                    test=Call(
                                        func=Name(id='isinstance', ctx=Load()),
                                        args=[
                                            Name(id='wrapped', ctx=Load()),
                                            Name(id='Reference', ctx=Load())],
                                        keywords=[]),
                                    body=[
                                        Assert(
                                            test=Compare(
                                                left=Constant(value=1),
                                                ops=[
                                                    Eq()],
                                                comparators=[
                                                    Call(
                                                        func=Name(id='len', ctx=Load()),
                                                        args=[
                                                            Attribute(
                                                                value=Name(id='flex', ctx=Load()),
                                                                attr='children',
                                                                ctx=Load())],
                                                        keywords=[])])),
                                        Assign(
                                            targets=[
                                                Name(id='new_node', ctx=Store())],
                                            value=Call(
                                                func=Name(id='Reference', ctx=Load()),
                                                args=[],
                                                keywords=[
                                                    keyword(
                                                        arg='identifier',
                                                        value=Attribute(
                                                            value=Name(id='wrapped', ctx=Load()),
                                                            attr='identifier',
                                                            ctx=Load())),
                                                    keyword(
                                                        arg='child',
                                                        value=Subscript(
                                                            value=Attribute(
                                                                value=Name(id='flex', ctx=Load()),
                                                                attr='children',
                                                                ctx=Load()),
                                                            slice=Constant(value=0),
                                                            ctx=Load()))]))],
                                    orelse=[
                                        If(
                                            test=Call(
                                                func=Name(id='isinstance', ctx=Load()),
                                                args=[
                                                    Name(id='wrapped', ctx=Load()),
                                                    Name(id='Definition', ctx=Load())],
                                                keywords=[]),
                                            body=[
                                                Assert(
                                                    test=Compare(
                                                        left=Constant(value=1),
                                                        ops=[
                                                            Eq()],
                                                        comparators=[
                                                            Call(
                                                                func=Name(id='len', ctx=Load()),
                                                                args=[
                                                                    Attribute(
                                                                        value=Name(id='flex', ctx=Load()),
                                                                        attr='children',
                                                                        ctx=Load())],
                                                                keywords=[])])),
                                                Assign(
                                                    targets=[
                                                        Name(id='new_node', ctx=Store())],
                                                    value=Call(
                                                        func=Name(id='Definition', ctx=Load()),
                                                        args=[],
                                                        keywords=[
                                                            keyword(
                                                                arg='identifier',
                                                                value=Attribute(
                                                                    value=Name(id='wrapped', ctx=Load()),
                                                                    attr='identifier',
                                                                    ctx=Load())),
                                                            keyword(
                                                                arg='specifier',
                                                                value=Attribute(
                                                                    value=Name(id='wrapped', ctx=Load()),
                                                                    attr='specifier',
                                                                    ctx=Load())),
                                                            keyword(
                                                                arg='child',
                                                                value=Subscript(
                                                                    value=Attribute(
                                                                        value=Name(id='flex', ctx=Load()),
                                                                        attr='children',
                                                                        ctx=Load()),
                                                                    slice=Constant(value=0),
                                                                    ctx=Load()))]))],
                                            orelse=[
                                                If(
                                                    test=Call(
                                                        func=Name(id='isinstance', ctx=Load()),
                                                        args=[
                                                            Name(id='wrapped', ctx=Load()),
                                                            Name(id='ListNode', ctx=Load())],
                                                        keywords=[]),
                                                    body=[
                                                        Assign(
                                                            targets=[
                                                                Name(id='new_node', ctx=Store())],
                                                            value=Call(
                                                                func=Name(id='ListNode', ctx=Load()),
                                                                args=[
                                                                    Attribute(
                                                                        value=Name(id='flex', ctx=Load()),
                                                                        attr='children',
                                                                        ctx=Load())],
                                                                keywords=[]))],
                                                    orelse=[
                                                        If(
                                                            test=Call(
                                                                func=Name(id='isinstance', ctx=Load()),
                                                                args=[
                                                                    Name(id='wrapped', ctx=Load()),
                                                                    Attribute(
                                                                        value=Name(id='mistletoe', ctx=Load()),
                                                                        attr='MarkdownNode',
                                                                        ctx=Load())],
                                                                keywords=[]),
                                                            body=[
                                                                Assign(
                                                                    targets=[
                                                                        Name(id='new_node', ctx=Store())],
                                                                    value=Call(
                                                                        func=Attribute(
                                                                            value=Name(id='mistletoe', ctx=Load()),
                                                                            attr='MarkdownNode',
                                                                            ctx=Load()),
                                                                        args=[
                                                                            Attribute(
                                                                                value=Name(id='wrapped', ctx=Load()),
                                                                                attr='token',
                                                                                ctx=Load())],
                                                                        keywords=[])),
                                                                Assign(
                                                                    targets=[
                                                                        Attribute(
                                                                            value=Name(id='new_node', ctx=Load()),
                                                                            attr='_children',
                                                                            ctx=Store())],
                                                                    value=Call(
                                                                        func=Name(id='list', ctx=Load()),
                                                                        args=[
                                                                            Attribute(
                                                                                value=Name(id='flex', ctx=Load()),
                                                                                attr='children',
                                                                                ctx=Load())],
                                                                        keywords=[]))],
                                                            orelse=[
                                                                If(
                                                                    test=Call(
                                                                        func=Name(id='isinstance', ctx=Load()),
                                                                        args=[
                                                                            Name(id='wrapped', ctx=Load()),
                                                                            Attribute(
                                                                                value=Name(id='verbatim', ctx=Load()),
                                                                                attr='Transcribed',
                                                                                ctx=Load())],
                                                                        keywords=[]),
                                                                    body=[
                                                                        Assign(
                                                                            targets=[
                                                                                Name(id='new_node', ctx=Store())],
                                                                            value=Call(
                                                                                func=Attribute(
                                                                                    value=Name(id='verbatim', ctx=Load()),
                                                                                    attr='Transcribed',
                                                                                    ctx=Load()),
                                                                                args=[],
                                                                                keywords=[
                                                                                    keyword(
                                                                                        arg='_children',
                                                                                        value=Call(
                                                                                            func=Name(id='list', ctx=Load()),
                                                                                            args=[
                                                                                                Attribute(
                                                                                                    value=Name(id='flex', ctx=Load()),
                                                                                                    attr='children',
                                                                                                    ctx=Load())],
                                                                                            keywords=[]))]))],
                                                                    orelse=[
                                                                        If(
                                                                            test=Call(
                                                                                func=Name(id='isinstance', ctx=Load()),
                                                                                args=[
                                                                                    Name(id='wrapped', ctx=Load()),
                                                                                    Attribute(
                                                                                        value=Name(id='verbatim', ctx=Load()),
                                                                                        attr='Line',
                                                                                        ctx=Load())],
                                                                                keywords=[]),
                                                                            body=[
                                                                                Assign(
                                                                                    targets=[
                                                                                        Name(id='new_node', ctx=Store())],
                                                                                    value=Call(
                                                                                        func=Attribute(
                                                                                            value=Name(id='verbatim', ctx=Load()),
                                                                                            attr='Line',
                                                                                            ctx=Load()),
                                                                                        args=[],
                                                                                        keywords=[
                                                                                            keyword(
                                                                                                arg='number',
                                                                                                value=Attribute(
                                                                                                    value=Name(id='wrapped', ctx=Load()),
                                                                                                    attr='number',
                                                                                                    ctx=Load())),
                                                                                            keyword(
                                                                                                arg='_children',
                                                                                                value=Call(
                                                                                                    func=Name(id='list', ctx=Load()),
                                                                                                    args=[
                                                                                                        Attribute(
                                                                                                            value=Name(id='flex', ctx=Load()),
                                                                                                            attr='children',
                                                                                                            ctx=Load())],
                                                                                                    keywords=[]))]))],
                                                                            orelse=[
                                                                                If(
                                                                                    test=Call(
                                                                                        func=Name(id='isinstance', ctx=Load()),
                                                                                        args=[
                                                                                            Name(id='wrapped', ctx=Load()),
                                                                                            Attribute(
                                                                                                value=Name(id='verbatim', ctx=Load()),
                                                                                                attr='Highlight',
                                                                                                ctx=Load())],
                                                                                        keywords=[]),
                                                                                    body=[
                                                                                        Assign(
                                                                                            targets=[
                                                                                                Name(id='new_node', ctx=Store())],
                                                                                            value=Call(
                                                                                                func=Attribute(
                                                                                                    value=Name(id='verbatim', ctx=Load()),
                                                                                                    attr='Highlight',
                                                                                                    ctx=Load()),
                                                                                                args=[],
                                                                                                keywords=[
                                                                                                    keyword(
                                                                                                        arg='highlights',
                                                                                                        value=Call(
                                                                                                            func=Name(id='list', ctx=Load()),
                                                                                                            args=[
                                                                                                                Attribute(
                                                                                                                    value=Name(id='wrapped', ctx=Load()),
                                                                                                                    attr='highlights',
                                                                                                                    ctx=Load())],
                                                                                                            keywords=[])),
                                                                                                    keyword(
                                                                                                        arg='_children',
                                                                                                        value=Call(
                                                                                                            func=Name(id='list', ctx=Load()),
                                                                                                            args=[
                                                                                                                Attribute(
                                                                                                                    value=Name(id='flex', ctx=Load()),
                                                                                                                    attr='children',
                                                                                                                    ctx=Load())],
                                                                                                            keywords=[]))]))],
                                                                                    orelse=[
                                                                                        If(
                                                                                            test=Call(
                                                                                                func=Name(id='isinstance', ctx=Load()),
                                                                                                args=[
                                                                                                    Name(id='wrapped', ctx=Load()),
                                                                                                    Attribute(
                                                                                                        value=Name(id='verbatim', ctx=Load()),
                                                                                                        attr='Text',
                                                                                                        ctx=Load())],
                                                                                                keywords=[]),
                                                                                            body=[
                                                                                                Assign(
                                                                                                    targets=[
                                                                                                        Name(id='new_node', ctx=Store())],
                                                                                                    value=Call(
                                                                                                        func=Attribute(
                                                                                                            value=Name(id='verbatim', ctx=Load()),
                                                                                                            attr='Text',
                                                                                                            ctx=Load()),
                                                                                                        args=[],
                                                                                                        keywords=[
                                                                                                            keyword(
                                                                                                                arg='text',
                                                                                                                value=Attribute(
                                                                                                                    value=Name(id='wrapped', ctx=Load()),
                                                                                                                    attr='text',
                                                                                                                    ctx=Load()))]))],
                                                                                            orelse=[
                                                                                                Raise(
                                                                                                    exc=Call(
                                                                                                        func=Name(id='NotImplementedError', ctx=Load()),
                                                                                                        args=[
                                                                                                            JoinedStr(
                                                                                                                values=[
                                                                                                                    Constant(value='hardening '),
                                                                                                                    FormattedValue(
                                                                                                                        value=Call(
                                                                                                                            func=Name(id='type', ctx=Load()),
                                                                                                                            args=[
                                                                                                                                Name(id='wrapped', ctx=Load())],
                                                                                                                            keywords=[]),
                                                                                                                        conversion=-1)])],
                                                                                                        keywords=[]))])])])])])])])])]),
                        Expr(
                            value=Call(
                                func=Attribute(
                                    value=Attribute(
                                        value=Name(id='self', ctx=Load()),
                                        attr='_stack',
                                        ctx=Load()),
                                    attr='append',
                                    ctx=Load()),
                                args=[
                                    Name(id='new_node', ctx=Load())],
                                keywords=[])),
                        Try(
                            body=[
                                Assign(
                                    targets=[
                                        Name(id='parent', ctx=Store())],
                                    value=Subscript(
                                        value=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='_stack',
                                            ctx=Load()),
                                        slice=UnaryOp(
                                            op=USub(),
                                            operand=Constant(value=2)),
                                        ctx=Load()))],
                            handlers=[
                                ExceptHandler(
                                    type=Name(id='IndexError', ctx=Load()),
                                    body=[
                                        Return(
                                            value=Attribute(
                                                value=Name(id='Visit', ctx=Load()),
                                                attr='TraverseChildren',
                                                ctx=Load()))])],
                            orelse=[],
                            finalbody=[]),
                        Expr(
                            value=Call(
                                func=Attribute(
                                    value=Name(id='parent', ctx=Load()),
                                    attr='replace_child',
                                    ctx=Load()),
                                args=[
                                    Name(id='flex', ctx=Load()),
                                    Name(id='new_node', ctx=Load())],
                                keywords=[])),
                        Return(
                            value=Attribute(
                                value=Name(id='Visit', ctx=Load()),
                                attr='TraverseChildren',
                                ctx=Load()))],
                    decorator_list=[],
                    returns=Name(id='Visit', ctx=Load())),
                FunctionDef(
                    name='exit',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self'),
                            arg(
                                arg='node',
                                annotation=Name(id='Node', ctx=Load()))],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Expr(
                            value=Call(
                                func=Attribute(
                                    value=Attribute(
                                        value=Name(id='self', ctx=Load()),
                                        attr='_stack',
                                        ctx=Load()),
                                    attr='pop',
                                    ctx=Load()),
                                args=[],
                                keywords=[]))],
                    decorator_list=[],
                    returns=Constant(value=None))],
            decorator_list=[]),
        ClassDef(
            name='_DoccApply',
            bases=[
                Subscript(
                    value=Name(id='Apply', ctx=Load()),
                    slice=Name(id='Node', ctx=Load()),
                    ctx=Load())],
            keywords=[],
            body=[
                ClassDef(
                    name='ApplyNode',
                    bases=[
                        Name(id='Node', ctx=Load())],
                    keywords=[],
                    body=[
                        Assign(
                            targets=[
                                Name(id='__slots__', ctx=Store())],
                            value=Tuple(
                                elts=[
                                    Constant(value='children')],
                                ctx=Load())),
                        AnnAssign(
                            target=Name(id='children', ctx=Store()),
                            annotation=Subscript(
                                value=Name(id='List', ctx=Load()),
                                slice=Name(id='Node', ctx=Load()),
                                ctx=Load()),
                            simple=1),
                        FunctionDef(
                            name='__init__',
                            args=arguments(
                                posonlyargs=[],
                                args=[
                                    arg(arg='self')],
                                kwonlyargs=[],
                                kw_defaults=[],
                                defaults=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='children',
                                            ctx=Store())],
                                    value=List(elts=[], ctx=Load()))],
                            decorator_list=[],
                            returns=Constant(value=None)),
                        FunctionDef(
                            name='add',
                            args=arguments(
                                posonlyargs=[],
                                args=[
                                    arg(arg='self'),
                                    arg(
                                        arg='node',
                                        annotation=Name(id='Node', ctx=Load()))],
                                kwonlyargs=[],
                                kw_defaults=[],
                                defaults=[]),
                            body=[
                                Expr(
                                    value=Call(
                                        func=Attribute(
                                            value=Attribute(
                                                value=Name(id='self', ctx=Load()),
                                                attr='children',
                                                ctx=Load()),
                                            attr='append',
                                            ctx=Load()),
                                        args=[
                                            Name(id='node', ctx=Load())],
                                        keywords=[]))],
                            decorator_list=[],
                            returns=Constant(value=None)),
                        FunctionDef(
                            name='replace_child',
                            args=arguments(
                                posonlyargs=[],
                                args=[
                                    arg(arg='self'),
                                    arg(
                                        arg='old',
                                        annotation=Name(id='Node', ctx=Load())),
                                    arg(
                                        arg='new',
                                        annotation=Name(id='Node', ctx=Load()))],
                                kwonlyargs=[],
                                kw_defaults=[],
                                defaults=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='children',
                                            ctx=Store())],
                                    value=ListComp(
                                        elt=IfExp(
                                            test=Compare(
                                                left=Name(id='x', ctx=Load()),
                                                ops=[
                                                    Eq()],
                                                comparators=[
                                                    Name(id='old', ctx=Load())]),
                                            body=Name(id='new', ctx=Load()),
                                            orelse=Name(id='x', ctx=Load())),
                                        generators=[
                                            comprehension(
                                                target=Name(id='x', ctx=Store()),
                                                iter=Attribute(
                                                    value=Name(id='self', ctx=Load()),
                                                    attr='children',
                                                    ctx=Load()),
                                                ifs=[],
                                                is_async=0)]))],
                            decorator_list=[],
                            returns=Constant(value=None))],
                    decorator_list=[]),
                ClassDef(
                    name='FlexNode',
                    bases=[
                        Name(id='ApplyNode', ctx=Load())],
                    keywords=[],
                    body=[
                        Assign(
                            targets=[
                                Name(id='__slots__', ctx=Store())],
                            value=Tuple(
                                elts=[
                                    Constant(value='node')],
                                ctx=Load())),
                        AnnAssign(
                            target=Name(id='node', ctx=Store()),
                            annotation=Name(id='Node', ctx=Load()),
                            simple=1),
                        FunctionDef(
                            name='__init__',
                            args=arguments(
                                posonlyargs=[],
                                args=[
                                    arg(arg='self'),
                                    arg(
                                        arg='node',
                                        annotation=Name(id='Node', ctx=Load()))],
                                kwonlyargs=[],
                                kw_defaults=[],
                                defaults=[]),
                            body=[
                                Expr(
                                    value=Call(
                                        func=Attribute(
                                            value=Call(
                                                func=Name(id='super', ctx=Load()),
                                                args=[],
                                                keywords=[]),
                                            attr='__init__',
                                            ctx=Load()),
                                        args=[],
                                        keywords=[])),
                                Assign(
                                    targets=[
                                        Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='node',
                                            ctx=Store())],
                                    value=Name(id='node', ctx=Load()))],
                            decorator_list=[],
                            returns=Constant(value=None)),
                        FunctionDef(
                            name='__repr__',
                            args=arguments(
                                posonlyargs=[],
                                args=[
                                    arg(arg='self')],
                                kwonlyargs=[],
                                kw_defaults=[],
                                defaults=[]),
                            body=[
                                Return(
                                    value=JoinedStr(
                                        values=[
                                            Constant(value='FlexNode(node='),
                                            FormattedValue(
                                                value=Attribute(
                                                    value=Name(id='self', ctx=Load()),
                                                    attr='node',
                                                    ctx=Load()),
                                                conversion=114),
                                            Constant(value=', ...)')]))],
                            decorator_list=[],
                            returns=Name(id='str', ctx=Load()))],
                    decorator_list=[]),
                AnnAssign(
                    target=Name(id='SUPPORTS_BLOCKS', ctx=Store()),
                    annotation=Subscript(
                        value=Name(id='Final', ctx=Load()),
                        slice=Subscript(
                            value=Name(id='Tuple', ctx=Load()),
                            slice=Tuple(
                                elts=[
                                    Subscript(
                                        value=Name(id='Type', ctx=Load()),
                                        slice=Name(id='Node', ctx=Load()),
                                        ctx=Load()),
                                    Constant(value=Ellipsis)],
                                ctx=Load()),
                            ctx=Load()),
                        ctx=Load()),
                    value=Tuple(
                        elts=[
                            Name(id='ListNode', ctx=Load()),
                            Attribute(
                                value=Name(id='verbatim', ctx=Load()),
                                attr='Line',
                                ctx=Load()),
                            Attribute(
                                value=Name(id='verbatim', ctx=Load()),
                                attr='Transcribed',
                                ctx=Load()),
                            Attribute(
                                value=Name(id='verbatim', ctx=Load()),
                                attr='Fragment',
                                ctx=Load()),
                            Attribute(
                                value=Name(id='verbatim', ctx=Load()),
                                attr='Highlight',
                                ctx=Load()),
                            Attribute(
                                value=Name(id='verbatim', ctx=Load()),
                                attr='VerbatimNode',
                                ctx=Load()),
                            Attribute(
                                value=Name(id='html', ctx=Load()),
                                attr='HTMLTag',
                                ctx=Load()),
                            Attribute(
                                value=Name(id='html', ctx=Load()),
                                attr='HTMLRoot',
                                ctx=Load()),
                            Attribute(
                                value=Name(id='mistletoe', ctx=Load()),
                                attr='MarkdownNode',
                                ctx=Load())],
                        ctx=Load()),
                    simple=1),
                AnnAssign(
                    target=Name(id='before_name', ctx=Store()),
                    annotation=Subscript(
                        value=Name(id='Final', ctx=Load()),
                        slice=Name(id='str', ctx=Load()),
                        ctx=Load()),
                    simple=1),
                AnnAssign(
                    target=Name(id='after_name', ctx=Store()),
                    annotation=Subscript(
                        value=Name(id='Final', ctx=Load()),
                        slice=Name(id='str', ctx=Load()),
                        ctx=Load()),
                    simple=1),
                AnnAssign(
                    target=Name(id='stack', ctx=Store()),
                    annotation=Subscript(
                        value=Name(id='Final', ctx=Load()),
                        slice=Subscript(
                            value=Name(id='List', ctx=Load()),
                            slice=Name(id='ApplyNode', ctx=Load()),
                            ctx=Load()),
                        ctx=Load()),
                    simple=1),
                AnnAssign(
                    target=Name(id='root', ctx=Store()),
                    annotation=Name(id='ApplyNode', ctx=Load()),
                    simple=1),
                FunctionDef(
                    name='__init__',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self'),
                            arg(
                                arg='before_name',
                                annotation=Name(id='str', ctx=Load())),
                            arg(
                                arg='before',
                                annotation=Name(id='Node', ctx=Load())),
                            arg(
                                arg='after_name',
                                annotation=Name(id='str', ctx=Load())),
                            arg(
                                arg='after',
                                annotation=Name(id='Node', ctx=Load()))],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Expr(
                            value=Call(
                                func=Attribute(
                                    value=Call(
                                        func=Name(id='super', ctx=Load()),
                                        args=[],
                                        keywords=[]),
                                    attr='__init__',
                                    ctx=Load()),
                                args=[
                                    Call(
                                        func=Name(id='_DoccAdapter', ctx=Load()),
                                        args=[],
                                        keywords=[]),
                                    Name(id='before', ctx=Load()),
                                    Name(id='after', ctx=Load())],
                                keywords=[])),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='before_name',
                                    ctx=Store())],
                            value=Name(id='before_name', ctx=Load())),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='after_name',
                                    ctx=Store())],
                            value=Name(id='after_name', ctx=Load())),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='stack',
                                    ctx=Store())],
                            value=List(elts=[], ctx=Load())),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='root',
                                    ctx=Store())],
                            value=Call(
                                func=Attribute(
                                    value=Name(id='_DoccApply', ctx=Load()),
                                    attr='ApplyNode',
                                    ctx=Load()),
                                args=[],
                                keywords=[]))],
                    decorator_list=[],
                    returns=Constant(value=None)),
                FunctionDef(
                    name='apply',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self'),
                            arg(
                                arg='operations',
                                annotation=Subscript(
                                    value=Name(id='Iterable', ctx=Load()),
                                    slice=Name(id='Operation', ctx=Load()),
                                    ctx=Load()))],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Assert(
                            test=UnaryOp(
                                op=Not(),
                                operand=Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='stack',
                                    ctx=Load()))),
                        Expr(
                            value=Call(
                                func=Attribute(
                                    value=Attribute(
                                        value=Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='root',
                                            ctx=Load()),
                                        attr='children',
                                        ctx=Load()),
                                    attr='clear',
                                    ctx=Load()),
                                args=[],
                                keywords=[])),
                        Try(
                            body=[
                                Expr(
                                    value=Call(
                                        func=Attribute(
                                            value=Attribute(
                                                value=Name(id='self', ctx=Load()),
                                                attr='stack',
                                                ctx=Load()),
                                            attr='append',
                                            ctx=Load()),
                                        args=[
                                            Attribute(
                                                value=Name(id='self', ctx=Load()),
                                                attr='root',
                                                ctx=Load())],
                                        keywords=[])),
                                Expr(
                                    value=Call(
                                        func=Attribute(
                                            value=Call(
                                                func=Name(id='super', ctx=Load()),
                                                args=[],
                                                keywords=[]),
                                            attr='apply',
                                            ctx=Load()),
                                        args=[
                                            Name(id='operations', ctx=Load())],
                                        keywords=[]))],
                            handlers=[],
                            orelse=[],
                            finalbody=[
                                Expr(
                                    value=Call(
                                        func=Attribute(
                                            value=Attribute(
                                                value=Name(id='self', ctx=Load()),
                                                attr='stack',
                                                ctx=Load()),
                                            attr='clear',
                                            ctx=Load()),
                                        args=[],
                                        keywords=[]))])],
                    decorator_list=[],
                    returns=Constant(value=None)),
                FunctionDef(
                    name='replace',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self'),
                            arg(
                                arg='befores',
                                annotation=Subscript(
                                    value=Name(id='Sequence', ctx=Load()),
                                    slice=Name(id='Node', ctx=Load()),
                                    ctx=Load())),
                            arg(
                                arg='afters',
                                annotation=Subscript(
                                    value=Name(id='Sequence', ctx=Load()),
                                    slice=Name(id='Node', ctx=Load()),
                                    ctx=Load()))],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Assign(
                            targets=[
                                Name(id='parent', ctx=Store())],
                            value=Subscript(
                                value=Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='stack',
                                    ctx=Load()),
                                slice=UnaryOp(
                                    op=USub(),
                                    operand=Constant(value=1)),
                                ctx=Load())),
                        If(
                            test=Call(
                                func=Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='_supports_blocks',
                                    ctx=Load()),
                                args=[
                                    Name(id='parent', ctx=Load())],
                                keywords=[]),
                            body=[
                                Expr(
                                    value=Call(
                                        func=Attribute(
                                            value=Name(id='parent', ctx=Load()),
                                            attr='add',
                                            ctx=Load()),
                                        args=[
                                            Call(
                                                func=Name(id='DiffNode', ctx=Load()),
                                                args=[],
                                                keywords=[
                                                    keyword(
                                                        arg='before_name',
                                                        value=Attribute(
                                                            value=Name(id='self', ctx=Load()),
                                                            attr='before_name',
                                                            ctx=Load())),
                                                    keyword(
                                                        arg='before',
                                                        value=Call(
                                                            func=Name(id='BeforeNode', ctx=Load()),
                                                            args=[
                                                                Call(
                                                                    func=Name(id='ListNode', ctx=Load()),
                                                                    args=[
                                                                        Call(
                                                                            func=Name(id='list', ctx=Load()),
                                                                            args=[
                                                                                Name(id='befores', ctx=Load())],
                                                                            keywords=[])],
                                                                    keywords=[])],
                                                            keywords=[])),
                                                    keyword(
                                                        arg='after_name',
                                                        value=Attribute(
                                                            value=Name(id='self', ctx=Load()),
                                                            attr='after_name',
                                                            ctx=Load())),
                                                    keyword(
                                                        arg='after',
                                                        value=Call(
                                                            func=Name(id='AfterNode', ctx=Load()),
                                                            args=[
                                                                Call(
                                                                    func=Name(id='ListNode', ctx=Load()),
                                                                    args=[
                                                                        Call(
                                                                            func=Name(id='list', ctx=Load()),
                                                                            args=[
                                                                                Name(id='afters', ctx=Load())],
                                                                            keywords=[])],
                                                                    keywords=[])],
                                                            keywords=[]))])],
                                        keywords=[]))],
                            orelse=[
                                For(
                                    target=Tuple(
                                        elts=[
                                            Name(id='before', ctx=Store()),
                                            Name(id='after', ctx=Store())],
                                        ctx=Store()),
                                    iter=Call(
                                        func=Name(id='zip_longest', ctx=Load()),
                                        args=[
                                            Name(id='befores', ctx=Load()),
                                            Name(id='afters', ctx=Load())],
                                        keywords=[]),
                                    body=[
                                        Expr(
                                            value=Call(
                                                func=Attribute(
                                                    value=Name(id='parent', ctx=Load()),
                                                    attr='add',
                                                    ctx=Load()),
                                                args=[
                                                    Call(
                                                        func=Name(id='DiffNode', ctx=Load()),
                                                        args=[],
                                                        keywords=[
                                                            keyword(
                                                                arg='before_name',
                                                                value=Attribute(
                                                                    value=Name(id='self', ctx=Load()),
                                                                    attr='before_name',
                                                                    ctx=Load())),
                                                            keyword(
                                                                arg='before',
                                                                value=IfExp(
                                                                    test=Name(id='before', ctx=Load()),
                                                                    body=Call(
                                                                        func=Name(id='BeforeNode', ctx=Load()),
                                                                        args=[
                                                                            Name(id='before', ctx=Load())],
                                                                        keywords=[]),
                                                                    orelse=Call(
                                                                        func=Name(id='BlankNode', ctx=Load()),
                                                                        args=[],
                                                                        keywords=[]))),
                                                            keyword(
                                                                arg='after_name',
                                                                value=Attribute(
                                                                    value=Name(id='self', ctx=Load()),
                                                                    attr='after_name',
                                                                    ctx=Load())),
                                                            keyword(
                                                                arg='after',
                                                                value=IfExp(
                                                                    test=Name(id='after', ctx=Load()),
                                                                    body=Call(
                                                                        func=Name(id='AfterNode', ctx=Load()),
                                                                        args=[
                                                                            Name(id='after', ctx=Load())],
                                                                        keywords=[]),
                                                                    orelse=Call(
                                                                        func=Name(id='BlankNode', ctx=Load()),
                                                                        args=[],
                                                                        keywords=[])))])],
                                                keywords=[]))],
                                    orelse=[])])],
                    decorator_list=[],
                    returns=Constant(value=None)),
                FunctionDef(
                    name='delete',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self'),
                            arg(
                                arg='befores',
                                annotation=Subscript(
                                    value=Name(id='Sequence', ctx=Load()),
                                    slice=Name(id='Node', ctx=Load()),
                                    ctx=Load()))],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Assign(
                            targets=[
                                Name(id='parent', ctx=Store())],
                            value=Subscript(
                                value=Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='stack',
                                    ctx=Load()),
                                slice=UnaryOp(
                                    op=USub(),
                                    operand=Constant(value=1)),
                                ctx=Load())),
                        If(
                            test=Call(
                                func=Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='_supports_blocks',
                                    ctx=Load()),
                                args=[
                                    Name(id='parent', ctx=Load())],
                                keywords=[]),
                            body=[
                                Expr(
                                    value=Call(
                                        func=Attribute(
                                            value=Name(id='parent', ctx=Load()),
                                            attr='add',
                                            ctx=Load()),
                                        args=[
                                            Call(
                                                func=Name(id='DiffNode', ctx=Load()),
                                                args=[],
                                                keywords=[
                                                    keyword(
                                                        arg='before_name',
                                                        value=Attribute(
                                                            value=Name(id='self', ctx=Load()),
                                                            attr='before_name',
                                                            ctx=Load())),
                                                    keyword(
                                                        arg='before',
                                                        value=Call(
                                                            func=Name(id='BeforeNode', ctx=Load()),
                                                            args=[
                                                                Call(
                                                                    func=Name(id='ListNode', ctx=Load()),
                                                                    args=[
                                                                        Call(
                                                                            func=Name(id='list', ctx=Load()),
                                                                            args=[
                                                                                Name(id='befores', ctx=Load())],
                                                                            keywords=[])],
                                                                    keywords=[])],
                                                            keywords=[])),
                                                    keyword(
                                                        arg='after_name',
                                                        value=Attribute(
                                                            value=Name(id='self', ctx=Load()),
                                                            attr='after_name',
                                                            ctx=Load())),
                                                    keyword(
                                                        arg='after',
                                                        value=Call(
                                                            func=Name(id='BlankNode', ctx=Load()),
                                                            args=[],
                                                            keywords=[]))])],
                                        keywords=[]))],
                            orelse=[
                                For(
                                    target=Name(id='before', ctx=Store()),
                                    iter=Name(id='befores', ctx=Load()),
                                    body=[
                                        Expr(
                                            value=Call(
                                                func=Attribute(
                                                    value=Name(id='parent', ctx=Load()),
                                                    attr='add',
                                                    ctx=Load()),
                                                args=[
                                                    Call(
                                                        func=Name(id='DiffNode', ctx=Load()),
                                                        args=[],
                                                        keywords=[
                                                            keyword(
                                                                arg='before_name',
                                                                value=Attribute(
                                                                    value=Name(id='self', ctx=Load()),
                                                                    attr='before_name',
                                                                    ctx=Load())),
                                                            keyword(
                                                                arg='before',
                                                                value=Call(
                                                                    func=Name(id='BeforeNode', ctx=Load()),
                                                                    args=[
                                                                        Name(id='before', ctx=Load())],
                                                                    keywords=[])),
                                                            keyword(
                                                                arg='after_name',
                                                                value=Attribute(
                                                                    value=Name(id='self', ctx=Load()),
                                                                    attr='after_name',
                                                                    ctx=Load())),
                                                            keyword(
                                                                arg='after',
                                                                value=Call(
                                                                    func=Name(id='BlankNode', ctx=Load()),
                                                                    args=[],
                                                                    keywords=[]))])],
                                                keywords=[]))],
                                    orelse=[])])],
                    decorator_list=[],
                    returns=Constant(value=None)),
                FunctionDef(
                    name='insert',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self'),
                            arg(
                                arg='afters',
                                annotation=Subscript(
                                    value=Name(id='Sequence', ctx=Load()),
                                    slice=Name(id='Node', ctx=Load()),
                                    ctx=Load()))],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Assign(
                            targets=[
                                Name(id='parent', ctx=Store())],
                            value=Subscript(
                                value=Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='stack',
                                    ctx=Load()),
                                slice=UnaryOp(
                                    op=USub(),
                                    operand=Constant(value=1)),
                                ctx=Load())),
                        If(
                            test=Call(
                                func=Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='_supports_blocks',
                                    ctx=Load()),
                                args=[
                                    Name(id='parent', ctx=Load())],
                                keywords=[]),
                            body=[
                                Expr(
                                    value=Call(
                                        func=Attribute(
                                            value=Name(id='parent', ctx=Load()),
                                            attr='add',
                                            ctx=Load()),
                                        args=[
                                            Call(
                                                func=Name(id='DiffNode', ctx=Load()),
                                                args=[],
                                                keywords=[
                                                    keyword(
                                                        arg='before_name',
                                                        value=Attribute(
                                                            value=Name(id='self', ctx=Load()),
                                                            attr='before_name',
                                                            ctx=Load())),
                                                    keyword(
                                                        arg='before',
                                                        value=Call(
                                                            func=Name(id='BlankNode', ctx=Load()),
                                                            args=[],
                                                            keywords=[])),
                                                    keyword(
                                                        arg='after_name',
                                                        value=Attribute(
                                                            value=Name(id='self', ctx=Load()),
                                                            attr='after_name',
                                                            ctx=Load())),
                                                    keyword(
                                                        arg='after',
                                                        value=Call(
                                                            func=Name(id='AfterNode', ctx=Load()),
                                                            args=[
                                                                Call(
                                                                    func=Name(id='ListNode', ctx=Load()),
                                                                    args=[
                                                                        Call(
                                                                            func=Name(id='list', ctx=Load()),
                                                                            args=[
                                                                                Name(id='afters', ctx=Load())],
                                                                            keywords=[])],
                                                                    keywords=[])],
                                                            keywords=[]))])],
                                        keywords=[]))],
                            orelse=[
                                For(
                                    target=Name(id='after', ctx=Store()),
                                    iter=Name(id='afters', ctx=Load()),
                                    body=[
                                        Expr(
                                            value=Call(
                                                func=Attribute(
                                                    value=Name(id='parent', ctx=Load()),
                                                    attr='add',
                                                    ctx=Load()),
                                                args=[
                                                    Call(
                                                        func=Name(id='DiffNode', ctx=Load()),
                                                        args=[],
                                                        keywords=[
                                                            keyword(
                                                                arg='before_name',
                                                                value=Attribute(
                                                                    value=Name(id='self', ctx=Load()),
                                                                    attr='before_name',
                                                                    ctx=Load())),
                                                            keyword(
                                                                arg='before',
                                                                value=Call(
                                                                    func=Name(id='BlankNode', ctx=Load()),
                                                                    args=[],
                                                                    keywords=[])),
                                                            keyword(
                                                                arg='after_name',
                                                                value=Attribute(
                                                                    value=Name(id='self', ctx=Load()),
                                                                    attr='after_name',
                                                                    ctx=Load())),
                                                            keyword(
                                                                arg='after',
                                                                value=Call(
                                                                    func=Name(id='AfterNode', ctx=Load()),
                                                                    args=[
                                                                        Name(id='after', ctx=Load())],
                                                                    keywords=[]))])],
                                                keywords=[]))],
                                    orelse=[])])],
                    decorator_list=[],
                    returns=Constant(value=None)),
                FunctionDef(
                    name='equal',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self'),
                            arg(
                                arg='before',
                                annotation=Subscript(
                                    value=Name(id='Sequence', ctx=Load()),
                                    slice=Name(id='Node', ctx=Load()),
                                    ctx=Load())),
                            arg(
                                arg='after',
                                annotation=Subscript(
                                    value=Name(id='Sequence', ctx=Load()),
                                    slice=Name(id='Node', ctx=Load()),
                                    ctx=Load()))],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Assign(
                            targets=[
                                Name(id='parent', ctx=Store())],
                            value=Subscript(
                                value=Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='stack',
                                    ctx=Load()),
                                slice=UnaryOp(
                                    op=USub(),
                                    operand=Constant(value=1)),
                                ctx=Load())),
                        For(
                            target=Name(id='node', ctx=Store()),
                            iter=Name(id='after', ctx=Load()),
                            body=[
                                Expr(
                                    value=Call(
                                        func=Attribute(
                                            value=Name(id='parent', ctx=Load()),
                                            attr='add',
                                            ctx=Load()),
                                        args=[
                                            Name(id='node', ctx=Load())],
                                        keywords=[]))],
                            orelse=[])],
                    decorator_list=[],
                    returns=Constant(value=None)),
                FunctionDef(
                    name='descend',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self'),
                            arg(
                                arg='before',
                                annotation=Name(id='Node', ctx=Load())),
                            arg(
                                arg='after',
                                annotation=Name(id='Node', ctx=Load()))],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Assign(
                            targets=[
                                Name(id='parent', ctx=Store())],
                            value=Subscript(
                                value=Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='stack',
                                    ctx=Load()),
                                slice=UnaryOp(
                                    op=USub(),
                                    operand=Constant(value=1)),
                                ctx=Load())),
                        Assign(
                            targets=[
                                Name(id='node', ctx=Store())],
                            value=Call(
                                func=Attribute(
                                    value=Name(id='_DoccApply', ctx=Load()),
                                    attr='FlexNode',
                                    ctx=Load()),
                                args=[
                                    Name(id='after', ctx=Load())],
                                keywords=[])),
                        Expr(
                            value=Call(
                                func=Attribute(
                                    value=Name(id='parent', ctx=Load()),
                                    attr='add',
                                    ctx=Load()),
                                args=[
                                    Name(id='node', ctx=Load())],
                                keywords=[])),
                        Expr(
                            value=Call(
                                func=Attribute(
                                    value=Attribute(
                                        value=Name(id='self', ctx=Load()),
                                        attr='stack',
                                        ctx=Load()),
                                    attr='append',
                                    ctx=Load()),
                                args=[
                                    Name(id='node', ctx=Load())],
                                keywords=[]))],
                    decorator_list=[],
                    returns=Constant(value=None)),
                FunctionDef(
                    name='ascend',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Expr(
                            value=Call(
                                func=Attribute(
                                    value=Attribute(
                                        value=Name(id='self', ctx=Load()),
                                        attr='stack',
                                        ctx=Load()),
                                    attr='pop',
                                    ctx=Load()),
                                args=[],
                                keywords=[]))],
                    decorator_list=[],
                    returns=Constant(value=None)),
                FunctionDef(
                    name='output',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Assert(
                            test=Compare(
                                left=Constant(value=1),
                                ops=[
                                    Eq()],
                                comparators=[
                                    Call(
                                        func=Name(id='len', ctx=Load()),
                                        args=[
                                            Attribute(
                                                value=Attribute(
                                                    value=Name(id='self', ctx=Load()),
                                                    attr='root',
                                                    ctx=Load()),
                                                attr='children',
                                                ctx=Load())],
                                        keywords=[])])),
                        Return(
                            value=Subscript(
                                value=Attribute(
                                    value=Attribute(
                                        value=Name(id='self', ctx=Load()),
                                        attr='root',
                                        ctx=Load()),
                                    attr='children',
                                    ctx=Load()),
                                slice=Constant(value=0),
                                ctx=Load()))],
                    decorator_list=[],
                    returns=Name(id='Node', ctx=Load())),
                FunctionDef(
                    name='_supports_blocks',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(
                                arg='cls',
                                annotation=Subscript(
                                    value=Name(id='Type', ctx=Load()),
                                    slice=Constant(value='_DoccApply'),
                                    ctx=Load())),
                            arg(
                                arg='node',
                                annotation=Name(id='Node', ctx=Load()))],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Assign(
                            targets=[
                                Name(id='candidate', ctx=Store())],
                            value=Name(id='node', ctx=Load())),
                        If(
                            test=Call(
                                func=Name(id='isinstance', ctx=Load()),
                                args=[
                                    Name(id='node', ctx=Load()),
                                    Attribute(
                                        value=Name(id='cls', ctx=Load()),
                                        attr='FlexNode',
                                        ctx=Load())],
                                keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Name(id='candidate', ctx=Store())],
                                    value=Attribute(
                                        value=Name(id='node', ctx=Load()),
                                        attr='node',
                                        ctx=Load()))],
                            orelse=[]),
                        Return(
                            value=Call(
                                func=Name(id='isinstance', ctx=Load()),
                                args=[
                                    Name(id='candidate', ctx=Load()),
                                    Attribute(
                                        value=Name(id='cls', ctx=Load()),
                                        attr='SUPPORTS_BLOCKS',
                                        ctx=Load())],
                                keywords=[]))],
                    decorator_list=[
                        Name(id='classmethod', ctx=Load())],
                    returns=Name(id='bool', ctx=Load()))],
            decorator_list=[]),
        ClassDef(
            name='MinimizeDiffsTransform',
            bases=[
                Name(id='Transform', ctx=Load())],
            keywords=[],
            body=[
                Expr(
                    value=Constant(value='\n    Move `DiffNode` nodes as far down the tree as reasonably possible.\n    ')),
                FunctionDef(
                    name='__init__',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self'),
                            arg(
                                arg='settings',
                                annotation=Name(id='PluginSettings', ctx=Load()))],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Pass()],
                    decorator_list=[],
                    returns=Constant(value=None)),
                FunctionDef(
                    name='transform',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self'),
                            arg(
                                arg='context',
                                annotation=Name(id='Context', ctx=Load()))],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Expr(
                            value=Constant(value='\n        Apply the transformation to the given document.\n        ')),
                        Assign(
                            targets=[
                                Name(id='visitor', ctx=Store())],
                            value=Call(
                                func=Name(id='_MinimizeDiffsVisitor', ctx=Load()),
                                args=[],
                                keywords=[])),
                        Expr(
                            value=Call(
                                func=Attribute(
                                    value=Attribute(
                                        value=Subscript(
                                            value=Name(id='context', ctx=Load()),
                                            slice=Name(id='Document', ctx=Load()),
                                            ctx=Load()),
                                        attr='root',
                                        ctx=Load()),
                                    attr='visit',
                                    ctx=Load()),
                                args=[
                                    Name(id='visitor', ctx=Load())],
                                keywords=[])),
                        Assert(
                            test=Compare(
                                left=Attribute(
                                    value=Name(id='visitor', ctx=Load()),
                                    attr='root',
                                    ctx=Load()),
                                ops=[
                                    IsNot()],
                                comparators=[
                                    Constant(value=None)])),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Subscript(
                                        value=Name(id='context', ctx=Load()),
                                        slice=Name(id='Document', ctx=Load()),
                                        ctx=Load()),
                                    attr='root',
                                    ctx=Store())],
                            value=Attribute(
                                value=Name(id='visitor', ctx=Load()),
                                attr='root',
                                ctx=Load()))],
                    decorator_list=[],
                    returns=Constant(value=None))],
            decorator_list=[]),
        ClassDef(
            name='_MinimizeDiffsVisitor',
            bases=[
                Name(id='Visitor', ctx=Load())],
            keywords=[],
            body=[
                AnnAssign(
                    target=Name(id='root', ctx=Store()),
                    annotation=Subscript(
                        value=Name(id='Optional', ctx=Load()),
                        slice=Name(id='Node', ctx=Load()),
                        ctx=Load()),
                    simple=1),
                AnnAssign(
                    target=Name(id='_stack', ctx=Store()),
                    annotation=Subscript(
                        value=Name(id='Final', ctx=Load()),
                        slice=Subscript(
                            value=Name(id='List', ctx=Load()),
                            slice=Name(id='Node', ctx=Load()),
                            ctx=Load()),
                        ctx=Load()),
                    simple=1),
                FunctionDef(
                    name='__init__',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self')],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='_stack',
                                    ctx=Store())],
                            value=List(elts=[], ctx=Load())),
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='root',
                                    ctx=Store())],
                            value=Constant(value=None))],
                    decorator_list=[],
                    returns=Constant(value=None)),
                FunctionDef(
                    name='enter',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self'),
                            arg(
                                arg='node',
                                annotation=Name(id='Node', ctx=Load()))],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Expr(
                            value=Call(
                                func=Attribute(
                                    value=Attribute(
                                        value=Name(id='self', ctx=Load()),
                                        attr='_stack',
                                        ctx=Load()),
                                    attr='append',
                                    ctx=Load()),
                                args=[
                                    Name(id='node', ctx=Load())],
                                keywords=[])),
                        If(
                            test=Compare(
                                left=Attribute(
                                    value=Name(id='self', ctx=Load()),
                                    attr='root',
                                    ctx=Load()),
                                ops=[
                                    Is()],
                                comparators=[
                                    Constant(value=None)]),
                            body=[
                                Assign(
                                    targets=[
                                        Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='root',
                                            ctx=Store())],
                                    value=Name(id='node', ctx=Load()))],
                            orelse=[]),
                        If(
                            test=UnaryOp(
                                op=Not(),
                                operand=Call(
                                    func=Name(id='isinstance', ctx=Load()),
                                    args=[
                                        Name(id='node', ctx=Load()),
                                        Name(id='DiffNode', ctx=Load())],
                                    keywords=[])),
                            body=[
                                Return(
                                    value=Attribute(
                                        value=Name(id='Visit', ctx=Load()),
                                        attr='TraverseChildren',
                                        ctx=Load()))],
                            orelse=[]),
                        Assign(
                            targets=[
                                Name(id='before', ctx=Store())],
                            value=Attribute(
                                value=Name(id='node', ctx=Load()),
                                attr='before',
                                ctx=Load())),
                        Assign(
                            targets=[
                                Name(id='after', ctx=Store())],
                            value=Attribute(
                                value=Name(id='node', ctx=Load()),
                                attr='after',
                                ctx=Load())),
                        If(
                            test=Name(id='before', ctx=Load()),
                            body=[
                                Assert(
                                    test=Call(
                                        func=Name(id='isinstance', ctx=Load()),
                                        args=[
                                            Name(id='before', ctx=Load()),
                                            Name(id='BeforeNode', ctx=Load())],
                                        keywords=[])),
                                Assign(
                                    targets=[
                                        Name(id='before', ctx=Store())],
                                    value=Attribute(
                                        value=Name(id='before', ctx=Load()),
                                        attr='child',
                                        ctx=Load()))],
                            orelse=[]),
                        If(
                            test=Name(id='after', ctx=Load()),
                            body=[
                                Assert(
                                    test=Call(
                                        func=Name(id='isinstance', ctx=Load()),
                                        args=[
                                            Name(id='after', ctx=Load()),
                                            Name(id='AfterNode', ctx=Load())],
                                        keywords=[])),
                                Assign(
                                    targets=[
                                        Name(id='after', ctx=Store())],
                                    value=Attribute(
                                        value=Name(id='after', ctx=Load()),
                                        attr='child',
                                        ctx=Load()))],
                            orelse=[]),
                        Assign(
                            targets=[
                                Name(id='adapter', ctx=Store())],
                            value=Call(
                                func=Name(id='_DoccAdapter', ctx=Load()),
                                args=[],
                                keywords=[])),
                        Assign(
                            targets=[
                                Name(id='matcher', ctx=Store())],
                            value=Call(
                                func=Name(id='TreeMatcher', ctx=Load()),
                                args=[
                                    Name(id='adapter', ctx=Load()),
                                    Name(id='before', ctx=Load()),
                                    Name(id='after', ctx=Load())],
                                keywords=[])),
                        Assign(
                            targets=[
                                Name(id='operations', ctx=Store())],
                            value=Call(
                                func=Attribute(
                                    value=Name(id='matcher', ctx=Load()),
                                    attr='compute_operations',
                                    ctx=Load()),
                                args=[],
                                keywords=[])),
                        Assign(
                            targets=[
                                Name(id='apply', ctx=Store())],
                            value=Call(
                                func=Name(id='_DoccApply', ctx=Load()),
                                args=[
                                    Attribute(
                                        value=Name(id='node', ctx=Load()),
                                        attr='before_name',
                                        ctx=Load()),
                                    Name(id='before', ctx=Load()),
                                    Attribute(
                                        value=Name(id='node', ctx=Load()),
                                        attr='after_name',
                                        ctx=Load()),
                                    Name(id='after', ctx=Load())],
                                keywords=[])),
                        Expr(
                            value=Call(
                                func=Attribute(
                                    value=Name(id='apply', ctx=Load()),
                                    attr='apply',
                                    ctx=Load()),
                                args=[
                                    Name(id='operations', ctx=Load())],
                                keywords=[])),
                        Expr(
                            value=Call(
                                func=Attribute(
                                    value=Attribute(
                                        value=Name(id='apply', ctx=Load()),
                                        attr='root',
                                        ctx=Load()),
                                    attr='visit',
                                    ctx=Load()),
                                args=[
                                    Call(
                                        func=Name(id='_HardenVisitor', ctx=Load()),
                                        args=[],
                                        keywords=[])],
                                keywords=[])),
                        Assign(
                            targets=[
                                Name(id='output', ctx=Store())],
                            value=Call(
                                func=Attribute(
                                    value=Name(id='apply', ctx=Load()),
                                    attr='output',
                                    ctx=Load()),
                                args=[],
                                keywords=[])),
                        If(
                            test=Compare(
                                left=Constant(value=1),
                                ops=[
                                    Eq()],
                                comparators=[
                                    Call(
                                        func=Name(id='len', ctx=Load()),
                                        args=[
                                            Attribute(
                                                value=Name(id='self', ctx=Load()),
                                                attr='_stack',
                                                ctx=Load())],
                                        keywords=[])]),
                            body=[
                                Assign(
                                    targets=[
                                        Subscript(
                                            value=Attribute(
                                                value=Name(id='self', ctx=Load()),
                                                attr='_stack',
                                                ctx=Load()),
                                            slice=Constant(value=0),
                                            ctx=Store())],
                                    value=Name(id='output', ctx=Load())),
                                Assign(
                                    targets=[
                                        Attribute(
                                            value=Name(id='self', ctx=Load()),
                                            attr='root',
                                            ctx=Store())],
                                    value=Name(id='output', ctx=Load()))],
                            orelse=[
                                Expr(
                                    value=Call(
                                        func=Attribute(
                                            value=Subscript(
                                                value=Attribute(
                                                    value=Name(id='self', ctx=Load()),
                                                    attr='_stack',
                                                    ctx=Load()),
                                                slice=UnaryOp(
                                                    op=USub(),
                                                    operand=Constant(value=2)),
                                                ctx=Load()),
                                            attr='replace_child',
                                            ctx=Load()),
                                        args=[
                                            Name(id='node', ctx=Load()),
                                            Name(id='output', ctx=Load())],
                                        keywords=[])),
                                Assign(
                                    targets=[
                                        Subscript(
                                            value=Attribute(
                                                value=Name(id='self', ctx=Load()),
                                                attr='_stack',
                                                ctx=Load()),
                                            slice=UnaryOp(
                                                op=USub(),
                                                operand=Constant(value=1)),
                                            ctx=Store())],
                                    value=Name(id='output', ctx=Load()))]),
                        Return(
                            value=Attribute(
                                value=Name(id='Visit', ctx=Load()),
                                attr='SkipChildren',
                                ctx=Load()))],
                    decorator_list=[],
                    returns=Name(id='Visit', ctx=Load())),
                FunctionDef(
                    name='exit',
                    args=arguments(
                        posonlyargs=[],
                        args=[
                            arg(arg='self'),
                            arg(
                                arg='node',
                                annotation=Name(id='Node', ctx=Load()))],
                        kwonlyargs=[],
                        kw_defaults=[],
                        defaults=[]),
                    body=[
                        Expr(
                            value=Call(
                                func=Attribute(
                                    value=Attribute(
                                        value=Name(id='self', ctx=Load()),
                                        attr='_stack',
                                        ctx=Load()),
                                    attr='pop',
                                    ctx=Load()),
                                args=[],
                                keywords=[]))],
                    decorator_list=[],
                    returns=Constant(value=None))],
            decorator_list=[]),
        FunctionDef(
            name='render_diff',
            args=arguments(
                posonlyargs=[],
                args=[
                    arg(
                        arg='context',
                        annotation=Name(id='object', ctx=Load())),
                    arg(
                        arg='parent',
                        annotation=Name(id='object', ctx=Load())),
                    arg(
                        arg='diff',
                        annotation=Name(id='object', ctx=Load()))],
                kwonlyargs=[],
                kw_defaults=[],
                defaults=[]),
            body=[
                Expr(
                    value=Constant(value='\n    Render a DiffNode.\n    ')),
                Assert(
                    test=Call(
                        func=Name(id='isinstance', ctx=Load()),
                        args=[
                            Name(id='diff', ctx=Load()),
                            Name(id='DiffNode', ctx=Load())],
                        keywords=[])),
                Assert(
                    test=Call(
                        func=Name(id='isinstance', ctx=Load()),
                        args=[
                            Name(id='parent', ctx=Load()),
                            Tuple(
                                elts=[
                                    Attribute(
                                        value=Name(id='html', ctx=Load()),
                                        attr='HTMLTag',
                                        ctx=Load()),
                                    Attribute(
                                        value=Name(id='html', ctx=Load()),
                                        attr='HTMLRoot',
                                        ctx=Load())],
                                ctx=Load())],
                        keywords=[])),
                AnnAssign(
                    target=Name(id='parent_', ctx=Store()),
                    annotation=Subscript(
                        value=Name(id='Union', ctx=Load()),
                        slice=Tuple(
                            elts=[
                                Attribute(
                                    value=Name(id='html', ctx=Load()),
                                    attr='HTMLTag',
                                    ctx=Load()),
                                Attribute(
                                    value=Name(id='html', ctx=Load()),
                                    attr='HTMLRoot',
                                    ctx=Load())],
                            ctx=Load()),
                        ctx=Load()),
                    value=Name(id='parent', ctx=Load()),
                    simple=1),
                If(
                    test=BoolOp(
                        op=And(),
                        values=[
                            Call(
                                func=Name(id='isinstance', ctx=Load()),
                                args=[
                                    Name(id='parent_', ctx=Load()),
                                    Attribute(
                                        value=Name(id='html', ctx=Load()),
                                        attr='HTMLTag',
                                        ctx=Load())],
                                keywords=[]),
                            Compare(
                                left=Attribute(
                                    value=Name(id='parent_', ctx=Load()),
                                    attr='tag_name',
                                    ctx=Load()),
                                ops=[
                                    Eq()],
                                comparators=[
                                    Constant(value='table')])]),
                    body=[
                        Assign(
                            targets=[
                                Name(id='tag', ctx=Store())],
                            value=Call(
                                func=Attribute(
                                    value=Name(id='html', ctx=Load()),
                                    attr='HTMLTag',
                                    ctx=Load()),
                                args=[
                                    Constant(value='tbody'),
                                    Dict(
                                        keys=[
                                            Constant(value='class')],
                                        values=[
                                            Constant(value='diff')])],
                                keywords=[]))],
                    orelse=[
                        Return(
                            value=Name(id='parent_', ctx=Load()))]),
                Expr(
                    value=Call(
                        func=Attribute(
                            value=Name(id='parent_', ctx=Load()),
                            attr='append',
                            ctx=Load()),
                        args=[
                            Name(id='tag', ctx=Load())],
                        keywords=[])),
                Return(
                    value=Name(id='tag', ctx=Load()))],
            decorator_list=[],
            returns=Attribute(
                value=Name(id='html', ctx=Load()),
                attr='RenderResult',
                ctx=Load())),
        FunctionDef(
            name='render_before_after',
            args=arguments(
                posonlyargs=[],
                args=[
                    arg(
                        arg='context',
                        annotation=Name(id='object', ctx=Load())),
                    arg(
                        arg='parent',
                        annotation=Name(id='object', ctx=Load())),
                    arg(
                        arg='node_',
                        annotation=Name(id='object', ctx=Load()))],
                kwonlyargs=[],
                kw_defaults=[],
                defaults=[]),
            body=[
                Expr(
                    value=Constant(value='\n    Render a BeforeNode or an AfterNode.\n    ')),
                Assert(
                    test=Call(
                        func=Name(id='isinstance', ctx=Load()),
                        args=[
                            Name(id='node_', ctx=Load()),
                            Tuple(
                                elts=[
                                    Name(id='BeforeNode', ctx=Load()),
                                    Name(id='AfterNode', ctx=Load())],
                                ctx=Load())],
                        keywords=[])),
                Assert(
                    test=Call(
                        func=Name(id='isinstance', ctx=Load()),
                        args=[
                            Name(id='parent', ctx=Load()),
                            Tuple(
                                elts=[
                                    Attribute(
                                        value=Name(id='html', ctx=Load()),
                                        attr='HTMLTag',
                                        ctx=Load()),
                                    Attribute(
                                        value=Name(id='html', ctx=Load()),
                                        attr='HTMLRoot',
                                        ctx=Load())],
                                ctx=Load())],
                        keywords=[])),
                Assert(
                    test=Call(
                        func=Name(id='isinstance', ctx=Load()),
                        args=[
                            Name(id='context', ctx=Load()),
                            Name(id='Context', ctx=Load())],
                        keywords=[])),
                AnnAssign(
                    target=Name(id='node', ctx=Store()),
                    annotation=Subscript(
                        value=Name(id='Union', ctx=Load()),
                        slice=Tuple(
                            elts=[
                                Name(id='BeforeNode', ctx=Load()),
                                Name(id='AfterNode', ctx=Load())],
                            ctx=Load()),
                        ctx=Load()),
                    value=Name(id='node_', ctx=Load()),
                    simple=1),
                If(
                    test=Call(
                        func=Name(id='isinstance', ctx=Load()),
                        args=[
                            Name(id='node', ctx=Load()),
                            Name(id='BeforeNode', ctx=Load())],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Name(id='tag_name', ctx=Store())],
                            value=Constant(value='del')),
                        Assign(
                            targets=[
                                Name(id='css_class', ctx=Store())],
                            value=Constant(value='diff-before'))],
                    orelse=[
                        If(
                            test=Call(
                                func=Name(id='isinstance', ctx=Load()),
                                args=[
                                    Name(id='node', ctx=Load()),
                                    Name(id='AfterNode', ctx=Load())],
                                keywords=[]),
                            body=[
                                Assign(
                                    targets=[
                                        Name(id='tag_name', ctx=Store())],
                                    value=Constant(value='ins')),
                                Assign(
                                    targets=[
                                        Name(id='css_class', ctx=Store())],
                                    value=Constant(value='diff-after'))],
                            orelse=[
                                Expr(
                                    value=Call(
                                        func=Name(id='assert_never', ctx=Load()),
                                        args=[
                                            Name(id='node', ctx=Load())],
                                        keywords=[]))])]),
                If(
                    test=BoolOp(
                        op=And(),
                        values=[
                            Call(
                                func=Name(id='isinstance', ctx=Load()),
                                args=[
                                    Name(id='parent', ctx=Load()),
                                    Attribute(
                                        value=Name(id='html', ctx=Load()),
                                        attr='HTMLTag',
                                        ctx=Load())],
                                keywords=[]),
                            Compare(
                                left=Attribute(
                                    value=Name(id='parent', ctx=Load()),
                                    attr='tag_name',
                                    ctx=Load()),
                                ops=[
                                    Eq()],
                                comparators=[
                                    Constant(value='tbody')])]),
                    body=[
                        Assign(
                            targets=[
                                Name(id='visitor', ctx=Store())],
                            value=Call(
                                func=Attribute(
                                    value=Name(id='html', ctx=Load()),
                                    attr='HTMLVisitor',
                                    ctx=Load()),
                                args=[
                                    Name(id='context', ctx=Load())],
                                keywords=[])),
                        Expr(
                            value=Call(
                                func=Attribute(
                                    value=Attribute(
                                        value=Name(id='node', ctx=Load()),
                                        attr='child',
                                        ctx=Load()),
                                    attr='visit',
                                    ctx=Load()),
                                args=[
                                    Name(id='visitor', ctx=Load())],
                                keywords=[])),
                        For(
                            target=Name(id='child', ctx=Store()),
                            iter=Attribute(
                                value=Attribute(
                                    value=Name(id='visitor', ctx=Load()),
                                    attr='root',
                                    ctx=Load()),
                                attr='children',
                                ctx=Load()),
                            body=[
                                Assert(
                                    test=Call(
                                        func=Name(id='isinstance', ctx=Load()),
                                        args=[
                                            Name(id='child', ctx=Load()),
                                            Attribute(
                                                value=Name(id='html', ctx=Load()),
                                                attr='HTMLTag',
                                                ctx=Load())],
                                        keywords=[])),
                                Try(
                                    body=[
                                        Assign(
                                            targets=[
                                                Name(id='classes', ctx=Store())],
                                            value=Subscript(
                                                value=Attribute(
                                                    value=Name(id='child', ctx=Load()),
                                                    attr='attributes',
                                                    ctx=Load()),
                                                slice=Constant(value='class'),
                                                ctx=Load())),
                                        If(
                                            test=Compare(
                                                left=Name(id='classes', ctx=Load()),
                                                ops=[
                                                    Is()],
                                                comparators=[
                                                    Constant(value=None)]),
                                            body=[
                                                Assign(
                                                    targets=[
                                                        Subscript(
                                                            value=Attribute(
                                                                value=Name(id='child', ctx=Load()),
                                                                attr='attributes',
                                                                ctx=Load()),
                                                            slice=Constant(value='class'),
                                                            ctx=Store())],
                                                    value=Name(id='css_class', ctx=Load()))],
                                            orelse=[
                                                Assign(
                                                    targets=[
                                                        Subscript(
                                                            value=Attribute(
                                                                value=Name(id='child', ctx=Load()),
                                                                attr='attributes',
                                                                ctx=Load()),
                                                            slice=Constant(value='class'),
                                                            ctx=Store())],
                                                    value=BinOp(
                                                        left=BinOp(
                                                            left=Name(id='classes', ctx=Load()),
                                                            op=Add(),
                                                            right=Constant(value=' ')),
                                                        op=Add(),
                                                        right=Name(id='css_class', ctx=Load())))])],
                                    handlers=[
                                        ExceptHandler(
                                            type=Name(id='KeyError', ctx=Load()),
                                            body=[
                                                Assign(
                                                    targets=[
                                                        Subscript(
                                                            value=Attribute(
                                                                value=Name(id='child', ctx=Load()),
                                                                attr='attributes',
                                                                ctx=Load()),
                                                            slice=Constant(value='class'),
                                                            ctx=Store())],
                                                    value=Name(id='css_class', ctx=Load()))])],
                                    orelse=[],
                                    finalbody=[]),
                                Expr(
                                    value=Call(
                                        func=Attribute(
                                            value=Name(id='parent', ctx=Load()),
                                            attr='append',
                                            ctx=Load()),
                                        args=[
                                            Name(id='child', ctx=Load())],
                                        keywords=[]))],
                            orelse=[]),
                        Return(
                            value=Constant(value=None))],
                    orelse=[
                        Assign(
                            targets=[
                                Name(id='div', ctx=Store())],
                            value=Call(
                                func=Attribute(
                                    value=Name(id='html', ctx=Load()),
                                    attr='HTMLTag',
                                    ctx=Load()),
                                args=[
                                    Name(id='tag_name', ctx=Load()),
                                    Dict(
                                        keys=[
                                            Constant(value='class')],
                                        values=[
                                            Name(id='css_class', ctx=Load())])],
                                keywords=[])),
                        Expr(
                            value=Call(
                                func=Attribute(
                                    value=Name(id='parent', ctx=Load()),
                                    attr='append',
                                    ctx=Load()),
                                args=[
                                    Name(id='div', ctx=Load())],
                                keywords=[])),
                        Return(
                            value=Name(id='div', ctx=Load()))])],
            decorator_list=[],
            returns=Attribute(
                value=Name(id='html', ctx=Load()),
                attr='RenderResult',
                ctx=Load()))],
    type_ignores=[])
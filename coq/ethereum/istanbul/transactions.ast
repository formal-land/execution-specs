Module(
    body=[
        Expr(
            value=Constant(value='\nTransactions are atomic units of work created externally to Ethereum and\nsubmitted to be executed. If Ethereum is viewed as a state machine,\ntransactions are the events that move between states.\n')),
        ImportFrom(
            module='dataclasses',
            names=[
                alias(name='dataclass')],
            level=0),
        ImportFrom(
            module='typing',
            names=[
                alias(name='Union')],
            level=0),
        ImportFrom(
            module='ethereum_types.bytes',
            names=[
                alias(name='Bytes'),
                alias(name='Bytes0')],
            level=0),
        ImportFrom(
            module='ethereum_types.frozen',
            names=[
                alias(name='slotted_freezable')],
            level=0),
        ImportFrom(
            module='ethereum_types.numeric',
            names=[
                alias(name='U256'),
                alias(name='Uint')],
            level=0),
        ImportFrom(
            module='fork_types',
            names=[
                alias(name='Address')],
            level=1),
        Assign(
            targets=[
                Name(id='TX_BASE_COST', ctx=Store())],
            value=Constant(value=21000)),
        Assign(
            targets=[
                Name(id='TX_DATA_COST_PER_NON_ZERO', ctx=Store())],
            value=Constant(value=16)),
        Assign(
            targets=[
                Name(id='TX_DATA_COST_PER_ZERO', ctx=Store())],
            value=Constant(value=4)),
        Assign(
            targets=[
                Name(id='TX_CREATE_COST', ctx=Store())],
            value=Constant(value=32000)),
        ClassDef(
            name='Transaction',
            bases=[],
            keywords=[],
            body=[
                Expr(
                    value=Constant(value='\n    Atomic operation performed on the block chain.\n    ')),
                AnnAssign(
                    target=Name(id='nonce', ctx=Store()),
                    annotation=Name(id='U256', ctx=Load()),
                    simple=1),
                AnnAssign(
                    target=Name(id='gas_price', ctx=Store()),
                    annotation=Name(id='Uint', ctx=Load()),
                    simple=1),
                AnnAssign(
                    target=Name(id='gas', ctx=Store()),
                    annotation=Name(id='Uint', ctx=Load()),
                    simple=1),
                AnnAssign(
                    target=Name(id='to', ctx=Store()),
                    annotation=Subscript(
                        value=Name(id='Union', ctx=Load()),
                        slice=Tuple(
                            elts=[
                                Name(id='Bytes0', ctx=Load()),
                                Name(id='Address', ctx=Load())],
                            ctx=Load()),
                        ctx=Load()),
                    simple=1),
                AnnAssign(
                    target=Name(id='value', ctx=Store()),
                    annotation=Name(id='U256', ctx=Load()),
                    simple=1),
                AnnAssign(
                    target=Name(id='data', ctx=Store()),
                    annotation=Name(id='Bytes', ctx=Load()),
                    simple=1),
                AnnAssign(
                    target=Name(id='v', ctx=Store()),
                    annotation=Name(id='U256', ctx=Load()),
                    simple=1),
                AnnAssign(
                    target=Name(id='r', ctx=Store()),
                    annotation=Name(id='U256', ctx=Load()),
                    simple=1),
                AnnAssign(
                    target=Name(id='s', ctx=Store()),
                    annotation=Name(id='U256', ctx=Load()),
                    simple=1)],
            decorator_list=[
                Name(id='slotted_freezable', ctx=Load()),
                Name(id='dataclass', ctx=Load())])],
    type_ignores=[])
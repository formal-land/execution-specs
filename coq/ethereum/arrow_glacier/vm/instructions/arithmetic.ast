Module(
    body=[
        Expr(
            value=Constant(value='\nEthereum Virtual Machine (EVM) Arithmetic Instructions\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. contents:: Table of Contents\n    :backlinks: none\n    :local:\n\nIntroduction\n------------\n\nImplementations of the EVM Arithmetic instructions.\n')),
        ImportFrom(
            module='ethereum_types.numeric',
            names=[
                alias(name='U256'),
                alias(name='Uint')],
            level=0),
        ImportFrom(
            module='ethereum.utils.numeric',
            names=[
                alias(name='get_sign')],
            level=0),
        ImportFrom(
            names=[
                alias(name='Evm')],
            level=2),
        ImportFrom(
            module='gas',
            names=[
                alias(name='GAS_EXPONENTIATION'),
                alias(name='GAS_EXPONENTIATION_PER_BYTE'),
                alias(name='GAS_LOW'),
                alias(name='GAS_MID'),
                alias(name='GAS_VERY_LOW'),
                alias(name='charge_gas')],
            level=2),
        ImportFrom(
            module='stack',
            names=[
                alias(name='pop'),
                alias(name='push')],
            level=2),
        FunctionDef(
            name='add',
            args=arguments(
                posonlyargs=[],
                args=[
                    arg(
                        arg='evm',
                        annotation=Name(id='Evm', ctx=Load()))],
                kwonlyargs=[],
                kw_defaults=[],
                defaults=[]),
            body=[
                Expr(
                    value=Constant(value='\n    Adds the top two elements of the stack together, and pushes the result back\n    on the stack.\n\n    Parameters\n    ----------\n    evm :\n        The current EVM frame.\n\n    ')),
                Assign(
                    targets=[
                        Name(id='x', ctx=Store())],
                    value=Call(
                        func=Name(id='pop', ctx=Load()),
                        args=[
                            Attribute(
                                value=Name(id='evm', ctx=Load()),
                                attr='stack',
                                ctx=Load())],
                        keywords=[])),
                Assign(
                    targets=[
                        Name(id='y', ctx=Store())],
                    value=Call(
                        func=Name(id='pop', ctx=Load()),
                        args=[
                            Attribute(
                                value=Name(id='evm', ctx=Load()),
                                attr='stack',
                                ctx=Load())],
                        keywords=[])),
                Expr(
                    value=Call(
                        func=Name(id='charge_gas', ctx=Load()),
                        args=[
                            Name(id='evm', ctx=Load()),
                            Name(id='GAS_VERY_LOW', ctx=Load())],
                        keywords=[])),
                Assign(
                    targets=[
                        Name(id='result', ctx=Store())],
                    value=Call(
                        func=Attribute(
                            value=Name(id='x', ctx=Load()),
                            attr='wrapping_add',
                            ctx=Load()),
                        args=[
                            Name(id='y', ctx=Load())],
                        keywords=[])),
                Expr(
                    value=Call(
                        func=Name(id='push', ctx=Load()),
                        args=[
                            Attribute(
                                value=Name(id='evm', ctx=Load()),
                                attr='stack',
                                ctx=Load()),
                            Name(id='result', ctx=Load())],
                        keywords=[])),
                AugAssign(
                    target=Attribute(
                        value=Name(id='evm', ctx=Load()),
                        attr='pc',
                        ctx=Store()),
                    op=Add(),
                    value=Call(
                        func=Name(id='Uint', ctx=Load()),
                        args=[
                            Constant(value=1)],
                        keywords=[]))],
            decorator_list=[],
            returns=Constant(value=None)),
        FunctionDef(
            name='sub',
            args=arguments(
                posonlyargs=[],
                args=[
                    arg(
                        arg='evm',
                        annotation=Name(id='Evm', ctx=Load()))],
                kwonlyargs=[],
                kw_defaults=[],
                defaults=[]),
            body=[
                Expr(
                    value=Constant(value='\n    Subtracts the top two elements of the stack, and pushes the result back\n    on the stack.\n\n    Parameters\n    ----------\n    evm :\n        The current EVM frame.\n\n    ')),
                Assign(
                    targets=[
                        Name(id='x', ctx=Store())],
                    value=Call(
                        func=Name(id='pop', ctx=Load()),
                        args=[
                            Attribute(
                                value=Name(id='evm', ctx=Load()),
                                attr='stack',
                                ctx=Load())],
                        keywords=[])),
                Assign(
                    targets=[
                        Name(id='y', ctx=Store())],
                    value=Call(
                        func=Name(id='pop', ctx=Load()),
                        args=[
                            Attribute(
                                value=Name(id='evm', ctx=Load()),
                                attr='stack',
                                ctx=Load())],
                        keywords=[])),
                Expr(
                    value=Call(
                        func=Name(id='charge_gas', ctx=Load()),
                        args=[
                            Name(id='evm', ctx=Load()),
                            Name(id='GAS_VERY_LOW', ctx=Load())],
                        keywords=[])),
                Assign(
                    targets=[
                        Name(id='result', ctx=Store())],
                    value=Call(
                        func=Attribute(
                            value=Name(id='x', ctx=Load()),
                            attr='wrapping_sub',
                            ctx=Load()),
                        args=[
                            Name(id='y', ctx=Load())],
                        keywords=[])),
                Expr(
                    value=Call(
                        func=Name(id='push', ctx=Load()),
                        args=[
                            Attribute(
                                value=Name(id='evm', ctx=Load()),
                                attr='stack',
                                ctx=Load()),
                            Name(id='result', ctx=Load())],
                        keywords=[])),
                AugAssign(
                    target=Attribute(
                        value=Name(id='evm', ctx=Load()),
                        attr='pc',
                        ctx=Store()),
                    op=Add(),
                    value=Call(
                        func=Name(id='Uint', ctx=Load()),
                        args=[
                            Constant(value=1)],
                        keywords=[]))],
            decorator_list=[],
            returns=Constant(value=None)),
        FunctionDef(
            name='mul',
            args=arguments(
                posonlyargs=[],
                args=[
                    arg(
                        arg='evm',
                        annotation=Name(id='Evm', ctx=Load()))],
                kwonlyargs=[],
                kw_defaults=[],
                defaults=[]),
            body=[
                Expr(
                    value=Constant(value='\n    Multiply the top two elements of the stack, and pushes the result back\n    on the stack.\n\n    Parameters\n    ----------\n    evm :\n        The current EVM frame.\n\n    ')),
                Assign(
                    targets=[
                        Name(id='x', ctx=Store())],
                    value=Call(
                        func=Name(id='pop', ctx=Load()),
                        args=[
                            Attribute(
                                value=Name(id='evm', ctx=Load()),
                                attr='stack',
                                ctx=Load())],
                        keywords=[])),
                Assign(
                    targets=[
                        Name(id='y', ctx=Store())],
                    value=Call(
                        func=Name(id='pop', ctx=Load()),
                        args=[
                            Attribute(
                                value=Name(id='evm', ctx=Load()),
                                attr='stack',
                                ctx=Load())],
                        keywords=[])),
                Expr(
                    value=Call(
                        func=Name(id='charge_gas', ctx=Load()),
                        args=[
                            Name(id='evm', ctx=Load()),
                            Name(id='GAS_LOW', ctx=Load())],
                        keywords=[])),
                Assign(
                    targets=[
                        Name(id='result', ctx=Store())],
                    value=Call(
                        func=Attribute(
                            value=Name(id='x', ctx=Load()),
                            attr='wrapping_mul',
                            ctx=Load()),
                        args=[
                            Name(id='y', ctx=Load())],
                        keywords=[])),
                Expr(
                    value=Call(
                        func=Name(id='push', ctx=Load()),
                        args=[
                            Attribute(
                                value=Name(id='evm', ctx=Load()),
                                attr='stack',
                                ctx=Load()),
                            Name(id='result', ctx=Load())],
                        keywords=[])),
                AugAssign(
                    target=Attribute(
                        value=Name(id='evm', ctx=Load()),
                        attr='pc',
                        ctx=Store()),
                    op=Add(),
                    value=Call(
                        func=Name(id='Uint', ctx=Load()),
                        args=[
                            Constant(value=1)],
                        keywords=[]))],
            decorator_list=[],
            returns=Constant(value=None)),
        FunctionDef(
            name='div',
            args=arguments(
                posonlyargs=[],
                args=[
                    arg(
                        arg='evm',
                        annotation=Name(id='Evm', ctx=Load()))],
                kwonlyargs=[],
                kw_defaults=[],
                defaults=[]),
            body=[
                Expr(
                    value=Constant(value='\n    Integer division of the top two elements of the stack. Pushes the result\n    back on the stack.\n\n    Parameters\n    ----------\n    evm :\n        The current EVM frame.\n\n    ')),
                Assign(
                    targets=[
                        Name(id='dividend', ctx=Store())],
                    value=Call(
                        func=Name(id='pop', ctx=Load()),
                        args=[
                            Attribute(
                                value=Name(id='evm', ctx=Load()),
                                attr='stack',
                                ctx=Load())],
                        keywords=[])),
                Assign(
                    targets=[
                        Name(id='divisor', ctx=Store())],
                    value=Call(
                        func=Name(id='pop', ctx=Load()),
                        args=[
                            Attribute(
                                value=Name(id='evm', ctx=Load()),
                                attr='stack',
                                ctx=Load())],
                        keywords=[])),
                Expr(
                    value=Call(
                        func=Name(id='charge_gas', ctx=Load()),
                        args=[
                            Name(id='evm', ctx=Load()),
                            Name(id='GAS_LOW', ctx=Load())],
                        keywords=[])),
                If(
                    test=Compare(
                        left=Name(id='divisor', ctx=Load()),
                        ops=[
                            Eq()],
                        comparators=[
                            Constant(value=0)]),
                    body=[
                        Assign(
                            targets=[
                                Name(id='quotient', ctx=Store())],
                            value=Call(
                                func=Name(id='U256', ctx=Load()),
                                args=[
                                    Constant(value=0)],
                                keywords=[]))],
                    orelse=[
                        Assign(
                            targets=[
                                Name(id='quotient', ctx=Store())],
                            value=BinOp(
                                left=Name(id='dividend', ctx=Load()),
                                op=FloorDiv(),
                                right=Name(id='divisor', ctx=Load())))]),
                Expr(
                    value=Call(
                        func=Name(id='push', ctx=Load()),
                        args=[
                            Attribute(
                                value=Name(id='evm', ctx=Load()),
                                attr='stack',
                                ctx=Load()),
                            Name(id='quotient', ctx=Load())],
                        keywords=[])),
                AugAssign(
                    target=Attribute(
                        value=Name(id='evm', ctx=Load()),
                        attr='pc',
                        ctx=Store()),
                    op=Add(),
                    value=Call(
                        func=Name(id='Uint', ctx=Load()),
                        args=[
                            Constant(value=1)],
                        keywords=[]))],
            decorator_list=[],
            returns=Constant(value=None)),
        Assign(
            targets=[
                Name(id='U255_CEIL_VALUE', ctx=Store())],
            value=BinOp(
                left=Constant(value=2),
                op=Pow(),
                right=Constant(value=255))),
        FunctionDef(
            name='sdiv',
            args=arguments(
                posonlyargs=[],
                args=[
                    arg(
                        arg='evm',
                        annotation=Name(id='Evm', ctx=Load()))],
                kwonlyargs=[],
                kw_defaults=[],
                defaults=[]),
            body=[
                Expr(
                    value=Constant(value='\n    Signed integer division of the top two elements of the stack. Pushes the\n    result back on the stack.\n\n    Parameters\n    ----------\n    evm :\n        The current EVM frame.\n\n    ')),
                Assign(
                    targets=[
                        Name(id='dividend', ctx=Store())],
                    value=Call(
                        func=Attribute(
                            value=Call(
                                func=Name(id='pop', ctx=Load()),
                                args=[
                                    Attribute(
                                        value=Name(id='evm', ctx=Load()),
                                        attr='stack',
                                        ctx=Load())],
                                keywords=[]),
                            attr='to_signed',
                            ctx=Load()),
                        args=[],
                        keywords=[])),
                Assign(
                    targets=[
                        Name(id='divisor', ctx=Store())],
                    value=Call(
                        func=Attribute(
                            value=Call(
                                func=Name(id='pop', ctx=Load()),
                                args=[
                                    Attribute(
                                        value=Name(id='evm', ctx=Load()),
                                        attr='stack',
                                        ctx=Load())],
                                keywords=[]),
                            attr='to_signed',
                            ctx=Load()),
                        args=[],
                        keywords=[])),
                Expr(
                    value=Call(
                        func=Name(id='charge_gas', ctx=Load()),
                        args=[
                            Name(id='evm', ctx=Load()),
                            Name(id='GAS_LOW', ctx=Load())],
                        keywords=[])),
                If(
                    test=Compare(
                        left=Name(id='divisor', ctx=Load()),
                        ops=[
                            Eq()],
                        comparators=[
                            Constant(value=0)]),
                    body=[
                        Assign(
                            targets=[
                                Name(id='quotient', ctx=Store())],
                            value=Constant(value=0))],
                    orelse=[
                        If(
                            test=BoolOp(
                                op=And(),
                                values=[
                                    Compare(
                                        left=Name(id='dividend', ctx=Load()),
                                        ops=[
                                            Eq()],
                                        comparators=[
                                            UnaryOp(
                                                op=USub(),
                                                operand=Name(id='U255_CEIL_VALUE', ctx=Load()))]),
                                    Compare(
                                        left=Name(id='divisor', ctx=Load()),
                                        ops=[
                                            Eq()],
                                        comparators=[
                                            UnaryOp(
                                                op=USub(),
                                                operand=Constant(value=1))])]),
                            body=[
                                Assign(
                                    targets=[
                                        Name(id='quotient', ctx=Store())],
                                    value=UnaryOp(
                                        op=USub(),
                                        operand=Name(id='U255_CEIL_VALUE', ctx=Load())))],
                            orelse=[
                                Assign(
                                    targets=[
                                        Name(id='sign', ctx=Store())],
                                    value=Call(
                                        func=Name(id='get_sign', ctx=Load()),
                                        args=[
                                            BinOp(
                                                left=Name(id='dividend', ctx=Load()),
                                                op=Mult(),
                                                right=Name(id='divisor', ctx=Load()))],
                                        keywords=[])),
                                Assign(
                                    targets=[
                                        Name(id='quotient', ctx=Store())],
                                    value=BinOp(
                                        left=Name(id='sign', ctx=Load()),
                                        op=Mult(),
                                        right=BinOp(
                                            left=Call(
                                                func=Name(id='abs', ctx=Load()),
                                                args=[
                                                    Name(id='dividend', ctx=Load())],
                                                keywords=[]),
                                            op=FloorDiv(),
                                            right=Call(
                                                func=Name(id='abs', ctx=Load()),
                                                args=[
                                                    Name(id='divisor', ctx=Load())],
                                                keywords=[]))))])]),
                Expr(
                    value=Call(
                        func=Name(id='push', ctx=Load()),
                        args=[
                            Attribute(
                                value=Name(id='evm', ctx=Load()),
                                attr='stack',
                                ctx=Load()),
                            Call(
                                func=Attribute(
                                    value=Name(id='U256', ctx=Load()),
                                    attr='from_signed',
                                    ctx=Load()),
                                args=[
                                    Name(id='quotient', ctx=Load())],
                                keywords=[])],
                        keywords=[])),
                AugAssign(
                    target=Attribute(
                        value=Name(id='evm', ctx=Load()),
                        attr='pc',
                        ctx=Store()),
                    op=Add(),
                    value=Call(
                        func=Name(id='Uint', ctx=Load()),
                        args=[
                            Constant(value=1)],
                        keywords=[]))],
            decorator_list=[],
            returns=Constant(value=None)),
        FunctionDef(
            name='mod',
            args=arguments(
                posonlyargs=[],
                args=[
                    arg(
                        arg='evm',
                        annotation=Name(id='Evm', ctx=Load()))],
                kwonlyargs=[],
                kw_defaults=[],
                defaults=[]),
            body=[
                Expr(
                    value=Constant(value='\n    Modulo remainder of the top two elements of the stack. Pushes the result\n    back on the stack.\n\n    Parameters\n    ----------\n    evm :\n        The current EVM frame.\n\n    ')),
                Assign(
                    targets=[
                        Name(id='x', ctx=Store())],
                    value=Call(
                        func=Name(id='pop', ctx=Load()),
                        args=[
                            Attribute(
                                value=Name(id='evm', ctx=Load()),
                                attr='stack',
                                ctx=Load())],
                        keywords=[])),
                Assign(
                    targets=[
                        Name(id='y', ctx=Store())],
                    value=Call(
                        func=Name(id='pop', ctx=Load()),
                        args=[
                            Attribute(
                                value=Name(id='evm', ctx=Load()),
                                attr='stack',
                                ctx=Load())],
                        keywords=[])),
                Expr(
                    value=Call(
                        func=Name(id='charge_gas', ctx=Load()),
                        args=[
                            Name(id='evm', ctx=Load()),
                            Name(id='GAS_LOW', ctx=Load())],
                        keywords=[])),
                If(
                    test=Compare(
                        left=Name(id='y', ctx=Load()),
                        ops=[
                            Eq()],
                        comparators=[
                            Constant(value=0)]),
                    body=[
                        Assign(
                            targets=[
                                Name(id='remainder', ctx=Store())],
                            value=Call(
                                func=Name(id='U256', ctx=Load()),
                                args=[
                                    Constant(value=0)],
                                keywords=[]))],
                    orelse=[
                        Assign(
                            targets=[
                                Name(id='remainder', ctx=Store())],
                            value=BinOp(
                                left=Name(id='x', ctx=Load()),
                                op=Mod(),
                                right=Name(id='y', ctx=Load())))]),
                Expr(
                    value=Call(
                        func=Name(id='push', ctx=Load()),
                        args=[
                            Attribute(
                                value=Name(id='evm', ctx=Load()),
                                attr='stack',
                                ctx=Load()),
                            Name(id='remainder', ctx=Load())],
                        keywords=[])),
                AugAssign(
                    target=Attribute(
                        value=Name(id='evm', ctx=Load()),
                        attr='pc',
                        ctx=Store()),
                    op=Add(),
                    value=Call(
                        func=Name(id='Uint', ctx=Load()),
                        args=[
                            Constant(value=1)],
                        keywords=[]))],
            decorator_list=[],
            returns=Constant(value=None)),
        FunctionDef(
            name='smod',
            args=arguments(
                posonlyargs=[],
                args=[
                    arg(
                        arg='evm',
                        annotation=Name(id='Evm', ctx=Load()))],
                kwonlyargs=[],
                kw_defaults=[],
                defaults=[]),
            body=[
                Expr(
                    value=Constant(value='\n    Signed modulo remainder of the top two elements of the stack. Pushes the\n    result back on the stack.\n\n    Parameters\n    ----------\n    evm :\n        The current EVM frame.\n\n    ')),
                Assign(
                    targets=[
                        Name(id='x', ctx=Store())],
                    value=Call(
                        func=Attribute(
                            value=Call(
                                func=Name(id='pop', ctx=Load()),
                                args=[
                                    Attribute(
                                        value=Name(id='evm', ctx=Load()),
                                        attr='stack',
                                        ctx=Load())],
                                keywords=[]),
                            attr='to_signed',
                            ctx=Load()),
                        args=[],
                        keywords=[])),
                Assign(
                    targets=[
                        Name(id='y', ctx=Store())],
                    value=Call(
                        func=Attribute(
                            value=Call(
                                func=Name(id='pop', ctx=Load()),
                                args=[
                                    Attribute(
                                        value=Name(id='evm', ctx=Load()),
                                        attr='stack',
                                        ctx=Load())],
                                keywords=[]),
                            attr='to_signed',
                            ctx=Load()),
                        args=[],
                        keywords=[])),
                Expr(
                    value=Call(
                        func=Name(id='charge_gas', ctx=Load()),
                        args=[
                            Name(id='evm', ctx=Load()),
                            Name(id='GAS_LOW', ctx=Load())],
                        keywords=[])),
                If(
                    test=Compare(
                        left=Name(id='y', ctx=Load()),
                        ops=[
                            Eq()],
                        comparators=[
                            Constant(value=0)]),
                    body=[
                        Assign(
                            targets=[
                                Name(id='remainder', ctx=Store())],
                            value=Constant(value=0))],
                    orelse=[
                        Assign(
                            targets=[
                                Name(id='remainder', ctx=Store())],
                            value=BinOp(
                                left=Call(
                                    func=Name(id='get_sign', ctx=Load()),
                                    args=[
                                        Name(id='x', ctx=Load())],
                                    keywords=[]),
                                op=Mult(),
                                right=BinOp(
                                    left=Call(
                                        func=Name(id='abs', ctx=Load()),
                                        args=[
                                            Name(id='x', ctx=Load())],
                                        keywords=[]),
                                    op=Mod(),
                                    right=Call(
                                        func=Name(id='abs', ctx=Load()),
                                        args=[
                                            Name(id='y', ctx=Load())],
                                        keywords=[]))))]),
                Expr(
                    value=Call(
                        func=Name(id='push', ctx=Load()),
                        args=[
                            Attribute(
                                value=Name(id='evm', ctx=Load()),
                                attr='stack',
                                ctx=Load()),
                            Call(
                                func=Attribute(
                                    value=Name(id='U256', ctx=Load()),
                                    attr='from_signed',
                                    ctx=Load()),
                                args=[
                                    Name(id='remainder', ctx=Load())],
                                keywords=[])],
                        keywords=[])),
                AugAssign(
                    target=Attribute(
                        value=Name(id='evm', ctx=Load()),
                        attr='pc',
                        ctx=Store()),
                    op=Add(),
                    value=Call(
                        func=Name(id='Uint', ctx=Load()),
                        args=[
                            Constant(value=1)],
                        keywords=[]))],
            decorator_list=[],
            returns=Constant(value=None)),
        FunctionDef(
            name='addmod',
            args=arguments(
                posonlyargs=[],
                args=[
                    arg(
                        arg='evm',
                        annotation=Name(id='Evm', ctx=Load()))],
                kwonlyargs=[],
                kw_defaults=[],
                defaults=[]),
            body=[
                Expr(
                    value=Constant(value='\n    Modulo addition of the top 2 elements with the 3rd element. Pushes the\n    result back on the stack.\n\n    Parameters\n    ----------\n    evm :\n        The current EVM frame.\n\n    ')),
                Assign(
                    targets=[
                        Name(id='x', ctx=Store())],
                    value=Call(
                        func=Name(id='Uint', ctx=Load()),
                        args=[
                            Call(
                                func=Name(id='pop', ctx=Load()),
                                args=[
                                    Attribute(
                                        value=Name(id='evm', ctx=Load()),
                                        attr='stack',
                                        ctx=Load())],
                                keywords=[])],
                        keywords=[])),
                Assign(
                    targets=[
                        Name(id='y', ctx=Store())],
                    value=Call(
                        func=Name(id='Uint', ctx=Load()),
                        args=[
                            Call(
                                func=Name(id='pop', ctx=Load()),
                                args=[
                                    Attribute(
                                        value=Name(id='evm', ctx=Load()),
                                        attr='stack',
                                        ctx=Load())],
                                keywords=[])],
                        keywords=[])),
                Assign(
                    targets=[
                        Name(id='z', ctx=Store())],
                    value=Call(
                        func=Name(id='Uint', ctx=Load()),
                        args=[
                            Call(
                                func=Name(id='pop', ctx=Load()),
                                args=[
                                    Attribute(
                                        value=Name(id='evm', ctx=Load()),
                                        attr='stack',
                                        ctx=Load())],
                                keywords=[])],
                        keywords=[])),
                Expr(
                    value=Call(
                        func=Name(id='charge_gas', ctx=Load()),
                        args=[
                            Name(id='evm', ctx=Load()),
                            Name(id='GAS_MID', ctx=Load())],
                        keywords=[])),
                If(
                    test=Compare(
                        left=Name(id='z', ctx=Load()),
                        ops=[
                            Eq()],
                        comparators=[
                            Constant(value=0)]),
                    body=[
                        Assign(
                            targets=[
                                Name(id='result', ctx=Store())],
                            value=Call(
                                func=Name(id='U256', ctx=Load()),
                                args=[
                                    Constant(value=0)],
                                keywords=[]))],
                    orelse=[
                        Assign(
                            targets=[
                                Name(id='result', ctx=Store())],
                            value=Call(
                                func=Name(id='U256', ctx=Load()),
                                args=[
                                    BinOp(
                                        left=BinOp(
                                            left=Name(id='x', ctx=Load()),
                                            op=Add(),
                                            right=Name(id='y', ctx=Load())),
                                        op=Mod(),
                                        right=Name(id='z', ctx=Load()))],
                                keywords=[]))]),
                Expr(
                    value=Call(
                        func=Name(id='push', ctx=Load()),
                        args=[
                            Attribute(
                                value=Name(id='evm', ctx=Load()),
                                attr='stack',
                                ctx=Load()),
                            Name(id='result', ctx=Load())],
                        keywords=[])),
                AugAssign(
                    target=Attribute(
                        value=Name(id='evm', ctx=Load()),
                        attr='pc',
                        ctx=Store()),
                    op=Add(),
                    value=Call(
                        func=Name(id='Uint', ctx=Load()),
                        args=[
                            Constant(value=1)],
                        keywords=[]))],
            decorator_list=[],
            returns=Constant(value=None)),
        FunctionDef(
            name='mulmod',
            args=arguments(
                posonlyargs=[],
                args=[
                    arg(
                        arg='evm',
                        annotation=Name(id='Evm', ctx=Load()))],
                kwonlyargs=[],
                kw_defaults=[],
                defaults=[]),
            body=[
                Expr(
                    value=Constant(value='\n    Modulo multiplication of the top 2 elements with the 3rd element. Pushes\n    the result back on the stack.\n\n    Parameters\n    ----------\n    evm :\n        The current EVM frame.\n\n    ')),
                Assign(
                    targets=[
                        Name(id='x', ctx=Store())],
                    value=Call(
                        func=Name(id='Uint', ctx=Load()),
                        args=[
                            Call(
                                func=Name(id='pop', ctx=Load()),
                                args=[
                                    Attribute(
                                        value=Name(id='evm', ctx=Load()),
                                        attr='stack',
                                        ctx=Load())],
                                keywords=[])],
                        keywords=[])),
                Assign(
                    targets=[
                        Name(id='y', ctx=Store())],
                    value=Call(
                        func=Name(id='Uint', ctx=Load()),
                        args=[
                            Call(
                                func=Name(id='pop', ctx=Load()),
                                args=[
                                    Attribute(
                                        value=Name(id='evm', ctx=Load()),
                                        attr='stack',
                                        ctx=Load())],
                                keywords=[])],
                        keywords=[])),
                Assign(
                    targets=[
                        Name(id='z', ctx=Store())],
                    value=Call(
                        func=Name(id='Uint', ctx=Load()),
                        args=[
                            Call(
                                func=Name(id='pop', ctx=Load()),
                                args=[
                                    Attribute(
                                        value=Name(id='evm', ctx=Load()),
                                        attr='stack',
                                        ctx=Load())],
                                keywords=[])],
                        keywords=[])),
                Expr(
                    value=Call(
                        func=Name(id='charge_gas', ctx=Load()),
                        args=[
                            Name(id='evm', ctx=Load()),
                            Name(id='GAS_MID', ctx=Load())],
                        keywords=[])),
                If(
                    test=Compare(
                        left=Name(id='z', ctx=Load()),
                        ops=[
                            Eq()],
                        comparators=[
                            Constant(value=0)]),
                    body=[
                        Assign(
                            targets=[
                                Name(id='result', ctx=Store())],
                            value=Call(
                                func=Name(id='U256', ctx=Load()),
                                args=[
                                    Constant(value=0)],
                                keywords=[]))],
                    orelse=[
                        Assign(
                            targets=[
                                Name(id='result', ctx=Store())],
                            value=Call(
                                func=Name(id='U256', ctx=Load()),
                                args=[
                                    BinOp(
                                        left=BinOp(
                                            left=Name(id='x', ctx=Load()),
                                            op=Mult(),
                                            right=Name(id='y', ctx=Load())),
                                        op=Mod(),
                                        right=Name(id='z', ctx=Load()))],
                                keywords=[]))]),
                Expr(
                    value=Call(
                        func=Name(id='push', ctx=Load()),
                        args=[
                            Attribute(
                                value=Name(id='evm', ctx=Load()),
                                attr='stack',
                                ctx=Load()),
                            Name(id='result', ctx=Load())],
                        keywords=[])),
                AugAssign(
                    target=Attribute(
                        value=Name(id='evm', ctx=Load()),
                        attr='pc',
                        ctx=Store()),
                    op=Add(),
                    value=Call(
                        func=Name(id='Uint', ctx=Load()),
                        args=[
                            Constant(value=1)],
                        keywords=[]))],
            decorator_list=[],
            returns=Constant(value=None)),
        FunctionDef(
            name='exp',
            args=arguments(
                posonlyargs=[],
                args=[
                    arg(
                        arg='evm',
                        annotation=Name(id='Evm', ctx=Load()))],
                kwonlyargs=[],
                kw_defaults=[],
                defaults=[]),
            body=[
                Expr(
                    value=Constant(value='\n    Exponential operation of the top 2 elements. Pushes the result back on\n    the stack.\n\n    Parameters\n    ----------\n    evm :\n        The current EVM frame.\n\n    ')),
                Assign(
                    targets=[
                        Name(id='base', ctx=Store())],
                    value=Call(
                        func=Name(id='Uint', ctx=Load()),
                        args=[
                            Call(
                                func=Name(id='pop', ctx=Load()),
                                args=[
                                    Attribute(
                                        value=Name(id='evm', ctx=Load()),
                                        attr='stack',
                                        ctx=Load())],
                                keywords=[])],
                        keywords=[])),
                Assign(
                    targets=[
                        Name(id='exponent', ctx=Store())],
                    value=Call(
                        func=Name(id='Uint', ctx=Load()),
                        args=[
                            Call(
                                func=Name(id='pop', ctx=Load()),
                                args=[
                                    Attribute(
                                        value=Name(id='evm', ctx=Load()),
                                        attr='stack',
                                        ctx=Load())],
                                keywords=[])],
                        keywords=[])),
                Assign(
                    targets=[
                        Name(id='exponent_bits', ctx=Store())],
                    value=Call(
                        func=Attribute(
                            value=Name(id='exponent', ctx=Load()),
                            attr='bit_length',
                            ctx=Load()),
                        args=[],
                        keywords=[])),
                Assign(
                    targets=[
                        Name(id='exponent_bytes', ctx=Store())],
                    value=BinOp(
                        left=BinOp(
                            left=Name(id='exponent_bits', ctx=Load()),
                            op=Add(),
                            right=Call(
                                func=Name(id='Uint', ctx=Load()),
                                args=[
                                    Constant(value=7)],
                                keywords=[])),
                        op=FloorDiv(),
                        right=Call(
                            func=Name(id='Uint', ctx=Load()),
                            args=[
                                Constant(value=8)],
                            keywords=[]))),
                Expr(
                    value=Call(
                        func=Name(id='charge_gas', ctx=Load()),
                        args=[
                            Name(id='evm', ctx=Load()),
                            BinOp(
                                left=Name(id='GAS_EXPONENTIATION', ctx=Load()),
                                op=Add(),
                                right=BinOp(
                                    left=Name(id='GAS_EXPONENTIATION_PER_BYTE', ctx=Load()),
                                    op=Mult(),
                                    right=Name(id='exponent_bytes', ctx=Load())))],
                        keywords=[])),
                Assign(
                    targets=[
                        Name(id='result', ctx=Store())],
                    value=Call(
                        func=Name(id='U256', ctx=Load()),
                        args=[
                            Call(
                                func=Name(id='pow', ctx=Load()),
                                args=[
                                    Name(id='base', ctx=Load()),
                                    Name(id='exponent', ctx=Load()),
                                    BinOp(
                                        left=Call(
                                            func=Name(id='Uint', ctx=Load()),
                                            args=[
                                                Attribute(
                                                    value=Name(id='U256', ctx=Load()),
                                                    attr='MAX_VALUE',
                                                    ctx=Load())],
                                            keywords=[]),
                                        op=Add(),
                                        right=Call(
                                            func=Name(id='Uint', ctx=Load()),
                                            args=[
                                                Constant(value=1)],
                                            keywords=[]))],
                                keywords=[])],
                        keywords=[])),
                Expr(
                    value=Call(
                        func=Name(id='push', ctx=Load()),
                        args=[
                            Attribute(
                                value=Name(id='evm', ctx=Load()),
                                attr='stack',
                                ctx=Load()),
                            Name(id='result', ctx=Load())],
                        keywords=[])),
                AugAssign(
                    target=Attribute(
                        value=Name(id='evm', ctx=Load()),
                        attr='pc',
                        ctx=Store()),
                    op=Add(),
                    value=Call(
                        func=Name(id='Uint', ctx=Load()),
                        args=[
                            Constant(value=1)],
                        keywords=[]))],
            decorator_list=[],
            returns=Constant(value=None)),
        FunctionDef(
            name='signextend',
            args=arguments(
                posonlyargs=[],
                args=[
                    arg(
                        arg='evm',
                        annotation=Name(id='Evm', ctx=Load()))],
                kwonlyargs=[],
                kw_defaults=[],
                defaults=[]),
            body=[
                Expr(
                    value=Constant(value='\n    Sign extend operation. In other words, extend a signed number which\n    fits in N bytes to 32 bytes.\n\n    Parameters\n    ----------\n    evm :\n        The current EVM frame.\n\n    ')),
                Assign(
                    targets=[
                        Name(id='byte_num', ctx=Store())],
                    value=Call(
                        func=Name(id='pop', ctx=Load()),
                        args=[
                            Attribute(
                                value=Name(id='evm', ctx=Load()),
                                attr='stack',
                                ctx=Load())],
                        keywords=[])),
                Assign(
                    targets=[
                        Name(id='value', ctx=Store())],
                    value=Call(
                        func=Name(id='pop', ctx=Load()),
                        args=[
                            Attribute(
                                value=Name(id='evm', ctx=Load()),
                                attr='stack',
                                ctx=Load())],
                        keywords=[])),
                Expr(
                    value=Call(
                        func=Name(id='charge_gas', ctx=Load()),
                        args=[
                            Name(id='evm', ctx=Load()),
                            Name(id='GAS_LOW', ctx=Load())],
                        keywords=[])),
                If(
                    test=Compare(
                        left=Name(id='byte_num', ctx=Load()),
                        ops=[
                            Gt()],
                        comparators=[
                            Call(
                                func=Name(id='U256', ctx=Load()),
                                args=[
                                    Constant(value=31)],
                                keywords=[])]),
                    body=[
                        Assign(
                            targets=[
                                Name(id='result', ctx=Store())],
                            value=Name(id='value', ctx=Load()))],
                    orelse=[
                        Assign(
                            targets=[
                                Name(id='value_bytes', ctx=Store())],
                            value=Call(
                                func=Name(id='bytes', ctx=Load()),
                                args=[
                                    Call(
                                        func=Attribute(
                                            value=Name(id='value', ctx=Load()),
                                            attr='to_be_bytes32',
                                            ctx=Load()),
                                        args=[],
                                        keywords=[])],
                                keywords=[])),
                        Assign(
                            targets=[
                                Name(id='value_bytes', ctx=Store())],
                            value=Subscript(
                                value=Name(id='value_bytes', ctx=Load()),
                                slice=Slice(
                                    lower=BinOp(
                                        left=Constant(value=31),
                                        op=Sub(),
                                        right=Call(
                                            func=Name(id='int', ctx=Load()),
                                            args=[
                                                Name(id='byte_num', ctx=Load())],
                                            keywords=[]))),
                                ctx=Load())),
                        Assign(
                            targets=[
                                Name(id='sign_bit', ctx=Store())],
                            value=BinOp(
                                left=Subscript(
                                    value=Name(id='value_bytes', ctx=Load()),
                                    slice=Constant(value=0),
                                    ctx=Load()),
                                op=RShift(),
                                right=Constant(value=7))),
                        If(
                            test=Compare(
                                left=Name(id='sign_bit', ctx=Load()),
                                ops=[
                                    Eq()],
                                comparators=[
                                    Constant(value=0)]),
                            body=[
                                Assign(
                                    targets=[
                                        Name(id='result', ctx=Store())],
                                    value=Call(
                                        func=Attribute(
                                            value=Name(id='U256', ctx=Load()),
                                            attr='from_be_bytes',
                                            ctx=Load()),
                                        args=[
                                            Name(id='value_bytes', ctx=Load())],
                                        keywords=[]))],
                            orelse=[
                                Assign(
                                    targets=[
                                        Name(id='num_bytes_prepend', ctx=Store())],
                                    value=BinOp(
                                        left=Call(
                                            func=Name(id='U256', ctx=Load()),
                                            args=[
                                                Constant(value=32)],
                                            keywords=[]),
                                        op=Sub(),
                                        right=BinOp(
                                            left=Name(id='byte_num', ctx=Load()),
                                            op=Add(),
                                            right=Call(
                                                func=Name(id='U256', ctx=Load()),
                                                args=[
                                                    Constant(value=1)],
                                                keywords=[])))),
                                Assign(
                                    targets=[
                                        Name(id='result', ctx=Store())],
                                    value=Call(
                                        func=Attribute(
                                            value=Name(id='U256', ctx=Load()),
                                            attr='from_be_bytes',
                                            ctx=Load()),
                                        args=[
                                            BinOp(
                                                left=Call(
                                                    func=Name(id='bytearray', ctx=Load()),
                                                    args=[
                                                        BinOp(
                                                            left=List(
                                                                elts=[
                                                                    Constant(value=255)],
                                                                ctx=Load()),
                                                            op=Mult(),
                                                            right=Name(id='num_bytes_prepend', ctx=Load()))],
                                                    keywords=[]),
                                                op=Add(),
                                                right=Name(id='value_bytes', ctx=Load()))],
                                        keywords=[]))])]),
                Expr(
                    value=Call(
                        func=Name(id='push', ctx=Load()),
                        args=[
                            Attribute(
                                value=Name(id='evm', ctx=Load()),
                                attr='stack',
                                ctx=Load()),
                            Name(id='result', ctx=Load())],
                        keywords=[])),
                AugAssign(
                    target=Attribute(
                        value=Name(id='evm', ctx=Load()),
                        attr='pc',
                        ctx=Store()),
                    op=Add(),
                    value=Call(
                        func=Name(id='Uint', ctx=Load()),
                        args=[
                            Constant(value=1)],
                        keywords=[]))],
            decorator_list=[],
            returns=Constant(value=None))],
    type_ignores=[])
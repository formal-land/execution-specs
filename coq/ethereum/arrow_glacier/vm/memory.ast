Module(
    body=[
        Expr(
            value=Constant(value='\nEthereum Virtual Machine (EVM) Memory\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. contents:: Table of Contents\n    :backlinks: none\n    :local:\n\nIntroduction\n------------\n\nEVM memory operations.\n')),
        ImportFrom(
            module='ethereum_types.bytes',
            names=[
                alias(name='Bytes')],
            level=0),
        ImportFrom(
            module='ethereum_types.numeric',
            names=[
                alias(name='U256'),
                alias(name='Uint')],
            level=0),
        ImportFrom(
            module='ethereum.utils.byte',
            names=[
                alias(name='right_pad_zero_bytes')],
            level=0),
        FunctionDef(
            name='memory_write',
            args=arguments(
                posonlyargs=[],
                args=[
                    arg(
                        arg='memory',
                        annotation=Name(id='bytearray', ctx=Load())),
                    arg(
                        arg='start_position',
                        annotation=Name(id='U256', ctx=Load())),
                    arg(
                        arg='value',
                        annotation=Name(id='Bytes', ctx=Load()))],
                kwonlyargs=[],
                kw_defaults=[],
                defaults=[]),
            body=[
                Expr(
                    value=Constant(value='\n    Writes to memory.\n\n    Parameters\n    ----------\n    memory :\n        Memory contents of the EVM.\n    start_position :\n        Starting pointer to the memory.\n    value :\n        Data to write to memory.\n    ')),
                Assign(
                    targets=[
                        Subscript(
                            value=Name(id='memory', ctx=Load()),
                            slice=Slice(
                                lower=Name(id='start_position', ctx=Load()),
                                upper=BinOp(
                                    left=Call(
                                        func=Name(id='int', ctx=Load()),
                                        args=[
                                            Name(id='start_position', ctx=Load())],
                                        keywords=[]),
                                    op=Add(),
                                    right=Call(
                                        func=Name(id='len', ctx=Load()),
                                        args=[
                                            Name(id='value', ctx=Load())],
                                        keywords=[]))),
                            ctx=Store())],
                    value=Name(id='value', ctx=Load()))],
            decorator_list=[],
            returns=Constant(value=None)),
        FunctionDef(
            name='memory_read_bytes',
            args=arguments(
                posonlyargs=[],
                args=[
                    arg(
                        arg='memory',
                        annotation=Name(id='bytearray', ctx=Load())),
                    arg(
                        arg='start_position',
                        annotation=Name(id='U256', ctx=Load())),
                    arg(
                        arg='size',
                        annotation=Name(id='U256', ctx=Load()))],
                kwonlyargs=[],
                kw_defaults=[],
                defaults=[]),
            body=[
                Expr(
                    value=Constant(value='\n    Read bytes from memory.\n\n    Parameters\n    ----------\n    memory :\n        Memory contents of the EVM.\n    start_position :\n        Starting pointer to the memory.\n    size :\n        Size of the data that needs to be read from `start_position`.\n\n    Returns\n    -------\n    data_bytes :\n        Data read from memory.\n    ')),
                Return(
                    value=Subscript(
                        value=Name(id='memory', ctx=Load()),
                        slice=Slice(
                            lower=Name(id='start_position', ctx=Load()),
                            upper=BinOp(
                                left=Call(
                                    func=Name(id='Uint', ctx=Load()),
                                    args=[
                                        Name(id='start_position', ctx=Load())],
                                    keywords=[]),
                                op=Add(),
                                right=Call(
                                    func=Name(id='Uint', ctx=Load()),
                                    args=[
                                        Name(id='size', ctx=Load())],
                                    keywords=[]))),
                        ctx=Load()))],
            decorator_list=[],
            returns=Name(id='bytearray', ctx=Load())),
        FunctionDef(
            name='buffer_read',
            args=arguments(
                posonlyargs=[],
                args=[
                    arg(
                        arg='buffer',
                        annotation=Name(id='Bytes', ctx=Load())),
                    arg(
                        arg='start_position',
                        annotation=Name(id='U256', ctx=Load())),
                    arg(
                        arg='size',
                        annotation=Name(id='U256', ctx=Load()))],
                kwonlyargs=[],
                kw_defaults=[],
                defaults=[]),
            body=[
                Expr(
                    value=Constant(value='\n    Read bytes from a buffer. Padding with zeros if necessary.\n\n    Parameters\n    ----------\n    buffer :\n        Memory contents of the EVM.\n    start_position :\n        Starting pointer to the memory.\n    size :\n        Size of the data that needs to be read from `start_position`.\n\n    Returns\n    -------\n    data_bytes :\n        Data read from memory.\n    ')),
                Return(
                    value=Call(
                        func=Name(id='right_pad_zero_bytes', ctx=Load()),
                        args=[
                            Subscript(
                                value=Name(id='buffer', ctx=Load()),
                                slice=Slice(
                                    lower=Name(id='start_position', ctx=Load()),
                                    upper=BinOp(
                                        left=Call(
                                            func=Name(id='Uint', ctx=Load()),
                                            args=[
                                                Name(id='start_position', ctx=Load())],
                                            keywords=[]),
                                        op=Add(),
                                        right=Call(
                                            func=Name(id='Uint', ctx=Load()),
                                            args=[
                                                Name(id='size', ctx=Load())],
                                            keywords=[]))),
                                ctx=Load()),
                            Name(id='size', ctx=Load())],
                        keywords=[]))],
            decorator_list=[],
            returns=Name(id='Bytes', ctx=Load()))],
    type_ignores=[])
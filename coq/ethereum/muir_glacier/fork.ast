Module(
    body=[
        Expr(
            value=Constant(value='\nEthereum Specification\n^^^^^^^^^^^^^^^^^^^^^^\n\n.. contents:: Table of Contents\n    :backlinks: none\n    :local:\n\nIntroduction\n------------\n\nEntry point for the Ethereum specification.\n')),
        ImportFrom(
            module='dataclasses',
            names=[
                alias(name='dataclass')],
            level=0),
        ImportFrom(
            module='typing',
            names=[
                alias(name='List'),
                alias(name='Optional'),
                alias(name='Set'),
                alias(name='Tuple')],
            level=0),
        ImportFrom(
            module='ethereum_types.bytes',
            names=[
                alias(name='Bytes'),
                alias(name='Bytes0')],
            level=0),
        ImportFrom(
            module='ethereum_types.numeric',
            names=[
                alias(name='U64'),
                alias(name='U256'),
                alias(name='Uint')],
            level=0),
        ImportFrom(
            module='ethereum.crypto.elliptic_curve',
            names=[
                alias(name='SECP256K1N'),
                alias(name='secp256k1_recover')],
            level=0),
        ImportFrom(
            module='ethereum.crypto.hash',
            names=[
                alias(name='Hash32'),
                alias(name='keccak256')],
            level=0),
        ImportFrom(
            module='ethereum.ethash',
            names=[
                alias(name='dataset_size'),
                alias(name='generate_cache'),
                alias(name='hashimoto_light')],
            level=0),
        ImportFrom(
            module='ethereum.exceptions',
            names=[
                alias(name='InvalidBlock'),
                alias(name='InvalidSenderError')],
            level=0),
        ImportFrom(
            names=[
                alias(name='rlp')],
            level=2),
        ImportFrom(
            names=[
                alias(name='vm')],
            level=1),
        ImportFrom(
            module='blocks',
            names=[
                alias(name='Block'),
                alias(name='Header'),
                alias(name='Log'),
                alias(name='Receipt')],
            level=1),
        ImportFrom(
            module='bloom',
            names=[
                alias(name='logs_bloom')],
            level=1),
        ImportFrom(
            module='fork_types',
            names=[
                alias(name='Address'),
                alias(name='Bloom'),
                alias(name='Root')],
            level=1),
        ImportFrom(
            module='state',
            names=[
                alias(name='State'),
                alias(name='account_exists_and_is_empty'),
                alias(name='create_ether'),
                alias(name='destroy_account'),
                alias(name='get_account'),
                alias(name='increment_nonce'),
                alias(name='set_account_balance'),
                alias(name='state_root')],
            level=1),
        ImportFrom(
            module='transactions',
            names=[
                alias(name='TX_BASE_COST'),
                alias(name='TX_CREATE_COST'),
                alias(name='TX_DATA_COST_PER_NON_ZERO'),
                alias(name='TX_DATA_COST_PER_ZERO'),
                alias(name='Transaction')],
            level=1),
        ImportFrom(
            module='trie',
            names=[
                alias(name='Trie'),
                alias(name='root'),
                alias(name='trie_set')],
            level=1),
        ImportFrom(
            module='utils.message',
            names=[
                alias(name='prepare_message')],
            level=1),
        ImportFrom(
            module='vm.interpreter',
            names=[
                alias(name='process_message_call')],
            level=1),
        Assign(
            targets=[
                Name(id='BLOCK_REWARD', ctx=Store())],
            value=Call(
                func=Name(id='U256', ctx=Load()),
                args=[
                    BinOp(
                        left=Constant(value=2),
                        op=Mult(),
                        right=BinOp(
                            left=Constant(value=10),
                            op=Pow(),
                            right=Constant(value=18)))],
                keywords=[])),
        Assign(
            targets=[
                Name(id='GAS_LIMIT_ADJUSTMENT_FACTOR', ctx=Store())],
            value=Call(
                func=Name(id='Uint', ctx=Load()),
                args=[
                    Constant(value=1024)],
                keywords=[])),
        Assign(
            targets=[
                Name(id='GAS_LIMIT_MINIMUM', ctx=Store())],
            value=Call(
                func=Name(id='Uint', ctx=Load()),
                args=[
                    Constant(value=5000)],
                keywords=[])),
        Assign(
            targets=[
                Name(id='MINIMUM_DIFFICULTY', ctx=Store())],
            value=Call(
                func=Name(id='Uint', ctx=Load()),
                args=[
                    Constant(value=131072)],
                keywords=[])),
        Assign(
            targets=[
                Name(id='MAX_OMMER_DEPTH', ctx=Store())],
            value=Call(
                func=Name(id='Uint', ctx=Load()),
                args=[
                    Constant(value=6)],
                keywords=[])),
        Assign(
            targets=[
                Name(id='BOMB_DELAY_BLOCKS', ctx=Store())],
            value=Constant(value=9000000)),
        Assign(
            targets=[
                Name(id='EMPTY_OMMER_HASH', ctx=Store())],
            value=Call(
                func=Name(id='keccak256', ctx=Load()),
                args=[
                    Call(
                        func=Attribute(
                            value=Name(id='rlp', ctx=Load()),
                            attr='encode',
                            ctx=Load()),
                        args=[
                            List(elts=[], ctx=Load())],
                        keywords=[])],
                keywords=[])),
        ClassDef(
            name='BlockChain',
            bases=[],
            keywords=[],
            body=[
                Expr(
                    value=Constant(value='\n    History and current state of the block chain.\n    ')),
                AnnAssign(
                    target=Name(id='blocks', ctx=Store()),
                    annotation=Subscript(
                        value=Name(id='List', ctx=Load()),
                        slice=Name(id='Block', ctx=Load()),
                        ctx=Load()),
                    simple=1),
                AnnAssign(
                    target=Name(id='state', ctx=Store()),
                    annotation=Name(id='State', ctx=Load()),
                    simple=1),
                AnnAssign(
                    target=Name(id='chain_id', ctx=Store()),
                    annotation=Name(id='U64', ctx=Load()),
                    simple=1)],
            decorator_list=[
                Name(id='dataclass', ctx=Load())]),
        FunctionDef(
            name='apply_fork',
            args=arguments(
                posonlyargs=[],
                args=[
                    arg(
                        arg='old',
                        annotation=Name(id='BlockChain', ctx=Load()))],
                kwonlyargs=[],
                kw_defaults=[],
                defaults=[]),
            body=[
                Expr(
                    value=Constant(value='\n    Transforms the state from the previous hard fork (`old`) into the block\n    chain object for this hard fork and returns it.\n\n    When forks need to implement an irregular state transition, this function\n    is used to handle the irregularity. See the :ref:`DAO Fork <dao-fork>` for\n    an example.\n\n    Parameters\n    ----------\n    old :\n        Previous block chain object.\n\n    Returns\n    -------\n    new : `BlockChain`\n        Upgraded block chain object for this hard fork.\n    ')),
                Return(
                    value=Name(id='old', ctx=Load()))],
            decorator_list=[],
            returns=Name(id='BlockChain', ctx=Load())),
        FunctionDef(
            name='get_last_256_block_hashes',
            args=arguments(
                posonlyargs=[],
                args=[
                    arg(
                        arg='chain',
                        annotation=Name(id='BlockChain', ctx=Load()))],
                kwonlyargs=[],
                kw_defaults=[],
                defaults=[]),
            body=[
                Expr(
                    value=Constant(value='\n    Obtain the list of hashes of the previous 256 blocks in order of\n    increasing block number.\n\n    This function will return less hashes for the first 256 blocks.\n\n    The ``BLOCKHASH`` opcode needs to access the latest hashes on the chain,\n    therefore this function retrieves them.\n\n    Parameters\n    ----------\n    chain :\n        History and current state.\n\n    Returns\n    -------\n    recent_block_hashes : `List[Hash32]`\n        Hashes of the recent 256 blocks in order of increasing block number.\n    ')),
                Assign(
                    targets=[
                        Name(id='recent_blocks', ctx=Store())],
                    value=Subscript(
                        value=Attribute(
                            value=Name(id='chain', ctx=Load()),
                            attr='blocks',
                            ctx=Load()),
                        slice=Slice(
                            lower=UnaryOp(
                                op=USub(),
                                operand=Constant(value=255))),
                        ctx=Load())),
                If(
                    test=Compare(
                        left=Call(
                            func=Name(id='len', ctx=Load()),
                            args=[
                                Name(id='recent_blocks', ctx=Load())],
                            keywords=[]),
                        ops=[
                            Eq()],
                        comparators=[
                            Constant(value=0)]),
                    body=[
                        Return(
                            value=List(elts=[], ctx=Load()))],
                    orelse=[]),
                Assign(
                    targets=[
                        Name(id='recent_block_hashes', ctx=Store())],
                    value=List(elts=[], ctx=Load())),
                For(
                    target=Name(id='block', ctx=Store()),
                    iter=Name(id='recent_blocks', ctx=Load()),
                    body=[
                        Assign(
                            targets=[
                                Name(id='prev_block_hash', ctx=Store())],
                            value=Attribute(
                                value=Attribute(
                                    value=Name(id='block', ctx=Load()),
                                    attr='header',
                                    ctx=Load()),
                                attr='parent_hash',
                                ctx=Load())),
                        Expr(
                            value=Call(
                                func=Attribute(
                                    value=Name(id='recent_block_hashes', ctx=Load()),
                                    attr='append',
                                    ctx=Load()),
                                args=[
                                    Name(id='prev_block_hash', ctx=Load())],
                                keywords=[]))],
                    orelse=[]),
                Assign(
                    targets=[
                        Name(id='most_recent_block_hash', ctx=Store())],
                    value=Call(
                        func=Name(id='keccak256', ctx=Load()),
                        args=[
                            Call(
                                func=Attribute(
                                    value=Name(id='rlp', ctx=Load()),
                                    attr='encode',
                                    ctx=Load()),
                                args=[
                                    Attribute(
                                        value=Subscript(
                                            value=Name(id='recent_blocks', ctx=Load()),
                                            slice=UnaryOp(
                                                op=USub(),
                                                operand=Constant(value=1)),
                                            ctx=Load()),
                                        attr='header',
                                        ctx=Load())],
                                keywords=[])],
                        keywords=[])),
                Expr(
                    value=Call(
                        func=Attribute(
                            value=Name(id='recent_block_hashes', ctx=Load()),
                            attr='append',
                            ctx=Load()),
                        args=[
                            Name(id='most_recent_block_hash', ctx=Load())],
                        keywords=[])),
                Return(
                    value=Name(id='recent_block_hashes', ctx=Load()))],
            decorator_list=[],
            returns=Subscript(
                value=Name(id='List', ctx=Load()),
                slice=Name(id='Hash32', ctx=Load()),
                ctx=Load())),
        FunctionDef(
            name='state_transition',
            args=arguments(
                posonlyargs=[],
                args=[
                    arg(
                        arg='chain',
                        annotation=Name(id='BlockChain', ctx=Load())),
                    arg(
                        arg='block',
                        annotation=Name(id='Block', ctx=Load()))],
                kwonlyargs=[],
                kw_defaults=[],
                defaults=[]),
            body=[
                Expr(
                    value=Constant(value="\n    Attempts to apply a block to an existing block chain.\n\n    All parts of the block's contents need to be verified before being added\n    to the chain. Blocks are verified by ensuring that the contents of the\n    block make logical sense with the contents of the parent block. The\n    information in the block's header must also match the corresponding\n    information in the block.\n\n    To implement Ethereum, in theory clients are only required to store the\n    most recent 255 blocks of the chain since as far as execution is\n    concerned, only those blocks are accessed. Practically, however, clients\n    should store more blocks to handle reorgs.\n\n    Parameters\n    ----------\n    chain :\n        History and current state.\n    block :\n        Block to apply to `chain`.\n    ")),
                Assign(
                    targets=[
                        Name(id='parent_header', ctx=Store())],
                    value=Attribute(
                        value=Subscript(
                            value=Attribute(
                                value=Name(id='chain', ctx=Load()),
                                attr='blocks',
                                ctx=Load()),
                            slice=UnaryOp(
                                op=USub(),
                                operand=Constant(value=1)),
                            ctx=Load()),
                        attr='header',
                        ctx=Load())),
                Expr(
                    value=Call(
                        func=Name(id='validate_header', ctx=Load()),
                        args=[
                            Attribute(
                                value=Name(id='block', ctx=Load()),
                                attr='header',
                                ctx=Load()),
                            Name(id='parent_header', ctx=Load())],
                        keywords=[])),
                Expr(
                    value=Call(
                        func=Name(id='validate_ommers', ctx=Load()),
                        args=[
                            Attribute(
                                value=Name(id='block', ctx=Load()),
                                attr='ommers',
                                ctx=Load()),
                            Attribute(
                                value=Name(id='block', ctx=Load()),
                                attr='header',
                                ctx=Load()),
                            Name(id='chain', ctx=Load())],
                        keywords=[])),
                Assign(
                    targets=[
                        Name(id='apply_body_output', ctx=Store())],
                    value=Call(
                        func=Name(id='apply_body', ctx=Load()),
                        args=[
                            Attribute(
                                value=Name(id='chain', ctx=Load()),
                                attr='state',
                                ctx=Load()),
                            Call(
                                func=Name(id='get_last_256_block_hashes', ctx=Load()),
                                args=[
                                    Name(id='chain', ctx=Load())],
                                keywords=[]),
                            Attribute(
                                value=Attribute(
                                    value=Name(id='block', ctx=Load()),
                                    attr='header',
                                    ctx=Load()),
                                attr='coinbase',
                                ctx=Load()),
                            Attribute(
                                value=Attribute(
                                    value=Name(id='block', ctx=Load()),
                                    attr='header',
                                    ctx=Load()),
                                attr='number',
                                ctx=Load()),
                            Attribute(
                                value=Attribute(
                                    value=Name(id='block', ctx=Load()),
                                    attr='header',
                                    ctx=Load()),
                                attr='gas_limit',
                                ctx=Load()),
                            Attribute(
                                value=Attribute(
                                    value=Name(id='block', ctx=Load()),
                                    attr='header',
                                    ctx=Load()),
                                attr='timestamp',
                                ctx=Load()),
                            Attribute(
                                value=Attribute(
                                    value=Name(id='block', ctx=Load()),
                                    attr='header',
                                    ctx=Load()),
                                attr='difficulty',
                                ctx=Load()),
                            Attribute(
                                value=Name(id='block', ctx=Load()),
                                attr='transactions',
                                ctx=Load()),
                            Attribute(
                                value=Name(id='block', ctx=Load()),
                                attr='ommers',
                                ctx=Load()),
                            Attribute(
                                value=Name(id='chain', ctx=Load()),
                                attr='chain_id',
                                ctx=Load())],
                        keywords=[])),
                If(
                    test=Compare(
                        left=Attribute(
                            value=Name(id='apply_body_output', ctx=Load()),
                            attr='block_gas_used',
                            ctx=Load()),
                        ops=[
                            NotEq()],
                        comparators=[
                            Attribute(
                                value=Attribute(
                                    value=Name(id='block', ctx=Load()),
                                    attr='header',
                                    ctx=Load()),
                                attr='gas_used',
                                ctx=Load())]),
                    body=[
                        Raise(
                            exc=Call(
                                func=Name(id='InvalidBlock', ctx=Load()),
                                args=[
                                    JoinedStr(
                                        values=[
                                            FormattedValue(
                                                value=Attribute(
                                                    value=Name(id='apply_body_output', ctx=Load()),
                                                    attr='block_gas_used',
                                                    ctx=Load()),
                                                conversion=-1),
                                            Constant(value=' != '),
                                            FormattedValue(
                                                value=Attribute(
                                                    value=Attribute(
                                                        value=Name(id='block', ctx=Load()),
                                                        attr='header',
                                                        ctx=Load()),
                                                    attr='gas_used',
                                                    ctx=Load()),
                                                conversion=-1)])],
                                keywords=[]))],
                    orelse=[]),
                If(
                    test=Compare(
                        left=Attribute(
                            value=Name(id='apply_body_output', ctx=Load()),
                            attr='transactions_root',
                            ctx=Load()),
                        ops=[
                            NotEq()],
                        comparators=[
                            Attribute(
                                value=Attribute(
                                    value=Name(id='block', ctx=Load()),
                                    attr='header',
                                    ctx=Load()),
                                attr='transactions_root',
                                ctx=Load())]),
                    body=[
                        Raise(
                            exc=Name(id='InvalidBlock', ctx=Load()))],
                    orelse=[]),
                If(
                    test=Compare(
                        left=Attribute(
                            value=Name(id='apply_body_output', ctx=Load()),
                            attr='state_root',
                            ctx=Load()),
                        ops=[
                            NotEq()],
                        comparators=[
                            Attribute(
                                value=Attribute(
                                    value=Name(id='block', ctx=Load()),
                                    attr='header',
                                    ctx=Load()),
                                attr='state_root',
                                ctx=Load())]),
                    body=[
                        Raise(
                            exc=Name(id='InvalidBlock', ctx=Load()))],
                    orelse=[]),
                If(
                    test=Compare(
                        left=Attribute(
                            value=Name(id='apply_body_output', ctx=Load()),
                            attr='receipt_root',
                            ctx=Load()),
                        ops=[
                            NotEq()],
                        comparators=[
                            Attribute(
                                value=Attribute(
                                    value=Name(id='block', ctx=Load()),
                                    attr='header',
                                    ctx=Load()),
                                attr='receipt_root',
                                ctx=Load())]),
                    body=[
                        Raise(
                            exc=Name(id='InvalidBlock', ctx=Load()))],
                    orelse=[]),
                If(
                    test=Compare(
                        left=Attribute(
                            value=Name(id='apply_body_output', ctx=Load()),
                            attr='block_logs_bloom',
                            ctx=Load()),
                        ops=[
                            NotEq()],
                        comparators=[
                            Attribute(
                                value=Attribute(
                                    value=Name(id='block', ctx=Load()),
                                    attr='header',
                                    ctx=Load()),
                                attr='bloom',
                                ctx=Load())]),
                    body=[
                        Raise(
                            exc=Name(id='InvalidBlock', ctx=Load()))],
                    orelse=[]),
                Expr(
                    value=Call(
                        func=Attribute(
                            value=Attribute(
                                value=Name(id='chain', ctx=Load()),
                                attr='blocks',
                                ctx=Load()),
                            attr='append',
                            ctx=Load()),
                        args=[
                            Name(id='block', ctx=Load())],
                        keywords=[])),
                If(
                    test=Compare(
                        left=Call(
                            func=Name(id='len', ctx=Load()),
                            args=[
                                Attribute(
                                    value=Name(id='chain', ctx=Load()),
                                    attr='blocks',
                                    ctx=Load())],
                            keywords=[]),
                        ops=[
                            Gt()],
                        comparators=[
                            Constant(value=255)]),
                    body=[
                        Assign(
                            targets=[
                                Attribute(
                                    value=Name(id='chain', ctx=Load()),
                                    attr='blocks',
                                    ctx=Store())],
                            value=Subscript(
                                value=Attribute(
                                    value=Name(id='chain', ctx=Load()),
                                    attr='blocks',
                                    ctx=Load()),
                                slice=Slice(
                                    lower=UnaryOp(
                                        op=USub(),
                                        operand=Constant(value=255))),
                                ctx=Load()))],
                    orelse=[])],
            decorator_list=[],
            returns=Constant(value=None)),
        FunctionDef(
            name='validate_header',
            args=arguments(
                posonlyargs=[],
                args=[
                    arg(
                        arg='header',
                        annotation=Name(id='Header', ctx=Load())),
                    arg(
                        arg='parent_header',
                        annotation=Name(id='Header', ctx=Load()))],
                kwonlyargs=[],
                kw_defaults=[],
                defaults=[]),
            body=[
                Expr(
                    value=Constant(value="\n    Verifies a block header.\n\n    In order to consider a block's header valid, the logic for the\n    quantities in the header should match the logic for the block itself.\n    For example the header timestamp should be greater than the block's parent\n    timestamp because the block was created *after* the parent block.\n    Additionally, the block's number should be directly following the parent\n    block's number since it is the next block in the sequence.\n\n    Parameters\n    ----------\n    header :\n        Header to check for correctness.\n    parent_header :\n        Parent Header of the header to check for correctness\n    ")),
                Assign(
                    targets=[
                        Name(id='parent_has_ommers', ctx=Store())],
                    value=Compare(
                        left=Attribute(
                            value=Name(id='parent_header', ctx=Load()),
                            attr='ommers_hash',
                            ctx=Load()),
                        ops=[
                            NotEq()],
                        comparators=[
                            Name(id='EMPTY_OMMER_HASH', ctx=Load())])),
                If(
                    test=Compare(
                        left=Attribute(
                            value=Name(id='header', ctx=Load()),
                            attr='timestamp',
                            ctx=Load()),
                        ops=[
                            LtE()],
                        comparators=[
                            Attribute(
                                value=Name(id='parent_header', ctx=Load()),
                                attr='timestamp',
                                ctx=Load())]),
                    body=[
                        Raise(
                            exc=Name(id='InvalidBlock', ctx=Load()))],
                    orelse=[]),
                If(
                    test=Compare(
                        left=Attribute(
                            value=Name(id='header', ctx=Load()),
                            attr='number',
                            ctx=Load()),
                        ops=[
                            NotEq()],
                        comparators=[
                            BinOp(
                                left=Attribute(
                                    value=Name(id='parent_header', ctx=Load()),
                                    attr='number',
                                    ctx=Load()),
                                op=Add(),
                                right=Call(
                                    func=Name(id='Uint', ctx=Load()),
                                    args=[
                                        Constant(value=1)],
                                    keywords=[]))]),
                    body=[
                        Raise(
                            exc=Name(id='InvalidBlock', ctx=Load()))],
                    orelse=[]),
                If(
                    test=UnaryOp(
                        op=Not(),
                        operand=Call(
                            func=Name(id='check_gas_limit', ctx=Load()),
                            args=[
                                Attribute(
                                    value=Name(id='header', ctx=Load()),
                                    attr='gas_limit',
                                    ctx=Load()),
                                Attribute(
                                    value=Name(id='parent_header', ctx=Load()),
                                    attr='gas_limit',
                                    ctx=Load())],
                            keywords=[])),
                    body=[
                        Raise(
                            exc=Name(id='InvalidBlock', ctx=Load()))],
                    orelse=[]),
                If(
                    test=Compare(
                        left=Call(
                            func=Name(id='len', ctx=Load()),
                            args=[
                                Attribute(
                                    value=Name(id='header', ctx=Load()),
                                    attr='extra_data',
                                    ctx=Load())],
                            keywords=[]),
                        ops=[
                            Gt()],
                        comparators=[
                            Constant(value=32)]),
                    body=[
                        Raise(
                            exc=Name(id='InvalidBlock', ctx=Load()))],
                    orelse=[]),
                Assign(
                    targets=[
                        Name(id='block_difficulty', ctx=Store())],
                    value=Call(
                        func=Name(id='calculate_block_difficulty', ctx=Load()),
                        args=[
                            Attribute(
                                value=Name(id='header', ctx=Load()),
                                attr='number',
                                ctx=Load()),
                            Attribute(
                                value=Name(id='header', ctx=Load()),
                                attr='timestamp',
                                ctx=Load()),
                            Attribute(
                                value=Name(id='parent_header', ctx=Load()),
                                attr='timestamp',
                                ctx=Load()),
                            Attribute(
                                value=Name(id='parent_header', ctx=Load()),
                                attr='difficulty',
                                ctx=Load()),
                            Name(id='parent_has_ommers', ctx=Load())],
                        keywords=[])),
                If(
                    test=Compare(
                        left=Attribute(
                            value=Name(id='header', ctx=Load()),
                            attr='difficulty',
                            ctx=Load()),
                        ops=[
                            NotEq()],
                        comparators=[
                            Name(id='block_difficulty', ctx=Load())]),
                    body=[
                        Raise(
                            exc=Name(id='InvalidBlock', ctx=Load()))],
                    orelse=[]),
                Assign(
                    targets=[
                        Name(id='block_parent_hash', ctx=Store())],
                    value=Call(
                        func=Name(id='keccak256', ctx=Load()),
                        args=[
                            Call(
                                func=Attribute(
                                    value=Name(id='rlp', ctx=Load()),
                                    attr='encode',
                                    ctx=Load()),
                                args=[
                                    Name(id='parent_header', ctx=Load())],
                                keywords=[])],
                        keywords=[])),
                If(
                    test=Compare(
                        left=Attribute(
                            value=Name(id='header', ctx=Load()),
                            attr='parent_hash',
                            ctx=Load()),
                        ops=[
                            NotEq()],
                        comparators=[
                            Name(id='block_parent_hash', ctx=Load())]),
                    body=[
                        Raise(
                            exc=Name(id='InvalidBlock', ctx=Load()))],
                    orelse=[]),
                Expr(
                    value=Call(
                        func=Name(id='validate_proof_of_work', ctx=Load()),
                        args=[
                            Name(id='header', ctx=Load())],
                        keywords=[]))],
            decorator_list=[],
            returns=Constant(value=None)),
        FunctionDef(
            name='generate_header_hash_for_pow',
            args=arguments(
                posonlyargs=[],
                args=[
                    arg(
                        arg='header',
                        annotation=Name(id='Header', ctx=Load()))],
                kwonlyargs=[],
                kw_defaults=[],
                defaults=[]),
            body=[
                Expr(
                    value=Constant(value='\n    Generate rlp hash of the header which is to be used for Proof-of-Work\n    verification.\n\n    In other words, the PoW artefacts `mix_digest` and `nonce` are ignored\n    while calculating this hash.\n\n    A particular PoW is valid for a single hash, that hash is computed by\n    this function. The `nonce` and `mix_digest` are omitted from this hash\n    because they are being changed by miners in their search for a sufficient\n    proof-of-work.\n\n    Parameters\n    ----------\n    header :\n        The header object for which the hash is to be generated.\n\n    Returns\n    -------\n    hash : `Hash32`\n        The PoW valid rlp hash of the passed in header.\n    ')),
                Assign(
                    targets=[
                        Name(id='header_data_without_pow_artefacts', ctx=Store())],
                    value=Tuple(
                        elts=[
                            Attribute(
                                value=Name(id='header', ctx=Load()),
                                attr='parent_hash',
                                ctx=Load()),
                            Attribute(
                                value=Name(id='header', ctx=Load()),
                                attr='ommers_hash',
                                ctx=Load()),
                            Attribute(
                                value=Name(id='header', ctx=Load()),
                                attr='coinbase',
                                ctx=Load()),
                            Attribute(
                                value=Name(id='header', ctx=Load()),
                                attr='state_root',
                                ctx=Load()),
                            Attribute(
                                value=Name(id='header', ctx=Load()),
                                attr='transactions_root',
                                ctx=Load()),
                            Attribute(
                                value=Name(id='header', ctx=Load()),
                                attr='receipt_root',
                                ctx=Load()),
                            Attribute(
                                value=Name(id='header', ctx=Load()),
                                attr='bloom',
                                ctx=Load()),
                            Attribute(
                                value=Name(id='header', ctx=Load()),
                                attr='difficulty',
                                ctx=Load()),
                            Attribute(
                                value=Name(id='header', ctx=Load()),
                                attr='number',
                                ctx=Load()),
                            Attribute(
                                value=Name(id='header', ctx=Load()),
                                attr='gas_limit',
                                ctx=Load()),
                            Attribute(
                                value=Name(id='header', ctx=Load()),
                                attr='gas_used',
                                ctx=Load()),
                            Attribute(
                                value=Name(id='header', ctx=Load()),
                                attr='timestamp',
                                ctx=Load()),
                            Attribute(
                                value=Name(id='header', ctx=Load()),
                                attr='extra_data',
                                ctx=Load())],
                        ctx=Load())),
                Return(
                    value=Call(
                        func=Attribute(
                            value=Name(id='rlp', ctx=Load()),
                            attr='rlp_hash',
                            ctx=Load()),
                        args=[
                            Name(id='header_data_without_pow_artefacts', ctx=Load())],
                        keywords=[]))],
            decorator_list=[],
            returns=Name(id='Hash32', ctx=Load())),
        FunctionDef(
            name='validate_proof_of_work',
            args=arguments(
                posonlyargs=[],
                args=[
                    arg(
                        arg='header',
                        annotation=Name(id='Header', ctx=Load()))],
                kwonlyargs=[],
                kw_defaults=[],
                defaults=[]),
            body=[
                Expr(
                    value=Constant(value="\n    Validates the Proof of Work constraints.\n\n    In order to verify that a miner's proof-of-work is valid for a block, a\n    ``mix-digest`` and ``result`` are calculated using the ``hashimoto_light``\n    hash function. The mix digest is a hash of the header and the nonce that\n    is passed through and it confirms whether or not proof-of-work was done\n    on the correct block. The result is the actual hash value of the block.\n\n    Parameters\n    ----------\n    header :\n        Header of interest.\n    ")),
                Assign(
                    targets=[
                        Name(id='header_hash', ctx=Store())],
                    value=Call(
                        func=Name(id='generate_header_hash_for_pow', ctx=Load()),
                        args=[
                            Name(id='header', ctx=Load())],
                        keywords=[])),
                Assign(
                    targets=[
                        Name(id='cache', ctx=Store())],
                    value=Call(
                        func=Name(id='generate_cache', ctx=Load()),
                        args=[
                            Attribute(
                                value=Name(id='header', ctx=Load()),
                                attr='number',
                                ctx=Load())],
                        keywords=[])),
                Assign(
                    targets=[
                        Tuple(
                            elts=[
                                Name(id='mix_digest', ctx=Store()),
                                Name(id='result', ctx=Store())],
                            ctx=Store())],
                    value=Call(
                        func=Name(id='hashimoto_light', ctx=Load()),
                        args=[
                            Name(id='header_hash', ctx=Load()),
                            Attribute(
                                value=Name(id='header', ctx=Load()),
                                attr='nonce',
                                ctx=Load()),
                            Name(id='cache', ctx=Load()),
                            Call(
                                func=Name(id='dataset_size', ctx=Load()),
                                args=[
                                    Attribute(
                                        value=Name(id='header', ctx=Load()),
                                        attr='number',
                                        ctx=Load())],
                                keywords=[])],
                        keywords=[])),
                If(
                    test=Compare(
                        left=Name(id='mix_digest', ctx=Load()),
                        ops=[
                            NotEq()],
                        comparators=[
                            Attribute(
                                value=Name(id='header', ctx=Load()),
                                attr='mix_digest',
                                ctx=Load())]),
                    body=[
                        Raise(
                            exc=Name(id='InvalidBlock', ctx=Load()))],
                    orelse=[]),
                Assign(
                    targets=[
                        Name(id='limit', ctx=Store())],
                    value=BinOp(
                        left=Call(
                            func=Name(id='Uint', ctx=Load()),
                            args=[
                                Attribute(
                                    value=Name(id='U256', ctx=Load()),
                                    attr='MAX_VALUE',
                                    ctx=Load())],
                            keywords=[]),
                        op=Add(),
                        right=Call(
                            func=Name(id='Uint', ctx=Load()),
                            args=[
                                Constant(value=1)],
                            keywords=[]))),
                If(
                    test=Compare(
                        left=Call(
                            func=Attribute(
                                value=Name(id='Uint', ctx=Load()),
                                attr='from_be_bytes',
                                ctx=Load()),
                            args=[
                                Name(id='result', ctx=Load())],
                            keywords=[]),
                        ops=[
                            Gt()],
                        comparators=[
                            BinOp(
                                left=Name(id='limit', ctx=Load()),
                                op=FloorDiv(),
                                right=Attribute(
                                    value=Name(id='header', ctx=Load()),
                                    attr='difficulty',
                                    ctx=Load()))]),
                    body=[
                        Raise(
                            exc=Name(id='InvalidBlock', ctx=Load()))],
                    orelse=[])],
            decorator_list=[],
            returns=Constant(value=None)),
        FunctionDef(
            name='check_transaction',
            args=arguments(
                posonlyargs=[],
                args=[
                    arg(
                        arg='tx',
                        annotation=Name(id='Transaction', ctx=Load())),
                    arg(
                        arg='gas_available',
                        annotation=Name(id='Uint', ctx=Load())),
                    arg(
                        arg='chain_id',
                        annotation=Name(id='U64', ctx=Load()))],
                kwonlyargs=[],
                kw_defaults=[],
                defaults=[]),
            body=[
                Expr(
                    value=Constant(value='\n    Check if the transaction is includable in the block.\n\n    Parameters\n    ----------\n    tx :\n        The transaction.\n    gas_available :\n        The gas remaining in the block.\n    chain_id :\n        The ID of the current chain.\n\n    Returns\n    -------\n    sender_address :\n        The sender of the transaction.\n\n    Raises\n    ------\n    InvalidBlock :\n        If the transaction is not includable.\n    ')),
                If(
                    test=Compare(
                        left=Attribute(
                            value=Name(id='tx', ctx=Load()),
                            attr='gas',
                            ctx=Load()),
                        ops=[
                            Gt()],
                        comparators=[
                            Name(id='gas_available', ctx=Load())]),
                    body=[
                        Raise(
                            exc=Name(id='InvalidBlock', ctx=Load()))],
                    orelse=[]),
                Assign(
                    targets=[
                        Name(id='sender_address', ctx=Store())],
                    value=Call(
                        func=Name(id='recover_sender', ctx=Load()),
                        args=[
                            Name(id='chain_id', ctx=Load()),
                            Name(id='tx', ctx=Load())],
                        keywords=[])),
                Return(
                    value=Name(id='sender_address', ctx=Load()))],
            decorator_list=[],
            returns=Name(id='Address', ctx=Load())),
        FunctionDef(
            name='make_receipt',
            args=arguments(
                posonlyargs=[],
                args=[
                    arg(
                        arg='tx',
                        annotation=Name(id='Transaction', ctx=Load())),
                    arg(
                        arg='error',
                        annotation=Subscript(
                            value=Name(id='Optional', ctx=Load()),
                            slice=Name(id='Exception', ctx=Load()),
                            ctx=Load())),
                    arg(
                        arg='cumulative_gas_used',
                        annotation=Name(id='Uint', ctx=Load())),
                    arg(
                        arg='logs',
                        annotation=Subscript(
                            value=Name(id='Tuple', ctx=Load()),
                            slice=Tuple(
                                elts=[
                                    Name(id='Log', ctx=Load()),
                                    Constant(value=Ellipsis)],
                                ctx=Load()),
                            ctx=Load()))],
                kwonlyargs=[],
                kw_defaults=[],
                defaults=[]),
            body=[
                Expr(
                    value=Constant(value='\n    Make the receipt for a transaction that was executed.\n\n    Parameters\n    ----------\n    tx :\n        The executed transaction.\n    error :\n        Error in the top level frame of the transaction, if any.\n    cumulative_gas_used :\n        The total gas used so far in the block after the transaction was\n        executed.\n    logs :\n        The logs produced by the transaction.\n\n    Returns\n    -------\n    receipt :\n        The receipt for the transaction.\n    ')),
                Assign(
                    targets=[
                        Name(id='receipt', ctx=Store())],
                    value=Call(
                        func=Name(id='Receipt', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='succeeded',
                                value=Compare(
                                    left=Name(id='error', ctx=Load()),
                                    ops=[
                                        Is()],
                                    comparators=[
                                        Constant(value=None)])),
                            keyword(
                                arg='cumulative_gas_used',
                                value=Name(id='cumulative_gas_used', ctx=Load())),
                            keyword(
                                arg='bloom',
                                value=Call(
                                    func=Name(id='logs_bloom', ctx=Load()),
                                    args=[
                                        Name(id='logs', ctx=Load())],
                                    keywords=[])),
                            keyword(
                                arg='logs',
                                value=Name(id='logs', ctx=Load()))])),
                Return(
                    value=Name(id='receipt', ctx=Load()))],
            decorator_list=[],
            returns=Name(id='Receipt', ctx=Load())),
        ClassDef(
            name='ApplyBodyOutput',
            bases=[],
            keywords=[],
            body=[
                Expr(
                    value=Constant(value='\n    Output from applying the block body to the present state.\n\n    Contains the following:\n\n    block_gas_used : `ethereum.base_types.Uint`\n        Gas used for executing all transactions.\n    transactions_root : `ethereum.fork_types.Root`\n        Trie root of all the transactions in the block.\n    receipt_root : `ethereum.fork_types.Root`\n        Trie root of all the receipts in the block.\n    block_logs_bloom : `Bloom`\n        Logs bloom of all the logs included in all the transactions of the\n        block.\n    state_root : `ethereum.fork_types.Root`\n        State root after all transactions have been executed.\n    ')),
                AnnAssign(
                    target=Name(id='block_gas_used', ctx=Store()),
                    annotation=Name(id='Uint', ctx=Load()),
                    simple=1),
                AnnAssign(
                    target=Name(id='transactions_root', ctx=Store()),
                    annotation=Name(id='Root', ctx=Load()),
                    simple=1),
                AnnAssign(
                    target=Name(id='receipt_root', ctx=Store()),
                    annotation=Name(id='Root', ctx=Load()),
                    simple=1),
                AnnAssign(
                    target=Name(id='block_logs_bloom', ctx=Store()),
                    annotation=Name(id='Bloom', ctx=Load()),
                    simple=1),
                AnnAssign(
                    target=Name(id='state_root', ctx=Store()),
                    annotation=Name(id='Root', ctx=Load()),
                    simple=1)],
            decorator_list=[
                Name(id='dataclass', ctx=Load())]),
        FunctionDef(
            name='apply_body',
            args=arguments(
                posonlyargs=[],
                args=[
                    arg(
                        arg='state',
                        annotation=Name(id='State', ctx=Load())),
                    arg(
                        arg='block_hashes',
                        annotation=Subscript(
                            value=Name(id='List', ctx=Load()),
                            slice=Name(id='Hash32', ctx=Load()),
                            ctx=Load())),
                    arg(
                        arg='coinbase',
                        annotation=Name(id='Address', ctx=Load())),
                    arg(
                        arg='block_number',
                        annotation=Name(id='Uint', ctx=Load())),
                    arg(
                        arg='block_gas_limit',
                        annotation=Name(id='Uint', ctx=Load())),
                    arg(
                        arg='block_time',
                        annotation=Name(id='U256', ctx=Load())),
                    arg(
                        arg='block_difficulty',
                        annotation=Name(id='Uint', ctx=Load())),
                    arg(
                        arg='transactions',
                        annotation=Subscript(
                            value=Name(id='Tuple', ctx=Load()),
                            slice=Tuple(
                                elts=[
                                    Name(id='Transaction', ctx=Load()),
                                    Constant(value=Ellipsis)],
                                ctx=Load()),
                            ctx=Load())),
                    arg(
                        arg='ommers',
                        annotation=Subscript(
                            value=Name(id='Tuple', ctx=Load()),
                            slice=Tuple(
                                elts=[
                                    Name(id='Header', ctx=Load()),
                                    Constant(value=Ellipsis)],
                                ctx=Load()),
                            ctx=Load())),
                    arg(
                        arg='chain_id',
                        annotation=Name(id='U64', ctx=Load()))],
                kwonlyargs=[],
                kw_defaults=[],
                defaults=[]),
            body=[
                Expr(
                    value=Constant(value='\n    Executes a block.\n\n    Many of the contents of a block are stored in data structures called\n    tries. There is a transactions trie which is similar to a ledger of the\n    transactions stored in the current block. There is also a receipts trie\n    which stores the results of executing a transaction, like the post state\n    and gas used. This function creates and executes the block that is to be\n    added to the chain.\n\n    Parameters\n    ----------\n    state :\n        Current account state.\n    block_hashes :\n        List of hashes of the previous 256 blocks in the order of\n        increasing block number.\n    coinbase :\n        Address of account which receives block reward and transaction fees.\n    block_number :\n        Position of the block within the chain.\n    block_gas_limit :\n        Initial amount of gas available for execution in this block.\n    block_time :\n        Time the block was produced, measured in seconds since the epoch.\n    block_difficulty :\n        Difficulty of the block.\n    transactions :\n        Transactions included in the block.\n    ommers :\n        Headers of ancestor blocks which are not direct parents (formerly\n        uncles.)\n    chain_id :\n        ID of the executing chain.\n\n    Returns\n    -------\n    apply_body_output : `ApplyBodyOutput`\n        Output of applying the block body to the state.\n    ')),
                Assign(
                    targets=[
                        Name(id='gas_available', ctx=Store())],
                    value=Name(id='block_gas_limit', ctx=Load())),
                AnnAssign(
                    target=Name(id='transactions_trie', ctx=Store()),
                    annotation=Subscript(
                        value=Name(id='Trie', ctx=Load()),
                        slice=Tuple(
                            elts=[
                                Name(id='Bytes', ctx=Load()),
                                Subscript(
                                    value=Name(id='Optional', ctx=Load()),
                                    slice=Name(id='Transaction', ctx=Load()),
                                    ctx=Load())],
                            ctx=Load()),
                        ctx=Load()),
                    value=Call(
                        func=Name(id='Trie', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='secured',
                                value=Constant(value=False)),
                            keyword(
                                arg='default',
                                value=Constant(value=None))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='receipts_trie', ctx=Store()),
                    annotation=Subscript(
                        value=Name(id='Trie', ctx=Load()),
                        slice=Tuple(
                            elts=[
                                Name(id='Bytes', ctx=Load()),
                                Subscript(
                                    value=Name(id='Optional', ctx=Load()),
                                    slice=Name(id='Receipt', ctx=Load()),
                                    ctx=Load())],
                            ctx=Load()),
                        ctx=Load()),
                    value=Call(
                        func=Name(id='Trie', ctx=Load()),
                        args=[],
                        keywords=[
                            keyword(
                                arg='secured',
                                value=Constant(value=False)),
                            keyword(
                                arg='default',
                                value=Constant(value=None))]),
                    simple=1),
                AnnAssign(
                    target=Name(id='block_logs', ctx=Store()),
                    annotation=Subscript(
                        value=Name(id='Tuple', ctx=Load()),
                        slice=Tuple(
                            elts=[
                                Name(id='Log', ctx=Load()),
                                Constant(value=Ellipsis)],
                            ctx=Load()),
                        ctx=Load()),
                    value=Tuple(elts=[], ctx=Load()),
                    simple=1),
                For(
                    target=Tuple(
                        elts=[
                            Name(id='i', ctx=Store()),
                            Name(id='tx', ctx=Store())],
                        ctx=Store()),
                    iter=Call(
                        func=Name(id='enumerate', ctx=Load()),
                        args=[
                            Name(id='transactions', ctx=Load())],
                        keywords=[]),
                    body=[
                        Expr(
                            value=Call(
                                func=Name(id='trie_set', ctx=Load()),
                                args=[
                                    Name(id='transactions_trie', ctx=Load()),
                                    Call(
                                        func=Attribute(
                                            value=Name(id='rlp', ctx=Load()),
                                            attr='encode',
                                            ctx=Load()),
                                        args=[
                                            Call(
                                                func=Name(id='Uint', ctx=Load()),
                                                args=[
                                                    Name(id='i', ctx=Load())],
                                                keywords=[])],
                                        keywords=[]),
                                    Name(id='tx', ctx=Load())],
                                keywords=[])),
                        Assign(
                            targets=[
                                Name(id='sender_address', ctx=Store())],
                            value=Call(
                                func=Name(id='check_transaction', ctx=Load()),
                                args=[
                                    Name(id='tx', ctx=Load()),
                                    Name(id='gas_available', ctx=Load()),
                                    Name(id='chain_id', ctx=Load())],
                                keywords=[])),
                        Assign(
                            targets=[
                                Name(id='env', ctx=Store())],
                            value=Call(
                                func=Attribute(
                                    value=Name(id='vm', ctx=Load()),
                                    attr='Environment',
                                    ctx=Load()),
                                args=[],
                                keywords=[
                                    keyword(
                                        arg='caller',
                                        value=Name(id='sender_address', ctx=Load())),
                                    keyword(
                                        arg='origin',
                                        value=Name(id='sender_address', ctx=Load())),
                                    keyword(
                                        arg='block_hashes',
                                        value=Name(id='block_hashes', ctx=Load())),
                                    keyword(
                                        arg='coinbase',
                                        value=Name(id='coinbase', ctx=Load())),
                                    keyword(
                                        arg='number',
                                        value=Name(id='block_number', ctx=Load())),
                                    keyword(
                                        arg='gas_limit',
                                        value=Name(id='block_gas_limit', ctx=Load())),
                                    keyword(
                                        arg='gas_price',
                                        value=Attribute(
                                            value=Name(id='tx', ctx=Load()),
                                            attr='gas_price',
                                            ctx=Load())),
                                    keyword(
                                        arg='time',
                                        value=Name(id='block_time', ctx=Load())),
                                    keyword(
                                        arg='difficulty',
                                        value=Name(id='block_difficulty', ctx=Load())),
                                    keyword(
                                        arg='state',
                                        value=Name(id='state', ctx=Load())),
                                    keyword(
                                        arg='chain_id',
                                        value=Name(id='chain_id', ctx=Load())),
                                    keyword(
                                        arg='traces',
                                        value=List(elts=[], ctx=Load()))])),
                        Assign(
                            targets=[
                                Tuple(
                                    elts=[
                                        Name(id='gas_used', ctx=Store()),
                                        Name(id='logs', ctx=Store()),
                                        Name(id='error', ctx=Store())],
                                    ctx=Store())],
                            value=Call(
                                func=Name(id='process_transaction', ctx=Load()),
                                args=[
                                    Name(id='env', ctx=Load()),
                                    Name(id='tx', ctx=Load())],
                                keywords=[])),
                        AugAssign(
                            target=Name(id='gas_available', ctx=Store()),
                            op=Sub(),
                            value=Name(id='gas_used', ctx=Load())),
                        Assign(
                            targets=[
                                Name(id='receipt', ctx=Store())],
                            value=Call(
                                func=Name(id='make_receipt', ctx=Load()),
                                args=[
                                    Name(id='tx', ctx=Load()),
                                    Name(id='error', ctx=Load()),
                                    BinOp(
                                        left=Name(id='block_gas_limit', ctx=Load()),
                                        op=Sub(),
                                        right=Name(id='gas_available', ctx=Load())),
                                    Name(id='logs', ctx=Load())],
                                keywords=[])),
                        Expr(
                            value=Call(
                                func=Name(id='trie_set', ctx=Load()),
                                args=[
                                    Name(id='receipts_trie', ctx=Load()),
                                    Call(
                                        func=Attribute(
                                            value=Name(id='rlp', ctx=Load()),
                                            attr='encode',
                                            ctx=Load()),
                                        args=[
                                            Call(
                                                func=Name(id='Uint', ctx=Load()),
                                                args=[
                                                    Name(id='i', ctx=Load())],
                                                keywords=[])],
                                        keywords=[]),
                                    Name(id='receipt', ctx=Load())],
                                keywords=[])),
                        AugAssign(
                            target=Name(id='block_logs', ctx=Store()),
                            op=Add(),
                            value=Name(id='logs', ctx=Load()))],
                    orelse=[]),
                Expr(
                    value=Call(
                        func=Name(id='pay_rewards', ctx=Load()),
                        args=[
                            Name(id='state', ctx=Load()),
                            Name(id='block_number', ctx=Load()),
                            Name(id='coinbase', ctx=Load()),
                            Name(id='ommers', ctx=Load())],
                        keywords=[])),
                Assign(
                    targets=[
                        Name(id='block_gas_used', ctx=Store())],
                    value=BinOp(
                        left=Name(id='block_gas_limit', ctx=Load()),
                        op=Sub(),
                        right=Name(id='gas_available', ctx=Load()))),
                Assign(
                    targets=[
                        Name(id='block_logs_bloom', ctx=Store())],
                    value=Call(
                        func=Name(id='logs_bloom', ctx=Load()),
                        args=[
                            Name(id='block_logs', ctx=Load())],
                        keywords=[])),
                Return(
                    value=Call(
                        func=Name(id='ApplyBodyOutput', ctx=Load()),
                        args=[
                            Name(id='block_gas_used', ctx=Load()),
                            Call(
                                func=Name(id='root', ctx=Load()),
                                args=[
                                    Name(id='transactions_trie', ctx=Load())],
                                keywords=[]),
                            Call(
                                func=Name(id='root', ctx=Load()),
                                args=[
                                    Name(id='receipts_trie', ctx=Load())],
                                keywords=[]),
                            Name(id='block_logs_bloom', ctx=Load()),
                            Call(
                                func=Name(id='state_root', ctx=Load()),
                                args=[
                                    Name(id='state', ctx=Load())],
                                keywords=[])],
                        keywords=[]))],
            decorator_list=[],
            returns=Name(id='ApplyBodyOutput', ctx=Load())),
        FunctionDef(
            name='validate_ommers',
            args=arguments(
                posonlyargs=[],
                args=[
                    arg(
                        arg='ommers',
                        annotation=Subscript(
                            value=Name(id='Tuple', ctx=Load()),
                            slice=Tuple(
                                elts=[
                                    Name(id='Header', ctx=Load()),
                                    Constant(value=Ellipsis)],
                                ctx=Load()),
                            ctx=Load())),
                    arg(
                        arg='block_header',
                        annotation=Name(id='Header', ctx=Load())),
                    arg(
                        arg='chain',
                        annotation=Name(id='BlockChain', ctx=Load()))],
                kwonlyargs=[],
                kw_defaults=[],
                defaults=[]),
            body=[
                Expr(
                    value=Constant(value="\n    Validates the ommers mentioned in the block.\n\n    An ommer block is a block that wasn't canonically added to the\n    blockchain because it wasn't validated as fast as the canonical block\n    but was mined at the same time.\n\n    To be considered valid, the ommers must adhere to the rules defined in\n    the Ethereum protocol. The maximum amount of ommers is 2 per block and\n    there cannot be duplicate ommers in a block. Many of the other ommer\n    constraints are listed in the in-line comments of this function.\n\n    Parameters\n    ----------\n    ommers :\n        List of ommers mentioned in the current block.\n    block_header:\n        The header of current block.\n    chain :\n        History and current state.\n    ")),
                Assign(
                    targets=[
                        Name(id='block_hash', ctx=Store())],
                    value=Call(
                        func=Attribute(
                            value=Name(id='rlp', ctx=Load()),
                            attr='rlp_hash',
                            ctx=Load()),
                        args=[
                            Name(id='block_header', ctx=Load())],
                        keywords=[])),
                If(
                    test=Compare(
                        left=Call(
                            func=Attribute(
                                value=Name(id='rlp', ctx=Load()),
                                attr='rlp_hash',
                                ctx=Load()),
                            args=[
                                Name(id='ommers', ctx=Load())],
                            keywords=[]),
                        ops=[
                            NotEq()],
                        comparators=[
                            Attribute(
                                value=Name(id='block_header', ctx=Load()),
                                attr='ommers_hash',
                                ctx=Load())]),
                    body=[
                        Raise(
                            exc=Name(id='InvalidBlock', ctx=Load()))],
                    orelse=[]),
                If(
                    test=Compare(
                        left=Call(
                            func=Name(id='len', ctx=Load()),
                            args=[
                                Name(id='ommers', ctx=Load())],
                            keywords=[]),
                        ops=[
                            Eq()],
                        comparators=[
                            Constant(value=0)]),
                    body=[
                        Return()],
                    orelse=[]),
                For(
                    target=Name(id='ommer', ctx=Store()),
                    iter=Name(id='ommers', ctx=Load()),
                    body=[
                        If(
                            test=BoolOp(
                                op=Or(),
                                values=[
                                    Compare(
                                        left=Call(
                                            func=Name(id='Uint', ctx=Load()),
                                            args=[
                                                Constant(value=1)],
                                            keywords=[]),
                                        ops=[
                                            Gt()],
                                        comparators=[
                                            Attribute(
                                                value=Name(id='ommer', ctx=Load()),
                                                attr='number',
                                                ctx=Load())]),
                                    Compare(
                                        left=Attribute(
                                            value=Name(id='ommer', ctx=Load()),
                                            attr='number',
                                            ctx=Load()),
                                        ops=[
                                            GtE()],
                                        comparators=[
                                            Attribute(
                                                value=Name(id='block_header', ctx=Load()),
                                                attr='number',
                                                ctx=Load())])]),
                            body=[
                                Raise(
                                    exc=Name(id='InvalidBlock', ctx=Load()))],
                            orelse=[]),
                        Assign(
                            targets=[
                                Name(id='ommer_parent_header', ctx=Store())],
                            value=Attribute(
                                value=Subscript(
                                    value=Attribute(
                                        value=Name(id='chain', ctx=Load()),
                                        attr='blocks',
                                        ctx=Load()),
                                    slice=BinOp(
                                        left=UnaryOp(
                                            op=USub(),
                                            operand=BinOp(
                                                left=Attribute(
                                                    value=Name(id='block_header', ctx=Load()),
                                                    attr='number',
                                                    ctx=Load()),
                                                op=Sub(),
                                                right=Attribute(
                                                    value=Name(id='ommer', ctx=Load()),
                                                    attr='number',
                                                    ctx=Load()))),
                                        op=Sub(),
                                        right=Constant(value=1)),
                                    ctx=Load()),
                                attr='header',
                                ctx=Load())),
                        Expr(
                            value=Call(
                                func=Name(id='validate_header', ctx=Load()),
                                args=[
                                    Name(id='ommer', ctx=Load()),
                                    Name(id='ommer_parent_header', ctx=Load())],
                                keywords=[]))],
                    orelse=[]),
                If(
                    test=Compare(
                        left=Call(
                            func=Name(id='len', ctx=Load()),
                            args=[
                                Name(id='ommers', ctx=Load())],
                            keywords=[]),
                        ops=[
                            Gt()],
                        comparators=[
                            Constant(value=2)]),
                    body=[
                        Raise(
                            exc=Name(id='InvalidBlock', ctx=Load()))],
                    orelse=[]),
                Assign(
                    targets=[
                        Name(id='ommers_hashes', ctx=Store())],
                    value=ListComp(
                        elt=Call(
                            func=Attribute(
                                value=Name(id='rlp', ctx=Load()),
                                attr='rlp_hash',
                                ctx=Load()),
                            args=[
                                Name(id='ommer', ctx=Load())],
                            keywords=[]),
                        generators=[
                            comprehension(
                                target=Name(id='ommer', ctx=Store()),
                                iter=Name(id='ommers', ctx=Load()),
                                ifs=[],
                                is_async=0)])),
                If(
                    test=Compare(
                        left=Call(
                            func=Name(id='len', ctx=Load()),
                            args=[
                                Name(id='ommers_hashes', ctx=Load())],
                            keywords=[]),
                        ops=[
                            NotEq()],
                        comparators=[
                            Call(
                                func=Name(id='len', ctx=Load()),
                                args=[
                                    Call(
                                        func=Name(id='set', ctx=Load()),
                                        args=[
                                            Name(id='ommers_hashes', ctx=Load())],
                                        keywords=[])],
                                keywords=[])]),
                    body=[
                        Raise(
                            exc=Name(id='InvalidBlock', ctx=Load()))],
                    orelse=[]),
                Assign(
                    targets=[
                        Name(id='recent_canonical_blocks', ctx=Store())],
                    value=Subscript(
                        value=Attribute(
                            value=Name(id='chain', ctx=Load()),
                            attr='blocks',
                            ctx=Load()),
                        slice=Slice(
                            lower=UnaryOp(
                                op=USub(),
                                operand=BinOp(
                                    left=Name(id='MAX_OMMER_DEPTH', ctx=Load()),
                                    op=Add(),
                                    right=Call(
                                        func=Name(id='Uint', ctx=Load()),
                                        args=[
                                            Constant(value=1)],
                                        keywords=[])))),
                        ctx=Load())),
                Assign(
                    targets=[
                        Name(id='recent_canonical_block_hashes', ctx=Store())],
                    value=SetComp(
                        elt=Call(
                            func=Attribute(
                                value=Name(id='rlp', ctx=Load()),
                                attr='rlp_hash',
                                ctx=Load()),
                            args=[
                                Attribute(
                                    value=Name(id='block', ctx=Load()),
                                    attr='header',
                                    ctx=Load())],
                            keywords=[]),
                        generators=[
                            comprehension(
                                target=Name(id='block', ctx=Store()),
                                iter=Name(id='recent_canonical_blocks', ctx=Load()),
                                ifs=[],
                                is_async=0)])),
                AnnAssign(
                    target=Name(id='recent_ommers_hashes', ctx=Store()),
                    annotation=Subscript(
                        value=Name(id='Set', ctx=Load()),
                        slice=Name(id='Hash32', ctx=Load()),
                        ctx=Load()),
                    value=Call(
                        func=Name(id='set', ctx=Load()),
                        args=[],
                        keywords=[]),
                    simple=1),
                For(
                    target=Name(id='block', ctx=Store()),
                    iter=Name(id='recent_canonical_blocks', ctx=Load()),
                    body=[
                        Assign(
                            targets=[
                                Name(id='recent_ommers_hashes', ctx=Store())],
                            value=Call(
                                func=Attribute(
                                    value=Name(id='recent_ommers_hashes', ctx=Load()),
                                    attr='union',
                                    ctx=Load()),
                                args=[
                                    SetComp(
                                        elt=Call(
                                            func=Attribute(
                                                value=Name(id='rlp', ctx=Load()),
                                                attr='rlp_hash',
                                                ctx=Load()),
                                            args=[
                                                Name(id='ommer', ctx=Load())],
                                            keywords=[]),
                                        generators=[
                                            comprehension(
                                                target=Name(id='ommer', ctx=Store()),
                                                iter=Attribute(
                                                    value=Name(id='block', ctx=Load()),
                                                    attr='ommers',
                                                    ctx=Load()),
                                                ifs=[],
                                                is_async=0)])],
                                keywords=[]))],
                    orelse=[]),
                For(
                    target=Tuple(
                        elts=[
                            Name(id='ommer_index', ctx=Store()),
                            Name(id='ommer', ctx=Store())],
                        ctx=Store()),
                    iter=Call(
                        func=Name(id='enumerate', ctx=Load()),
                        args=[
                            Name(id='ommers', ctx=Load())],
                        keywords=[]),
                    body=[
                        Assign(
                            targets=[
                                Name(id='ommer_hash', ctx=Store())],
                            value=Subscript(
                                value=Name(id='ommers_hashes', ctx=Load()),
                                slice=Name(id='ommer_index', ctx=Load()),
                                ctx=Load())),
                        If(
                            test=Compare(
                                left=Name(id='ommer_hash', ctx=Load()),
                                ops=[
                                    Eq()],
                                comparators=[
                                    Name(id='block_hash', ctx=Load())]),
                            body=[
                                Raise(
                                    exc=Name(id='InvalidBlock', ctx=Load()))],
                            orelse=[]),
                        If(
                            test=Compare(
                                left=Name(id='ommer_hash', ctx=Load()),
                                ops=[
                                    In()],
                                comparators=[
                                    Name(id='recent_canonical_block_hashes', ctx=Load())]),
                            body=[
                                Raise(
                                    exc=Name(id='InvalidBlock', ctx=Load()))],
                            orelse=[]),
                        If(
                            test=Compare(
                                left=Name(id='ommer_hash', ctx=Load()),
                                ops=[
                                    In()],
                                comparators=[
                                    Name(id='recent_ommers_hashes', ctx=Load())]),
                            body=[
                                Raise(
                                    exc=Name(id='InvalidBlock', ctx=Load()))],
                            orelse=[]),
                        Assign(
                            targets=[
                                Name(id='ommer_age', ctx=Store())],
                            value=BinOp(
                                left=Attribute(
                                    value=Name(id='block_header', ctx=Load()),
                                    attr='number',
                                    ctx=Load()),
                                op=Sub(),
                                right=Attribute(
                                    value=Name(id='ommer', ctx=Load()),
                                    attr='number',
                                    ctx=Load()))),
                        If(
                            test=BoolOp(
                                op=Or(),
                                values=[
                                    Compare(
                                        left=Call(
                                            func=Name(id='Uint', ctx=Load()),
                                            args=[
                                                Constant(value=1)],
                                            keywords=[]),
                                        ops=[
                                            Gt()],
                                        comparators=[
                                            Name(id='ommer_age', ctx=Load())]),
                                    Compare(
                                        left=Name(id='ommer_age', ctx=Load()),
                                        ops=[
                                            Gt()],
                                        comparators=[
                                            Name(id='MAX_OMMER_DEPTH', ctx=Load())])]),
                            body=[
                                Raise(
                                    exc=Name(id='InvalidBlock', ctx=Load()))],
                            orelse=[]),
                        If(
                            test=Compare(
                                left=Attribute(
                                    value=Name(id='ommer', ctx=Load()),
                                    attr='parent_hash',
                                    ctx=Load()),
                                ops=[
                                    NotIn()],
                                comparators=[
                                    Name(id='recent_canonical_block_hashes', ctx=Load())]),
                            body=[
                                Raise(
                                    exc=Name(id='InvalidBlock', ctx=Load()))],
                            orelse=[]),
                        If(
                            test=Compare(
                                left=Attribute(
                                    value=Name(id='ommer', ctx=Load()),
                                    attr='parent_hash',
                                    ctx=Load()),
                                ops=[
                                    Eq()],
                                comparators=[
                                    Attribute(
                                        value=Name(id='block_header', ctx=Load()),
                                        attr='parent_hash',
                                        ctx=Load())]),
                            body=[
                                Raise(
                                    exc=Name(id='InvalidBlock', ctx=Load()))],
                            orelse=[])],
                    orelse=[])],
            decorator_list=[],
            returns=Constant(value=None)),
        FunctionDef(
            name='pay_rewards',
            args=arguments(
                posonlyargs=[],
                args=[
                    arg(
                        arg='state',
                        annotation=Name(id='State', ctx=Load())),
                    arg(
                        arg='block_number',
                        annotation=Name(id='Uint', ctx=Load())),
                    arg(
                        arg='coinbase',
                        annotation=Name(id='Address', ctx=Load())),
                    arg(
                        arg='ommers',
                        annotation=Subscript(
                            value=Name(id='Tuple', ctx=Load()),
                            slice=Tuple(
                                elts=[
                                    Name(id='Header', ctx=Load()),
                                    Constant(value=Ellipsis)],
                                ctx=Load()),
                            ctx=Load()))],
                kwonlyargs=[],
                kw_defaults=[],
                defaults=[]),
            body=[
                Expr(
                    value=Constant(value="\n    Pay rewards to the block miner as well as the ommers miners.\n\n    The miner of the canonical block is rewarded with the predetermined\n    block reward, ``BLOCK_REWARD``, plus a variable award based off of the\n    number of ommer blocks that were mined around the same time, and included\n    in the canonical block's header. An ommer block is a block that wasn't\n    added to the canonical blockchain because it wasn't validated as fast as\n    the accepted block but was mined at the same time. Although not all blocks\n    that are mined are added to the canonical chain, miners are still paid a\n    reward for their efforts. This reward is called an ommer reward and is\n    calculated based on the number associated with the ommer block that they\n    mined.\n\n    Parameters\n    ----------\n    state :\n        Current account state.\n    block_number :\n        Position of the block within the chain.\n    coinbase :\n        Address of account which receives block reward and transaction fees.\n    ommers :\n        List of ommers mentioned in the current block.\n    ")),
                Assign(
                    targets=[
                        Name(id='ommer_count', ctx=Store())],
                    value=Call(
                        func=Name(id='U256', ctx=Load()),
                        args=[
                            Call(
                                func=Name(id='len', ctx=Load()),
                                args=[
                                    Name(id='ommers', ctx=Load())],
                                keywords=[])],
                        keywords=[])),
                Assign(
                    targets=[
                        Name(id='miner_reward', ctx=Store())],
                    value=BinOp(
                        left=Name(id='BLOCK_REWARD', ctx=Load()),
                        op=Add(),
                        right=BinOp(
                            left=Name(id='ommer_count', ctx=Load()),
                            op=Mult(),
                            right=BinOp(
                                left=Name(id='BLOCK_REWARD', ctx=Load()),
                                op=FloorDiv(),
                                right=Call(
                                    func=Name(id='U256', ctx=Load()),
                                    args=[
                                        Constant(value=32)],
                                    keywords=[]))))),
                Expr(
                    value=Call(
                        func=Name(id='create_ether', ctx=Load()),
                        args=[
                            Name(id='state', ctx=Load()),
                            Name(id='coinbase', ctx=Load()),
                            Name(id='miner_reward', ctx=Load())],
                        keywords=[])),
                For(
                    target=Name(id='ommer', ctx=Store()),
                    iter=Name(id='ommers', ctx=Load()),
                    body=[
                        Assign(
                            targets=[
                                Name(id='ommer_age', ctx=Store())],
                            value=Call(
                                func=Name(id='U256', ctx=Load()),
                                args=[
                                    BinOp(
                                        left=Name(id='block_number', ctx=Load()),
                                        op=Sub(),
                                        right=Attribute(
                                            value=Name(id='ommer', ctx=Load()),
                                            attr='number',
                                            ctx=Load()))],
                                keywords=[])),
                        Assign(
                            targets=[
                                Name(id='ommer_miner_reward', ctx=Store())],
                            value=BinOp(
                                left=BinOp(
                                    left=BinOp(
                                        left=Call(
                                            func=Name(id='U256', ctx=Load()),
                                            args=[
                                                Constant(value=8)],
                                            keywords=[]),
                                        op=Sub(),
                                        right=Name(id='ommer_age', ctx=Load())),
                                    op=Mult(),
                                    right=Name(id='BLOCK_REWARD', ctx=Load())),
                                op=FloorDiv(),
                                right=Call(
                                    func=Name(id='U256', ctx=Load()),
                                    args=[
                                        Constant(value=8)],
                                    keywords=[]))),
                        Expr(
                            value=Call(
                                func=Name(id='create_ether', ctx=Load()),
                                args=[
                                    Name(id='state', ctx=Load()),
                                    Attribute(
                                        value=Name(id='ommer', ctx=Load()),
                                        attr='coinbase',
                                        ctx=Load()),
                                    Name(id='ommer_miner_reward', ctx=Load())],
                                keywords=[]))],
                    orelse=[])],
            decorator_list=[],
            returns=Constant(value=None)),
        FunctionDef(
            name='process_transaction',
            args=arguments(
                posonlyargs=[],
                args=[
                    arg(
                        arg='env',
                        annotation=Attribute(
                            value=Name(id='vm', ctx=Load()),
                            attr='Environment',
                            ctx=Load())),
                    arg(
                        arg='tx',
                        annotation=Name(id='Transaction', ctx=Load()))],
                kwonlyargs=[],
                kw_defaults=[],
                defaults=[]),
            body=[
                Expr(
                    value=Constant(value="\n    Execute a transaction against the provided environment.\n\n    This function processes the actions needed to execute a transaction.\n    It decrements the sender's account after calculating the gas fee and\n    refunds them the proper amount after execution. Calling contracts,\n    deploying code, and incrementing nonces are all examples of actions that\n    happen within this function or from a call made within this function.\n\n    Accounts that are marked for deletion are processed and destroyed after\n    execution.\n\n    Parameters\n    ----------\n    env :\n        Environment for the Ethereum Virtual Machine.\n    tx :\n        Transaction to execute.\n\n    Returns\n    -------\n    gas_left : `ethereum.base_types.U256`\n        Remaining gas after execution.\n    logs : `Tuple[ethereum.blocks.Log, ...]`\n        Logs generated during execution.\n    ")),
                If(
                    test=UnaryOp(
                        op=Not(),
                        operand=Call(
                            func=Name(id='validate_transaction', ctx=Load()),
                            args=[
                                Name(id='tx', ctx=Load())],
                            keywords=[])),
                    body=[
                        Raise(
                            exc=Name(id='InvalidBlock', ctx=Load()))],
                    orelse=[]),
                Assign(
                    targets=[
                        Name(id='sender', ctx=Store())],
                    value=Attribute(
                        value=Name(id='env', ctx=Load()),
                        attr='origin',
                        ctx=Load())),
                Assign(
                    targets=[
                        Name(id='sender_account', ctx=Store())],
                    value=Call(
                        func=Name(id='get_account', ctx=Load()),
                        args=[
                            Attribute(
                                value=Name(id='env', ctx=Load()),
                                attr='state',
                                ctx=Load()),
                            Name(id='sender', ctx=Load())],
                        keywords=[])),
                Assign(
                    targets=[
                        Name(id='gas_fee', ctx=Store())],
                    value=BinOp(
                        left=Attribute(
                            value=Name(id='tx', ctx=Load()),
                            attr='gas',
                            ctx=Load()),
                        op=Mult(),
                        right=Attribute(
                            value=Name(id='tx', ctx=Load()),
                            attr='gas_price',
                            ctx=Load()))),
                If(
                    test=Compare(
                        left=Attribute(
                            value=Name(id='sender_account', ctx=Load()),
                            attr='nonce',
                            ctx=Load()),
                        ops=[
                            NotEq()],
                        comparators=[
                            Attribute(
                                value=Name(id='tx', ctx=Load()),
                                attr='nonce',
                                ctx=Load())]),
                    body=[
                        Raise(
                            exc=Name(id='InvalidBlock', ctx=Load()))],
                    orelse=[]),
                If(
                    test=Compare(
                        left=Call(
                            func=Name(id='Uint', ctx=Load()),
                            args=[
                                Attribute(
                                    value=Name(id='sender_account', ctx=Load()),
                                    attr='balance',
                                    ctx=Load())],
                            keywords=[]),
                        ops=[
                            Lt()],
                        comparators=[
                            BinOp(
                                left=Name(id='gas_fee', ctx=Load()),
                                op=Add(),
                                right=Call(
                                    func=Name(id='Uint', ctx=Load()),
                                    args=[
                                        Attribute(
                                            value=Name(id='tx', ctx=Load()),
                                            attr='value',
                                            ctx=Load())],
                                    keywords=[]))]),
                    body=[
                        Raise(
                            exc=Name(id='InvalidBlock', ctx=Load()))],
                    orelse=[]),
                If(
                    test=Compare(
                        left=Attribute(
                            value=Name(id='sender_account', ctx=Load()),
                            attr='code',
                            ctx=Load()),
                        ops=[
                            NotEq()],
                        comparators=[
                            Call(
                                func=Name(id='bytearray', ctx=Load()),
                                args=[],
                                keywords=[])]),
                    body=[
                        Raise(
                            exc=Call(
                                func=Name(id='InvalidSenderError', ctx=Load()),
                                args=[
                                    Constant(value='not EOA')],
                                keywords=[]))],
                    orelse=[]),
                Assign(
                    targets=[
                        Name(id='gas', ctx=Store())],
                    value=BinOp(
                        left=Attribute(
                            value=Name(id='tx', ctx=Load()),
                            attr='gas',
                            ctx=Load()),
                        op=Sub(),
                        right=Call(
                            func=Name(id='calculate_intrinsic_cost', ctx=Load()),
                            args=[
                                Name(id='tx', ctx=Load())],
                            keywords=[]))),
                Expr(
                    value=Call(
                        func=Name(id='increment_nonce', ctx=Load()),
                        args=[
                            Attribute(
                                value=Name(id='env', ctx=Load()),
                                attr='state',
                                ctx=Load()),
                            Name(id='sender', ctx=Load())],
                        keywords=[])),
                Assign(
                    targets=[
                        Name(id='sender_balance_after_gas_fee', ctx=Store())],
                    value=BinOp(
                        left=Call(
                            func=Name(id='Uint', ctx=Load()),
                            args=[
                                Attribute(
                                    value=Name(id='sender_account', ctx=Load()),
                                    attr='balance',
                                    ctx=Load())],
                            keywords=[]),
                        op=Sub(),
                        right=Name(id='gas_fee', ctx=Load()))),
                Expr(
                    value=Call(
                        func=Name(id='set_account_balance', ctx=Load()),
                        args=[
                            Attribute(
                                value=Name(id='env', ctx=Load()),
                                attr='state',
                                ctx=Load()),
                            Name(id='sender', ctx=Load()),
                            Call(
                                func=Name(id='U256', ctx=Load()),
                                args=[
                                    Name(id='sender_balance_after_gas_fee', ctx=Load())],
                                keywords=[])],
                        keywords=[])),
                Assign(
                    targets=[
                        Name(id='message', ctx=Store())],
                    value=Call(
                        func=Name(id='prepare_message', ctx=Load()),
                        args=[
                            Name(id='sender', ctx=Load()),
                            Attribute(
                                value=Name(id='tx', ctx=Load()),
                                attr='to',
                                ctx=Load()),
                            Attribute(
                                value=Name(id='tx', ctx=Load()),
                                attr='value',
                                ctx=Load()),
                            Attribute(
                                value=Name(id='tx', ctx=Load()),
                                attr='data',
                                ctx=Load()),
                            Name(id='gas', ctx=Load()),
                            Name(id='env', ctx=Load())],
                        keywords=[])),
                Assign(
                    targets=[
                        Name(id='output', ctx=Store())],
                    value=Call(
                        func=Name(id='process_message_call', ctx=Load()),
                        args=[
                            Name(id='message', ctx=Load()),
                            Name(id='env', ctx=Load())],
                        keywords=[])),
                Assign(
                    targets=[
                        Name(id='gas_used', ctx=Store())],
                    value=BinOp(
                        left=Attribute(
                            value=Name(id='tx', ctx=Load()),
                            attr='gas',
                            ctx=Load()),
                        op=Sub(),
                        right=Attribute(
                            value=Name(id='output', ctx=Load()),
                            attr='gas_left',
                            ctx=Load()))),
                Assign(
                    targets=[
                        Name(id='gas_refund', ctx=Store())],
                    value=Call(
                        func=Name(id='min', ctx=Load()),
                        args=[
                            BinOp(
                                left=Name(id='gas_used', ctx=Load()),
                                op=FloorDiv(),
                                right=Call(
                                    func=Name(id='Uint', ctx=Load()),
                                    args=[
                                        Constant(value=2)],
                                    keywords=[])),
                            Call(
                                func=Name(id='Uint', ctx=Load()),
                                args=[
                                    Attribute(
                                        value=Name(id='output', ctx=Load()),
                                        attr='refund_counter',
                                        ctx=Load())],
                                keywords=[])],
                        keywords=[])),
                Assign(
                    targets=[
                        Name(id='gas_refund_amount', ctx=Store())],
                    value=BinOp(
                        left=BinOp(
                            left=Attribute(
                                value=Name(id='output', ctx=Load()),
                                attr='gas_left',
                                ctx=Load()),
                            op=Add(),
                            right=Name(id='gas_refund', ctx=Load())),
                        op=Mult(),
                        right=Attribute(
                            value=Name(id='tx', ctx=Load()),
                            attr='gas_price',
                            ctx=Load()))),
                Assign(
                    targets=[
                        Name(id='transaction_fee', ctx=Store())],
                    value=BinOp(
                        left=BinOp(
                            left=BinOp(
                                left=Attribute(
                                    value=Name(id='tx', ctx=Load()),
                                    attr='gas',
                                    ctx=Load()),
                                op=Sub(),
                                right=Attribute(
                                    value=Name(id='output', ctx=Load()),
                                    attr='gas_left',
                                    ctx=Load())),
                            op=Sub(),
                            right=Name(id='gas_refund', ctx=Load())),
                        op=Mult(),
                        right=Attribute(
                            value=Name(id='tx', ctx=Load()),
                            attr='gas_price',
                            ctx=Load()))),
                Assign(
                    targets=[
                        Name(id='total_gas_used', ctx=Store())],
                    value=BinOp(
                        left=Name(id='gas_used', ctx=Load()),
                        op=Sub(),
                        right=Name(id='gas_refund', ctx=Load()))),
                Assign(
                    targets=[
                        Name(id='sender_balance_after_refund', ctx=Store())],
                    value=BinOp(
                        left=Attribute(
                            value=Call(
                                func=Name(id='get_account', ctx=Load()),
                                args=[
                                    Attribute(
                                        value=Name(id='env', ctx=Load()),
                                        attr='state',
                                        ctx=Load()),
                                    Name(id='sender', ctx=Load())],
                                keywords=[]),
                            attr='balance',
                            ctx=Load()),
                        op=Add(),
                        right=Call(
                            func=Name(id='U256', ctx=Load()),
                            args=[
                                Name(id='gas_refund_amount', ctx=Load())],
                            keywords=[]))),
                Expr(
                    value=Call(
                        func=Name(id='set_account_balance', ctx=Load()),
                        args=[
                            Attribute(
                                value=Name(id='env', ctx=Load()),
                                attr='state',
                                ctx=Load()),
                            Name(id='sender', ctx=Load()),
                            Name(id='sender_balance_after_refund', ctx=Load())],
                        keywords=[])),
                Assign(
                    targets=[
                        Name(id='coinbase_balance_after_mining_fee', ctx=Store())],
                    value=BinOp(
                        left=Attribute(
                            value=Call(
                                func=Name(id='get_account', ctx=Load()),
                                args=[
                                    Attribute(
                                        value=Name(id='env', ctx=Load()),
                                        attr='state',
                                        ctx=Load()),
                                    Attribute(
                                        value=Name(id='env', ctx=Load()),
                                        attr='coinbase',
                                        ctx=Load())],
                                keywords=[]),
                            attr='balance',
                            ctx=Load()),
                        op=Add(),
                        right=Call(
                            func=Name(id='U256', ctx=Load()),
                            args=[
                                Name(id='transaction_fee', ctx=Load())],
                            keywords=[]))),
                If(
                    test=Compare(
                        left=Name(id='coinbase_balance_after_mining_fee', ctx=Load()),
                        ops=[
                            NotEq()],
                        comparators=[
                            Constant(value=0)]),
                    body=[
                        Expr(
                            value=Call(
                                func=Name(id='set_account_balance', ctx=Load()),
                                args=[
                                    Attribute(
                                        value=Name(id='env', ctx=Load()),
                                        attr='state',
                                        ctx=Load()),
                                    Attribute(
                                        value=Name(id='env', ctx=Load()),
                                        attr='coinbase',
                                        ctx=Load()),
                                    Name(id='coinbase_balance_after_mining_fee', ctx=Load())],
                                keywords=[]))],
                    orelse=[
                        If(
                            test=Call(
                                func=Name(id='account_exists_and_is_empty', ctx=Load()),
                                args=[
                                    Attribute(
                                        value=Name(id='env', ctx=Load()),
                                        attr='state',
                                        ctx=Load()),
                                    Attribute(
                                        value=Name(id='env', ctx=Load()),
                                        attr='coinbase',
                                        ctx=Load())],
                                keywords=[]),
                            body=[
                                Expr(
                                    value=Call(
                                        func=Name(id='destroy_account', ctx=Load()),
                                        args=[
                                            Attribute(
                                                value=Name(id='env', ctx=Load()),
                                                attr='state',
                                                ctx=Load()),
                                            Attribute(
                                                value=Name(id='env', ctx=Load()),
                                                attr='coinbase',
                                                ctx=Load())],
                                        keywords=[]))],
                            orelse=[])]),
                For(
                    target=Name(id='address', ctx=Store()),
                    iter=Attribute(
                        value=Name(id='output', ctx=Load()),
                        attr='accounts_to_delete',
                        ctx=Load()),
                    body=[
                        Expr(
                            value=Call(
                                func=Name(id='destroy_account', ctx=Load()),
                                args=[
                                    Attribute(
                                        value=Name(id='env', ctx=Load()),
                                        attr='state',
                                        ctx=Load()),
                                    Name(id='address', ctx=Load())],
                                keywords=[]))],
                    orelse=[]),
                For(
                    target=Name(id='address', ctx=Store()),
                    iter=Attribute(
                        value=Name(id='output', ctx=Load()),
                        attr='touched_accounts',
                        ctx=Load()),
                    body=[
                        If(
                            test=Call(
                                func=Name(id='account_exists_and_is_empty', ctx=Load()),
                                args=[
                                    Attribute(
                                        value=Name(id='env', ctx=Load()),
                                        attr='state',
                                        ctx=Load()),
                                    Name(id='address', ctx=Load())],
                                keywords=[]),
                            body=[
                                Expr(
                                    value=Call(
                                        func=Name(id='destroy_account', ctx=Load()),
                                        args=[
                                            Attribute(
                                                value=Name(id='env', ctx=Load()),
                                                attr='state',
                                                ctx=Load()),
                                            Name(id='address', ctx=Load())],
                                        keywords=[]))],
                            orelse=[])],
                    orelse=[]),
                Return(
                    value=Tuple(
                        elts=[
                            Name(id='total_gas_used', ctx=Load()),
                            Attribute(
                                value=Name(id='output', ctx=Load()),
                                attr='logs',
                                ctx=Load()),
                            Attribute(
                                value=Name(id='output', ctx=Load()),
                                attr='error',
                                ctx=Load())],
                        ctx=Load()))],
            decorator_list=[],
            returns=Subscript(
                value=Name(id='Tuple', ctx=Load()),
                slice=Tuple(
                    elts=[
                        Name(id='Uint', ctx=Load()),
                        Subscript(
                            value=Name(id='Tuple', ctx=Load()),
                            slice=Tuple(
                                elts=[
                                    Name(id='Log', ctx=Load()),
                                    Constant(value=Ellipsis)],
                                ctx=Load()),
                            ctx=Load()),
                        Subscript(
                            value=Name(id='Optional', ctx=Load()),
                            slice=Name(id='Exception', ctx=Load()),
                            ctx=Load())],
                    ctx=Load()),
                ctx=Load())),
        FunctionDef(
            name='validate_transaction',
            args=arguments(
                posonlyargs=[],
                args=[
                    arg(
                        arg='tx',
                        annotation=Name(id='Transaction', ctx=Load()))],
                kwonlyargs=[],
                kw_defaults=[],
                defaults=[]),
            body=[
                Expr(
                    value=Constant(value="\n    Verifies a transaction.\n\n    The gas in a transaction gets used to pay for the intrinsic cost of\n    operations, therefore if there is insufficient gas then it would not\n    be possible to execute a transaction and it will be declared invalid.\n\n    Additionally, the nonce of a transaction must not equal or exceed the\n    limit defined in `EIP-2681 <https://eips.ethereum.org/EIPS/eip-2681>`_.\n    In practice, defining the limit as ``2**64-1`` has no impact because\n    sending ``2**64-1`` transactions is improbable. It's not strictly\n    impossible though, ``2**64-1`` transactions is the entire capacity of the\n    Ethereum blockchain at 2022 gas limits for a little over 22 years.\n\n    Parameters\n    ----------\n    tx :\n        Transaction to validate.\n\n    Returns\n    -------\n    verified : `bool`\n        True if the transaction can be executed, or False otherwise.\n    ")),
                If(
                    test=Compare(
                        left=Call(
                            func=Name(id='calculate_intrinsic_cost', ctx=Load()),
                            args=[
                                Name(id='tx', ctx=Load())],
                            keywords=[]),
                        ops=[
                            Gt()],
                        comparators=[
                            Call(
                                func=Name(id='Uint', ctx=Load()),
                                args=[
                                    Attribute(
                                        value=Name(id='tx', ctx=Load()),
                                        attr='gas',
                                        ctx=Load())],
                                keywords=[])]),
                    body=[
                        Return(
                            value=Constant(value=False))],
                    orelse=[]),
                If(
                    test=Compare(
                        left=Attribute(
                            value=Name(id='tx', ctx=Load()),
                            attr='nonce',
                            ctx=Load()),
                        ops=[
                            GtE()],
                        comparators=[
                            Call(
                                func=Name(id='U256', ctx=Load()),
                                args=[
                                    Attribute(
                                        value=Name(id='U64', ctx=Load()),
                                        attr='MAX_VALUE',
                                        ctx=Load())],
                                keywords=[])]),
                    body=[
                        Return(
                            value=Constant(value=False))],
                    orelse=[]),
                Return(
                    value=Constant(value=True))],
            decorator_list=[],
            returns=Name(id='bool', ctx=Load())),
        FunctionDef(
            name='calculate_intrinsic_cost',
            args=arguments(
                posonlyargs=[],
                args=[
                    arg(
                        arg='tx',
                        annotation=Name(id='Transaction', ctx=Load()))],
                kwonlyargs=[],
                kw_defaults=[],
                defaults=[]),
            body=[
                Expr(
                    value=Constant(value='\n    Calculates the gas that is charged before execution is started.\n\n    The intrinsic cost of the transaction is charged before execution has\n    begun. Functions/operations in the EVM cost money to execute so this\n    intrinsic cost is for the operations that need to be paid for as part of\n    the transaction. Data transfer, for example, is part of this intrinsic\n    cost. It costs ether to send data over the wire and that ether is\n    accounted for in the intrinsic cost calculated in this function. This\n    intrinsic cost must be calculated and paid for before execution in order\n    for all operations to be implemented.\n\n    Parameters\n    ----------\n    tx :\n        Transaction to compute the intrinsic cost of.\n\n    Returns\n    -------\n    verified : `ethereum.base_types.Uint`\n        The intrinsic cost of the transaction.\n    ')),
                Assign(
                    targets=[
                        Name(id='data_cost', ctx=Store())],
                    value=Constant(value=0)),
                For(
                    target=Name(id='byte', ctx=Store()),
                    iter=Attribute(
                        value=Name(id='tx', ctx=Load()),
                        attr='data',
                        ctx=Load()),
                    body=[
                        If(
                            test=Compare(
                                left=Name(id='byte', ctx=Load()),
                                ops=[
                                    Eq()],
                                comparators=[
                                    Constant(value=0)]),
                            body=[
                                AugAssign(
                                    target=Name(id='data_cost', ctx=Store()),
                                    op=Add(),
                                    value=Name(id='TX_DATA_COST_PER_ZERO', ctx=Load()))],
                            orelse=[
                                AugAssign(
                                    target=Name(id='data_cost', ctx=Store()),
                                    op=Add(),
                                    value=Name(id='TX_DATA_COST_PER_NON_ZERO', ctx=Load()))])],
                    orelse=[]),
                If(
                    test=Compare(
                        left=Attribute(
                            value=Name(id='tx', ctx=Load()),
                            attr='to',
                            ctx=Load()),
                        ops=[
                            Eq()],
                        comparators=[
                            Call(
                                func=Name(id='Bytes0', ctx=Load()),
                                args=[
                                    Constant(value=b'')],
                                keywords=[])]),
                    body=[
                        Assign(
                            targets=[
                                Name(id='create_cost', ctx=Store())],
                            value=Name(id='TX_CREATE_COST', ctx=Load()))],
                    orelse=[
                        Assign(
                            targets=[
                                Name(id='create_cost', ctx=Store())],
                            value=Constant(value=0))]),
                Return(
                    value=Call(
                        func=Name(id='Uint', ctx=Load()),
                        args=[
                            BinOp(
                                left=BinOp(
                                    left=Name(id='TX_BASE_COST', ctx=Load()),
                                    op=Add(),
                                    right=Name(id='data_cost', ctx=Load())),
                                op=Add(),
                                right=Name(id='create_cost', ctx=Load()))],
                        keywords=[]))],
            decorator_list=[],
            returns=Name(id='Uint', ctx=Load())),
        FunctionDef(
            name='recover_sender',
            args=arguments(
                posonlyargs=[],
                args=[
                    arg(
                        arg='chain_id',
                        annotation=Name(id='U64', ctx=Load())),
                    arg(
                        arg='tx',
                        annotation=Name(id='Transaction', ctx=Load()))],
                kwonlyargs=[],
                kw_defaults=[],
                defaults=[]),
            body=[
                Expr(
                    value=Constant(value="\n    Extracts the sender address from a transaction.\n\n    The v, r, and s values are the three parts that make up the signature\n    of a transaction. In order to recover the sender of a transaction the two\n    components needed are the signature (``v``, ``r``, and ``s``) and the\n    signing hash of the transaction. The sender's public key can be obtained\n    with these two values and therefore the sender address can be retrieved.\n\n    Parameters\n    ----------\n    tx :\n        Transaction of interest.\n    chain_id :\n        ID of the executing chain.\n\n    Returns\n    -------\n    sender : `ethereum.fork_types.Address`\n        The address of the account that signed the transaction.\n    ")),
                Assign(
                    targets=[
                        Tuple(
                            elts=[
                                Name(id='v', ctx=Store()),
                                Name(id='r', ctx=Store()),
                                Name(id='s', ctx=Store())],
                            ctx=Store())],
                    value=Tuple(
                        elts=[
                            Attribute(
                                value=Name(id='tx', ctx=Load()),
                                attr='v',
                                ctx=Load()),
                            Attribute(
                                value=Name(id='tx', ctx=Load()),
                                attr='r',
                                ctx=Load()),
                            Attribute(
                                value=Name(id='tx', ctx=Load()),
                                attr='s',
                                ctx=Load())],
                        ctx=Load())),
                If(
                    test=BoolOp(
                        op=Or(),
                        values=[
                            Compare(
                                left=Call(
                                    func=Name(id='U256', ctx=Load()),
                                    args=[
                                        Constant(value=0)],
                                    keywords=[]),
                                ops=[
                                    GtE()],
                                comparators=[
                                    Name(id='r', ctx=Load())]),
                            Compare(
                                left=Name(id='r', ctx=Load()),
                                ops=[
                                    GtE()],
                                comparators=[
                                    Name(id='SECP256K1N', ctx=Load())])]),
                    body=[
                        Raise(
                            exc=Name(id='InvalidBlock', ctx=Load()))],
                    orelse=[]),
                If(
                    test=BoolOp(
                        op=Or(),
                        values=[
                            Compare(
                                left=Call(
                                    func=Name(id='U256', ctx=Load()),
                                    args=[
                                        Constant(value=0)],
                                    keywords=[]),
                                ops=[
                                    GtE()],
                                comparators=[
                                    Name(id='s', ctx=Load())]),
                            Compare(
                                left=Name(id='s', ctx=Load()),
                                ops=[
                                    Gt()],
                                comparators=[
                                    BinOp(
                                        left=Name(id='SECP256K1N', ctx=Load()),
                                        op=FloorDiv(),
                                        right=Call(
                                            func=Name(id='U256', ctx=Load()),
                                            args=[
                                                Constant(value=2)],
                                            keywords=[]))])]),
                    body=[
                        Raise(
                            exc=Name(id='InvalidBlock', ctx=Load()))],
                    orelse=[]),
                If(
                    test=BoolOp(
                        op=Or(),
                        values=[
                            Compare(
                                left=Name(id='v', ctx=Load()),
                                ops=[
                                    Eq()],
                                comparators=[
                                    Constant(value=27)]),
                            Compare(
                                left=Name(id='v', ctx=Load()),
                                ops=[
                                    Eq()],
                                comparators=[
                                    Constant(value=28)])]),
                    body=[
                        Assign(
                            targets=[
                                Name(id='public_key', ctx=Store())],
                            value=Call(
                                func=Name(id='secp256k1_recover', ctx=Load()),
                                args=[
                                    Name(id='r', ctx=Load()),
                                    Name(id='s', ctx=Load()),
                                    BinOp(
                                        left=Name(id='v', ctx=Load()),
                                        op=Sub(),
                                        right=Call(
                                            func=Name(id='U256', ctx=Load()),
                                            args=[
                                                Constant(value=27)],
                                            keywords=[])),
                                    Call(
                                        func=Name(id='signing_hash_pre155', ctx=Load()),
                                        args=[
                                            Name(id='tx', ctx=Load())],
                                        keywords=[])],
                                keywords=[]))],
                    orelse=[
                        Assign(
                            targets=[
                                Name(id='chain_id_x2', ctx=Store())],
                            value=BinOp(
                                left=Call(
                                    func=Name(id='U256', ctx=Load()),
                                    args=[
                                        Name(id='chain_id', ctx=Load())],
                                    keywords=[]),
                                op=Mult(),
                                right=Call(
                                    func=Name(id='U256', ctx=Load()),
                                    args=[
                                        Constant(value=2)],
                                    keywords=[]))),
                        If(
                            test=BoolOp(
                                op=And(),
                                values=[
                                    Compare(
                                        left=Name(id='v', ctx=Load()),
                                        ops=[
                                            NotEq()],
                                        comparators=[
                                            BinOp(
                                                left=Call(
                                                    func=Name(id='U256', ctx=Load()),
                                                    args=[
                                                        Constant(value=35)],
                                                    keywords=[]),
                                                op=Add(),
                                                right=Name(id='chain_id_x2', ctx=Load()))]),
                                    Compare(
                                        left=Name(id='v', ctx=Load()),
                                        ops=[
                                            NotEq()],
                                        comparators=[
                                            BinOp(
                                                left=Call(
                                                    func=Name(id='U256', ctx=Load()),
                                                    args=[
                                                        Constant(value=36)],
                                                    keywords=[]),
                                                op=Add(),
                                                right=Name(id='chain_id_x2', ctx=Load()))])]),
                            body=[
                                Raise(
                                    exc=Name(id='InvalidBlock', ctx=Load()))],
                            orelse=[]),
                        Assign(
                            targets=[
                                Name(id='public_key', ctx=Store())],
                            value=Call(
                                func=Name(id='secp256k1_recover', ctx=Load()),
                                args=[
                                    Name(id='r', ctx=Load()),
                                    Name(id='s', ctx=Load()),
                                    BinOp(
                                        left=BinOp(
                                            left=Name(id='v', ctx=Load()),
                                            op=Sub(),
                                            right=Call(
                                                func=Name(id='U256', ctx=Load()),
                                                args=[
                                                    Constant(value=35)],
                                                keywords=[])),
                                        op=Sub(),
                                        right=Name(id='chain_id_x2', ctx=Load())),
                                    Call(
                                        func=Name(id='signing_hash_155', ctx=Load()),
                                        args=[
                                            Name(id='tx', ctx=Load()),
                                            Name(id='chain_id', ctx=Load())],
                                        keywords=[])],
                                keywords=[]))]),
                Return(
                    value=Call(
                        func=Name(id='Address', ctx=Load()),
                        args=[
                            Subscript(
                                value=Call(
                                    func=Name(id='keccak256', ctx=Load()),
                                    args=[
                                        Name(id='public_key', ctx=Load())],
                                    keywords=[]),
                                slice=Slice(
                                    lower=Constant(value=12),
                                    upper=Constant(value=32)),
                                ctx=Load())],
                        keywords=[]))],
            decorator_list=[],
            returns=Name(id='Address', ctx=Load())),
        FunctionDef(
            name='signing_hash_pre155',
            args=arguments(
                posonlyargs=[],
                args=[
                    arg(
                        arg='tx',
                        annotation=Name(id='Transaction', ctx=Load()))],
                kwonlyargs=[],
                kw_defaults=[],
                defaults=[]),
            body=[
                Expr(
                    value=Constant(value='\n    Compute the hash of a transaction used in a legacy (pre EIP 155) signature.\n\n    Parameters\n    ----------\n    tx :\n        Transaction of interest.\n\n    Returns\n    -------\n    hash : `ethereum.crypto.hash.Hash32`\n        Hash of the transaction.\n    ')),
                Return(
                    value=Call(
                        func=Name(id='keccak256', ctx=Load()),
                        args=[
                            Call(
                                func=Attribute(
                                    value=Name(id='rlp', ctx=Load()),
                                    attr='encode',
                                    ctx=Load()),
                                args=[
                                    Tuple(
                                        elts=[
                                            Attribute(
                                                value=Name(id='tx', ctx=Load()),
                                                attr='nonce',
                                                ctx=Load()),
                                            Attribute(
                                                value=Name(id='tx', ctx=Load()),
                                                attr='gas_price',
                                                ctx=Load()),
                                            Attribute(
                                                value=Name(id='tx', ctx=Load()),
                                                attr='gas',
                                                ctx=Load()),
                                            Attribute(
                                                value=Name(id='tx', ctx=Load()),
                                                attr='to',
                                                ctx=Load()),
                                            Attribute(
                                                value=Name(id='tx', ctx=Load()),
                                                attr='value',
                                                ctx=Load()),
                                            Attribute(
                                                value=Name(id='tx', ctx=Load()),
                                                attr='data',
                                                ctx=Load())],
                                        ctx=Load())],
                                keywords=[])],
                        keywords=[]))],
            decorator_list=[],
            returns=Name(id='Hash32', ctx=Load())),
        FunctionDef(
            name='signing_hash_155',
            args=arguments(
                posonlyargs=[],
                args=[
                    arg(
                        arg='tx',
                        annotation=Name(id='Transaction', ctx=Load())),
                    arg(
                        arg='chain_id',
                        annotation=Name(id='U64', ctx=Load()))],
                kwonlyargs=[],
                kw_defaults=[],
                defaults=[]),
            body=[
                Expr(
                    value=Constant(value='\n    Compute the hash of a transaction used in a EIP 155 signature.\n\n    Parameters\n    ----------\n    tx :\n        Transaction of interest.\n    chain_id :\n        The id of the current chain.\n\n    Returns\n    -------\n    hash : `ethereum.crypto.hash.Hash32`\n        Hash of the transaction.\n    ')),
                Return(
                    value=Call(
                        func=Name(id='keccak256', ctx=Load()),
                        args=[
                            Call(
                                func=Attribute(
                                    value=Name(id='rlp', ctx=Load()),
                                    attr='encode',
                                    ctx=Load()),
                                args=[
                                    Tuple(
                                        elts=[
                                            Attribute(
                                                value=Name(id='tx', ctx=Load()),
                                                attr='nonce',
                                                ctx=Load()),
                                            Attribute(
                                                value=Name(id='tx', ctx=Load()),
                                                attr='gas_price',
                                                ctx=Load()),
                                            Attribute(
                                                value=Name(id='tx', ctx=Load()),
                                                attr='gas',
                                                ctx=Load()),
                                            Attribute(
                                                value=Name(id='tx', ctx=Load()),
                                                attr='to',
                                                ctx=Load()),
                                            Attribute(
                                                value=Name(id='tx', ctx=Load()),
                                                attr='value',
                                                ctx=Load()),
                                            Attribute(
                                                value=Name(id='tx', ctx=Load()),
                                                attr='data',
                                                ctx=Load()),
                                            Name(id='chain_id', ctx=Load()),
                                            Call(
                                                func=Name(id='Uint', ctx=Load()),
                                                args=[
                                                    Constant(value=0)],
                                                keywords=[]),
                                            Call(
                                                func=Name(id='Uint', ctx=Load()),
                                                args=[
                                                    Constant(value=0)],
                                                keywords=[])],
                                        ctx=Load())],
                                keywords=[])],
                        keywords=[]))],
            decorator_list=[],
            returns=Name(id='Hash32', ctx=Load())),
        FunctionDef(
            name='compute_header_hash',
            args=arguments(
                posonlyargs=[],
                args=[
                    arg(
                        arg='header',
                        annotation=Name(id='Header', ctx=Load()))],
                kwonlyargs=[],
                kw_defaults=[],
                defaults=[]),
            body=[
                Expr(
                    value=Constant(value="\n    Computes the hash of a block header.\n\n    The header hash of a block is the canonical hash that is used to refer\n    to a specific block and completely distinguishes a block from another.\n\n    ``keccak256`` is a function that produces a 256 bit hash of any input.\n    It also takes in any number of bytes as an input and produces a single\n    hash for them. A hash is a completely unique output for a single input.\n    So an input corresponds to one unique hash that can be used to identify\n    the input exactly.\n\n    Prior to using the ``keccak256`` hash function, the header must be\n    encoded using the Recursive-Length Prefix. See :ref:`rlp`.\n    RLP encoding the header converts it into a space-efficient format that\n    allows for easy transfer of data between nodes. The purpose of RLP is to\n    encode arbitrarily nested arrays of binary data, and RLP is the primary\n    encoding method used to serialize objects in Ethereum's execution layer.\n    The only purpose of RLP is to encode structure; encoding specific data\n    types (e.g. strings, floats) is left up to higher-order protocols.\n\n    Parameters\n    ----------\n    header :\n        Header of interest.\n\n    Returns\n    -------\n    hash : `ethereum.crypto.hash.Hash32`\n        Hash of the header.\n    ")),
                Return(
                    value=Call(
                        func=Name(id='keccak256', ctx=Load()),
                        args=[
                            Call(
                                func=Attribute(
                                    value=Name(id='rlp', ctx=Load()),
                                    attr='encode',
                                    ctx=Load()),
                                args=[
                                    Name(id='header', ctx=Load())],
                                keywords=[])],
                        keywords=[]))],
            decorator_list=[],
            returns=Name(id='Hash32', ctx=Load())),
        FunctionDef(
            name='check_gas_limit',
            args=arguments(
                posonlyargs=[],
                args=[
                    arg(
                        arg='gas_limit',
                        annotation=Name(id='Uint', ctx=Load())),
                    arg(
                        arg='parent_gas_limit',
                        annotation=Name(id='Uint', ctx=Load()))],
                kwonlyargs=[],
                kw_defaults=[],
                defaults=[]),
            body=[
                Expr(
                    value=Constant(value="\n    Validates the gas limit for a block.\n\n    The bounds of the gas limit, ``max_adjustment_delta``, is set as the\n    quotient of the parent block's gas limit and the\n    ``GAS_LIMIT_ADJUSTMENT_FACTOR``. Therefore, if the gas limit that is\n    passed through as a parameter is greater than or equal to the *sum* of\n    the parent's gas and the adjustment delta then the limit for gas is too\n    high and fails this function's check. Similarly, if the limit is less\n    than or equal to the *difference* of the parent's gas and the adjustment\n    delta *or* the predefined ``GAS_LIMIT_MINIMUM`` then this function's\n    check fails because the gas limit doesn't allow for a sufficient or\n    reasonable amount of gas to be used on a block.\n\n    Parameters\n    ----------\n    gas_limit :\n        Gas limit to validate.\n\n    parent_gas_limit :\n        Gas limit of the parent block.\n\n    Returns\n    -------\n    check : `bool`\n        True if gas limit constraints are satisfied, False otherwise.\n    ")),
                Assign(
                    targets=[
                        Name(id='max_adjustment_delta', ctx=Store())],
                    value=BinOp(
                        left=Name(id='parent_gas_limit', ctx=Load()),
                        op=FloorDiv(),
                        right=Name(id='GAS_LIMIT_ADJUSTMENT_FACTOR', ctx=Load()))),
                If(
                    test=Compare(
                        left=Name(id='gas_limit', ctx=Load()),
                        ops=[
                            GtE()],
                        comparators=[
                            BinOp(
                                left=Name(id='parent_gas_limit', ctx=Load()),
                                op=Add(),
                                right=Name(id='max_adjustment_delta', ctx=Load()))]),
                    body=[
                        Return(
                            value=Constant(value=False))],
                    orelse=[]),
                If(
                    test=Compare(
                        left=Name(id='gas_limit', ctx=Load()),
                        ops=[
                            LtE()],
                        comparators=[
                            BinOp(
                                left=Name(id='parent_gas_limit', ctx=Load()),
                                op=Sub(),
                                right=Name(id='max_adjustment_delta', ctx=Load()))]),
                    body=[
                        Return(
                            value=Constant(value=False))],
                    orelse=[]),
                If(
                    test=Compare(
                        left=Name(id='gas_limit', ctx=Load()),
                        ops=[
                            Lt()],
                        comparators=[
                            Name(id='GAS_LIMIT_MINIMUM', ctx=Load())]),
                    body=[
                        Return(
                            value=Constant(value=False))],
                    orelse=[]),
                Return(
                    value=Constant(value=True))],
            decorator_list=[],
            returns=Name(id='bool', ctx=Load())),
        FunctionDef(
            name='calculate_block_difficulty',
            args=arguments(
                posonlyargs=[],
                args=[
                    arg(
                        arg='block_number',
                        annotation=Name(id='Uint', ctx=Load())),
                    arg(
                        arg='block_timestamp',
                        annotation=Name(id='U256', ctx=Load())),
                    arg(
                        arg='parent_timestamp',
                        annotation=Name(id='U256', ctx=Load())),
                    arg(
                        arg='parent_difficulty',
                        annotation=Name(id='Uint', ctx=Load())),
                    arg(
                        arg='parent_has_ommers',
                        annotation=Name(id='bool', ctx=Load()))],
                kwonlyargs=[],
                kw_defaults=[],
                defaults=[]),
            body=[
                Expr(
                    value=Constant(value="\n    Computes difficulty of a block using its header and parent header.\n\n    The difficulty is determined by the time the block was created after its\n    parent. The ``offset`` is calculated using the parent block's difficulty,\n    ``parent_difficulty``, and the timestamp between blocks. This offset is\n    then added to the parent difficulty and is stored as the ``difficulty``\n    variable. If the time between the block and its parent is too short, the\n    offset will result in a positive number thus making the sum of\n    ``parent_difficulty`` and ``offset`` to be a greater value in order to\n    avoid mass forking. But, if the time is long enough, then the offset\n    results in a negative value making the block less difficult than\n    its parent.\n\n    The base standard for a block's difficulty is the predefined value\n    set for the genesis block since it has no parent. So, a block\n    can't be less difficult than the genesis block, therefore each block's\n    difficulty is set to the maximum value between the calculated\n    difficulty and the ``GENESIS_DIFFICULTY``.\n\n    Parameters\n    ----------\n    block_number :\n        Block number of the block.\n    block_timestamp :\n        Timestamp of the block.\n    parent_timestamp :\n        Timestamp of the parent block.\n    parent_difficulty :\n        difficulty of the parent block.\n    parent_has_ommers:\n        does the parent have ommers.\n\n    Returns\n    -------\n    difficulty : `ethereum.base_types.Uint`\n        Computed difficulty for a block.\n    ")),
                Assign(
                    targets=[
                        Name(id='offset', ctx=Store())],
                    value=BinOp(
                        left=BinOp(
                            left=Call(
                                func=Name(id='int', ctx=Load()),
                                args=[
                                    Name(id='parent_difficulty', ctx=Load())],
                                keywords=[]),
                            op=FloorDiv(),
                            right=Constant(value=2048)),
                        op=Mult(),
                        right=Call(
                            func=Name(id='max', ctx=Load()),
                            args=[
                                BinOp(
                                    left=IfExp(
                                        test=Name(id='parent_has_ommers', ctx=Load()),
                                        body=Constant(value=2),
                                        orelse=Constant(value=1)),
                                    op=Sub(),
                                    right=BinOp(
                                        left=Call(
                                            func=Name(id='int', ctx=Load()),
                                            args=[
                                                BinOp(
                                                    left=Name(id='block_timestamp', ctx=Load()),
                                                    op=Sub(),
                                                    right=Name(id='parent_timestamp', ctx=Load()))],
                                            keywords=[]),
                                        op=FloorDiv(),
                                        right=Constant(value=9))),
                                UnaryOp(
                                    op=USub(),
                                    operand=Constant(value=99))],
                            keywords=[]))),
                Assign(
                    targets=[
                        Name(id='difficulty', ctx=Store())],
                    value=BinOp(
                        left=Call(
                            func=Name(id='int', ctx=Load()),
                            args=[
                                Name(id='parent_difficulty', ctx=Load())],
                            keywords=[]),
                        op=Add(),
                        right=Name(id='offset', ctx=Load()))),
                Assign(
                    targets=[
                        Name(id='num_bomb_periods', ctx=Store())],
                    value=BinOp(
                        left=BinOp(
                            left=BinOp(
                                left=Call(
                                    func=Name(id='int', ctx=Load()),
                                    args=[
                                        Name(id='block_number', ctx=Load())],
                                    keywords=[]),
                                op=Sub(),
                                right=Name(id='BOMB_DELAY_BLOCKS', ctx=Load())),
                            op=FloorDiv(),
                            right=Constant(value=100000)),
                        op=Sub(),
                        right=Constant(value=2))),
                If(
                    test=Compare(
                        left=Name(id='num_bomb_periods', ctx=Load()),
                        ops=[
                            GtE()],
                        comparators=[
                            Constant(value=0)]),
                    body=[
                        AugAssign(
                            target=Name(id='difficulty', ctx=Store()),
                            op=Add(),
                            value=BinOp(
                                left=Constant(value=2),
                                op=Pow(),
                                right=Name(id='num_bomb_periods', ctx=Load())))],
                    orelse=[]),
                Return(
                    value=Call(
                        func=Name(id='Uint', ctx=Load()),
                        args=[
                            Call(
                                func=Name(id='max', ctx=Load()),
                                args=[
                                    Name(id='difficulty', ctx=Load()),
                                    Call(
                                        func=Name(id='int', ctx=Load()),
                                        args=[
                                            Name(id='MINIMUM_DIFFICULTY', ctx=Load())],
                                        keywords=[])],
                                keywords=[])],
                        keywords=[]))],
            decorator_list=[],
            returns=Name(id='Uint', ctx=Load()))],
    type_ignores=[])
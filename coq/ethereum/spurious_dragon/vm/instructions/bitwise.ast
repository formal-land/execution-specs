Module(
    body=[
        Expr(
            value=Constant(value='\nEthereum Virtual Machine (EVM) Bitwise Instructions\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. contents:: Table of Contents\n    :backlinks: none\n    :local:\n\nIntroduction\n------------\n\nImplementations of the EVM bitwise instructions.\n')),
        ImportFrom(
            module='ethereum_types.numeric',
            names=[
                alias(name='U256'),
                alias(name='Uint')],
            level=0),
        ImportFrom(
            names=[
                alias(name='Evm')],
            level=2),
        ImportFrom(
            module='gas',
            names=[
                alias(name='GAS_VERY_LOW'),
                alias(name='charge_gas')],
            level=2),
        ImportFrom(
            module='stack',
            names=[
                alias(name='pop'),
                alias(name='push')],
            level=2),
        FunctionDef(
            name='bitwise_and',
            args=arguments(
                posonlyargs=[],
                args=[
                    arg(
                        arg='evm',
                        annotation=Name(id='Evm', ctx=Load()))],
                kwonlyargs=[],
                kw_defaults=[],
                defaults=[]),
            body=[
                Expr(
                    value=Constant(value='\n    Bitwise AND operation of the top 2 elements of the stack. Pushes the\n    result back on the stack.\n\n    Parameters\n    ----------\n    evm :\n        The current EVM frame.\n\n    ')),
                Assign(
                    targets=[
                        Name(id='x', ctx=Store())],
                    value=Call(
                        func=Name(id='pop', ctx=Load()),
                        args=[
                            Attribute(
                                value=Name(id='evm', ctx=Load()),
                                attr='stack',
                                ctx=Load())],
                        keywords=[])),
                Assign(
                    targets=[
                        Name(id='y', ctx=Store())],
                    value=Call(
                        func=Name(id='pop', ctx=Load()),
                        args=[
                            Attribute(
                                value=Name(id='evm', ctx=Load()),
                                attr='stack',
                                ctx=Load())],
                        keywords=[])),
                Expr(
                    value=Call(
                        func=Name(id='charge_gas', ctx=Load()),
                        args=[
                            Name(id='evm', ctx=Load()),
                            Name(id='GAS_VERY_LOW', ctx=Load())],
                        keywords=[])),
                Expr(
                    value=Call(
                        func=Name(id='push', ctx=Load()),
                        args=[
                            Attribute(
                                value=Name(id='evm', ctx=Load()),
                                attr='stack',
                                ctx=Load()),
                            BinOp(
                                left=Name(id='x', ctx=Load()),
                                op=BitAnd(),
                                right=Name(id='y', ctx=Load()))],
                        keywords=[])),
                AugAssign(
                    target=Attribute(
                        value=Name(id='evm', ctx=Load()),
                        attr='pc',
                        ctx=Store()),
                    op=Add(),
                    value=Call(
                        func=Name(id='Uint', ctx=Load()),
                        args=[
                            Constant(value=1)],
                        keywords=[]))],
            decorator_list=[],
            returns=Constant(value=None)),
        FunctionDef(
            name='bitwise_or',
            args=arguments(
                posonlyargs=[],
                args=[
                    arg(
                        arg='evm',
                        annotation=Name(id='Evm', ctx=Load()))],
                kwonlyargs=[],
                kw_defaults=[],
                defaults=[]),
            body=[
                Expr(
                    value=Constant(value='\n    Bitwise OR operation of the top 2 elements of the stack. Pushes the\n    result back on the stack.\n\n    Parameters\n    ----------\n    evm :\n        The current EVM frame.\n\n    ')),
                Assign(
                    targets=[
                        Name(id='x', ctx=Store())],
                    value=Call(
                        func=Name(id='pop', ctx=Load()),
                        args=[
                            Attribute(
                                value=Name(id='evm', ctx=Load()),
                                attr='stack',
                                ctx=Load())],
                        keywords=[])),
                Assign(
                    targets=[
                        Name(id='y', ctx=Store())],
                    value=Call(
                        func=Name(id='pop', ctx=Load()),
                        args=[
                            Attribute(
                                value=Name(id='evm', ctx=Load()),
                                attr='stack',
                                ctx=Load())],
                        keywords=[])),
                Expr(
                    value=Call(
                        func=Name(id='charge_gas', ctx=Load()),
                        args=[
                            Name(id='evm', ctx=Load()),
                            Name(id='GAS_VERY_LOW', ctx=Load())],
                        keywords=[])),
                Expr(
                    value=Call(
                        func=Name(id='push', ctx=Load()),
                        args=[
                            Attribute(
                                value=Name(id='evm', ctx=Load()),
                                attr='stack',
                                ctx=Load()),
                            BinOp(
                                left=Name(id='x', ctx=Load()),
                                op=BitOr(),
                                right=Name(id='y', ctx=Load()))],
                        keywords=[])),
                AugAssign(
                    target=Attribute(
                        value=Name(id='evm', ctx=Load()),
                        attr='pc',
                        ctx=Store()),
                    op=Add(),
                    value=Call(
                        func=Name(id='Uint', ctx=Load()),
                        args=[
                            Constant(value=1)],
                        keywords=[]))],
            decorator_list=[],
            returns=Constant(value=None)),
        FunctionDef(
            name='bitwise_xor',
            args=arguments(
                posonlyargs=[],
                args=[
                    arg(
                        arg='evm',
                        annotation=Name(id='Evm', ctx=Load()))],
                kwonlyargs=[],
                kw_defaults=[],
                defaults=[]),
            body=[
                Expr(
                    value=Constant(value='\n    Bitwise XOR operation of the top 2 elements of the stack. Pushes the\n    result back on the stack.\n\n    Parameters\n    ----------\n    evm :\n        The current EVM frame.\n\n    ')),
                Assign(
                    targets=[
                        Name(id='x', ctx=Store())],
                    value=Call(
                        func=Name(id='pop', ctx=Load()),
                        args=[
                            Attribute(
                                value=Name(id='evm', ctx=Load()),
                                attr='stack',
                                ctx=Load())],
                        keywords=[])),
                Assign(
                    targets=[
                        Name(id='y', ctx=Store())],
                    value=Call(
                        func=Name(id='pop', ctx=Load()),
                        args=[
                            Attribute(
                                value=Name(id='evm', ctx=Load()),
                                attr='stack',
                                ctx=Load())],
                        keywords=[])),
                Expr(
                    value=Call(
                        func=Name(id='charge_gas', ctx=Load()),
                        args=[
                            Name(id='evm', ctx=Load()),
                            Name(id='GAS_VERY_LOW', ctx=Load())],
                        keywords=[])),
                Expr(
                    value=Call(
                        func=Name(id='push', ctx=Load()),
                        args=[
                            Attribute(
                                value=Name(id='evm', ctx=Load()),
                                attr='stack',
                                ctx=Load()),
                            BinOp(
                                left=Name(id='x', ctx=Load()),
                                op=BitXor(),
                                right=Name(id='y', ctx=Load()))],
                        keywords=[])),
                AugAssign(
                    target=Attribute(
                        value=Name(id='evm', ctx=Load()),
                        attr='pc',
                        ctx=Store()),
                    op=Add(),
                    value=Call(
                        func=Name(id='Uint', ctx=Load()),
                        args=[
                            Constant(value=1)],
                        keywords=[]))],
            decorator_list=[],
            returns=Constant(value=None)),
        FunctionDef(
            name='bitwise_not',
            args=arguments(
                posonlyargs=[],
                args=[
                    arg(
                        arg='evm',
                        annotation=Name(id='Evm', ctx=Load()))],
                kwonlyargs=[],
                kw_defaults=[],
                defaults=[]),
            body=[
                Expr(
                    value=Constant(value='\n    Bitwise NOT operation of the top element of the stack. Pushes the\n    result back on the stack.\n\n    Parameters\n    ----------\n    evm :\n        The current EVM frame.\n\n    ')),
                Assign(
                    targets=[
                        Name(id='x', ctx=Store())],
                    value=Call(
                        func=Name(id='pop', ctx=Load()),
                        args=[
                            Attribute(
                                value=Name(id='evm', ctx=Load()),
                                attr='stack',
                                ctx=Load())],
                        keywords=[])),
                Expr(
                    value=Call(
                        func=Name(id='charge_gas', ctx=Load()),
                        args=[
                            Name(id='evm', ctx=Load()),
                            Name(id='GAS_VERY_LOW', ctx=Load())],
                        keywords=[])),
                Expr(
                    value=Call(
                        func=Name(id='push', ctx=Load()),
                        args=[
                            Attribute(
                                value=Name(id='evm', ctx=Load()),
                                attr='stack',
                                ctx=Load()),
                            UnaryOp(
                                op=Invert(),
                                operand=Name(id='x', ctx=Load()))],
                        keywords=[])),
                AugAssign(
                    target=Attribute(
                        value=Name(id='evm', ctx=Load()),
                        attr='pc',
                        ctx=Store()),
                    op=Add(),
                    value=Call(
                        func=Name(id='Uint', ctx=Load()),
                        args=[
                            Constant(value=1)],
                        keywords=[]))],
            decorator_list=[],
            returns=Constant(value=None)),
        FunctionDef(
            name='get_byte',
            args=arguments(
                posonlyargs=[],
                args=[
                    arg(
                        arg='evm',
                        annotation=Name(id='Evm', ctx=Load()))],
                kwonlyargs=[],
                kw_defaults=[],
                defaults=[]),
            body=[
                Expr(
                    value=Constant(value='\n    For a word (defined by next top element of the stack), retrieve the\n    Nth byte (0-indexed and defined by top element of stack) from the\n    left (most significant) to right (least significant).\n\n    Parameters\n    ----------\n    evm :\n        The current EVM frame.\n\n    ')),
                Assign(
                    targets=[
                        Name(id='byte_index', ctx=Store())],
                    value=Call(
                        func=Name(id='pop', ctx=Load()),
                        args=[
                            Attribute(
                                value=Name(id='evm', ctx=Load()),
                                attr='stack',
                                ctx=Load())],
                        keywords=[])),
                Assign(
                    targets=[
                        Name(id='word', ctx=Store())],
                    value=Call(
                        func=Name(id='pop', ctx=Load()),
                        args=[
                            Attribute(
                                value=Name(id='evm', ctx=Load()),
                                attr='stack',
                                ctx=Load())],
                        keywords=[])),
                Expr(
                    value=Call(
                        func=Name(id='charge_gas', ctx=Load()),
                        args=[
                            Name(id='evm', ctx=Load()),
                            Name(id='GAS_VERY_LOW', ctx=Load())],
                        keywords=[])),
                If(
                    test=Compare(
                        left=Name(id='byte_index', ctx=Load()),
                        ops=[
                            GtE()],
                        comparators=[
                            Call(
                                func=Name(id='U256', ctx=Load()),
                                args=[
                                    Constant(value=32)],
                                keywords=[])]),
                    body=[
                        Assign(
                            targets=[
                                Name(id='result', ctx=Store())],
                            value=Call(
                                func=Name(id='U256', ctx=Load()),
                                args=[
                                    Constant(value=0)],
                                keywords=[]))],
                    orelse=[
                        Assign(
                            targets=[
                                Name(id='extra_bytes_to_right', ctx=Store())],
                            value=BinOp(
                                left=Call(
                                    func=Name(id='U256', ctx=Load()),
                                    args=[
                                        Constant(value=31)],
                                    keywords=[]),
                                op=Sub(),
                                right=Name(id='byte_index', ctx=Load()))),
                        Assign(
                            targets=[
                                Name(id='word', ctx=Store())],
                            value=BinOp(
                                left=Name(id='word', ctx=Load()),
                                op=RShift(),
                                right=BinOp(
                                    left=Name(id='extra_bytes_to_right', ctx=Load()),
                                    op=Mult(),
                                    right=Call(
                                        func=Name(id='U256', ctx=Load()),
                                        args=[
                                            Constant(value=8)],
                                        keywords=[])))),
                        Assign(
                            targets=[
                                Name(id='word', ctx=Store())],
                            value=BinOp(
                                left=Name(id='word', ctx=Load()),
                                op=BitAnd(),
                                right=Call(
                                    func=Name(id='U256', ctx=Load()),
                                    args=[
                                        Constant(value=255)],
                                    keywords=[]))),
                        Assign(
                            targets=[
                                Name(id='result', ctx=Store())],
                            value=Name(id='word', ctx=Load()))]),
                Expr(
                    value=Call(
                        func=Name(id='push', ctx=Load()),
                        args=[
                            Attribute(
                                value=Name(id='evm', ctx=Load()),
                                attr='stack',
                                ctx=Load()),
                            Name(id='result', ctx=Load())],
                        keywords=[])),
                AugAssign(
                    target=Attribute(
                        value=Name(id='evm', ctx=Load()),
                        attr='pc',
                        ctx=Store()),
                    op=Add(),
                    value=Call(
                        func=Name(id='Uint', ctx=Load()),
                        args=[
                            Constant(value=1)],
                        keywords=[]))],
            decorator_list=[],
            returns=Constant(value=None))],
    type_ignores=[])
Module(
    body=[
        Expr(
            value=Constant(value='\nUtility functions used in this specification.\n')),
        ImportFrom(
            module='dataclasses',
            names=[
                alias(name='fields')],
            level=0),
        ImportFrom(
            module='typing',
            names=[
                alias(name='Any')],
            level=0),
        FunctionDef(
            name='has_field',
            args=arguments(
                posonlyargs=[],
                args=[
                    arg(
                        arg='class_',
                        annotation=Name(id='Any', ctx=Load())),
                    arg(
                        arg='name',
                        annotation=Name(id='str', ctx=Load()))],
                kwonlyargs=[],
                kw_defaults=[],
                defaults=[]),
            body=[
                Expr(
                    value=Constant(value='\n    Returns `True` if `class_` has a field with the given `name`.\n    ')),
                Try(
                    body=[
                        Assign(
                            targets=[
                                Name(id='all_fields', ctx=Store())],
                            value=Call(
                                func=Name(id='fields', ctx=Load()),
                                args=[
                                    Name(id='class_', ctx=Load())],
                                keywords=[]))],
                    handlers=[
                        ExceptHandler(
                            type=Name(id='TypeError', ctx=Load()),
                            body=[
                                Return(
                                    value=Constant(value=False))])],
                    orelse=[],
                    finalbody=[]),
                Return(
                    value=Call(
                        func=Name(id='any', ctx=Load()),
                        args=[
                            GeneratorExp(
                                elt=Compare(
                                    left=Attribute(
                                        value=Name(id='x', ctx=Load()),
                                        attr='name',
                                        ctx=Load()),
                                    ops=[
                                        Eq()],
                                    comparators=[
                                        Name(id='name', ctx=Load())]),
                                generators=[
                                    comprehension(
                                        target=Name(id='x', ctx=Store()),
                                        iter=Name(id='all_fields', ctx=Load()),
                                        ifs=[],
                                        is_async=0)])],
                        keywords=[]))],
            decorator_list=[],
            returns=Name(id='bool', ctx=Load()))],
    type_ignores=[])